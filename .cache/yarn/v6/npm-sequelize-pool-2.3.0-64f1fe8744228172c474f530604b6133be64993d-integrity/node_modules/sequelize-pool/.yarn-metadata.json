{
  "manifest": {
    "name": "sequelize-pool",
    "description": "Resource pooling for Node.JS",
    "version": "2.3.0",
    "author": {
      "name": "Sushant",
      "email": "sushantdhiman@outlook.com"
    },
    "keywords": [
      "pool",
      "pooling",
      "throttle",
      "sequelize"
    ],
    "main": "lib/Pool.js",
    "repository": {
      "type": "git",
      "url": "http://github.com/sushantdhiman/sequelize-pool.git"
    },
    "files": [
      "lib"
    ],
    "dependencies": {},
    "devDependencies": {
      "eslint": "^5.16.0",
      "eslint-config-prettier": "^4.3.0",
      "eslint-plugin-prettier": "^3.1.0",
      "prettier": "1.18.2",
      "tap": "^12.7.0"
    },
    "engines": {
      "node": ">= 6.0.0"
    },
    "scripts": {
      "test": "npm run lint && npm run test:raw",
      "lint": "eslint lib test",
      "pretty": "prettier lib/**/*.js test/**/*.js --write",
      "test:raw": "tap test/**/*-test.js"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-sequelize-pool-2.3.0-64f1fe8744228172c474f530604b6133be64993d-integrity/node_modules/sequelize-pool/package.json",
    "readmeFilename": "README.md",
    "readme": "# sequelize-pool\n\n[![npm](https://img.shields.io/npm/v/sequelize-pool.svg?style=flat-square)](https://www.npmjs.com/package/sequelize-pool)\n[![Travis (.org)](https://img.shields.io/travis/sushantdhiman/sequelize-pool.svg?style=flat-square)](https://travis-ci.org/sushantdhiman/sequelize-pool)\n\n\n  Resource pool. Can be used to reuse or throttle expensive resources such as\n  database connections.\n\n  This is a fork from [generic-pool@v2.5](https://github.com/coopernurse/node-pool/tree/v2.5).\n\n## Installation\n\n```bash\n$ npm install --save sequelize-pool\n$ yarn add sequelize-pool\n```\n\n## Example\n\n### Step 1 - Create pool using a factory object\n\n```js\n// Create a MySQL connection pool\nvar Pool = require('sequelize-pool').Pool;\nvar mysql2 = require('mysql2/promise');\n\nvar pool = new Pool({\n    name     : 'mysql',\n    create   : function() {\n      // return Promise\n      return mysql2.createConnection({\n        user: 'scott',\n        password: 'tiger',\n        database:'mydb'\n      });\n    },\n    destroy  : function(client) { client.end(); },\n    max      : 10,\n    // optional. if you set this, make sure to drain() (see step 3)\n    min      : 2,\n    // Delay in milliseconds after which available resources in the pool will be destroyed.\n    idleTimeoutMillis : 30000,\n    // Delay in milliseconds after which pending acquire request in the pool will be rejected.\n    acquireTimeoutMillis: 30000,\n     // Function, defaults to console.log\n    log : true\n});\n```\n\n### Step 2 - Use pool in your code to acquire/release resources\n\n```js\n// acquire connection\npool.acquire().then(connection => {\n  client.query(\"select * from foo\", [], function() {\n  // return object back to pool\n    pool.release(client);\n  });\n});\n```\n\n### Step 3 - Drain pool during shutdown (optional)\n\nIf you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so.  This is a side\neffect of the idleTimeoutMillis behaviour -- the pool has a\nsetTimeout() call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\nstops trying to manage them.\n\nThis behaviour will be more problematic when you set factory.min > 0,\nas the pool will never become empty, and the setTimeout calls will\nnever end.\n\nIn these cases, use the pool.drain() function.  This sets the pool\ninto a \"draining\" state which will gracefully wait until all\nidle resources have timed out.  For example, you can call:\n\n```js\n// Only call this once in your application -- at the point you want\n// to shutdown and stop using this pool.\npool.drain().then(() => pool.destroyAllNow());\n```\n\nIf you do this, your node process will exit gracefully.\n\n## Draining\n\nIf you know would like to terminate all the resources in your pool before\ntheir timeouts have been reached, you can use `destroyAllNow()` in conjunction\nwith `drain()`:\n\n```js\npool.drain().then(() => pool.destroyAllNow());\n```\n\nOne side-effect of calling `drain()` is that subsequent calls to `acquire()`\nwill throw an Error.\n\n## Pool info\n\nThe following functions will let you get information about the pool:\n\n```js\n// returns factory.name for this pool\npool.name\n\n// returns number of resources in the pool regardless of\n// whether they are free or in use\npool.size\n\n// returns number of unused resources in the pool\npool.available\n\n// returns number of callers waiting to acquire a resource\npool.waiting\n\n// returns number of maxixmum number of resources allowed by ppol\npool.maxSize\n\n// returns number of minimum number of resources allowed by ppol\npool.minSize\n\n```\n\n## Run Tests\n\n    $ npm install\n    $ npm test",
    "licenseText": "(The MIT License)\n\nCopyright (c) 2018-present Sushant <sushantdhiman@outlook.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n--------------------------------\n\n(Original Fork License)\n\n[generic-pool@2.5]\n\nCopyright (c) 2010-2016 James Cooper <james@bitmechanic.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sequelize-pool/-/sequelize-pool-2.3.0.tgz#64f1fe8744228172c474f530604b6133be64993d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sequelize-pool/-/sequelize-pool-2.3.0.tgz",
    "hash": "64f1fe8744228172c474f530604b6133be64993d",
    "integrity": "sha512-Ibz08vnXvkZ8LJTiUOxRcj1Ckdn7qafNZ2t59jYHMX1VIebTAOYefWdRYFt6z6+hy52WGthAHAoLc9hvk3onqA==",
    "registry": "npm",
    "packageName": "sequelize-pool",
    "cacheIntegrity": "sha512-Ibz08vnXvkZ8LJTiUOxRcj1Ckdn7qafNZ2t59jYHMX1VIebTAOYefWdRYFt6z6+hy52WGthAHAoLc9hvk3onqA== sha1-ZPH+h0QigXLEdPUwYEthM75kmT0="
  },
  "registry": "npm",
  "hash": "64f1fe8744228172c474f530604b6133be64993d"
}