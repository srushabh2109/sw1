{
  "manifest": {
    "name": "update-check",
    "version": "1.5.2",
    "description": "Minimalistic update notifications for command line interfaces",
    "main": "./index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "lint": "zeit-eslint --ext .jsx,.js .",
      "lint-staged": "git diff --diff-filter=ACMRT --cached --name-only '*.js' '*.jsx' | xargs zeit-eslint"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/zeit/update-check.git"
    },
    "keywords": [
      "update",
      "notifications",
      "checker",
      "notifier"
    ],
    "author": {
      "name": "leo"
    },
    "license": "MIT",
    "devDependencies": {
      "@zeit/eslint-config-node": "0.2.13",
      "@zeit/git-hooks": "0.1.4",
      "eslint": "4.19.1"
    },
    "eslintConfig": {
      "extends": [
        "@zeit/eslint-config-node"
      ]
    },
    "git": {
      "pre-commit": "lint-staged"
    },
    "dependencies": {
      "registry-auth-token": "3.3.2",
      "registry-url": "3.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-update-check-1.5.2-2fe09f725c543440b3d7dabe8971f2d5caaedc28-integrity/node_modules/update-check/package.json",
    "readmeFilename": "README.md",
    "readme": "# update-check \n\nThis is a very minimal approach to update checking for [globally installed](https://docs.npmjs.com/getting-started/installing-npm-packages-globally) packages.\n\nBecause it's so simple, the error surface is very tiny and your user's are guaranteed to receive the update message if there's a new version.\n\nYou can read more about the reasoning behind this project [here](https://twitter.com/notquiteleo/status/983193273224200192).\n\n## Usage\n\nFirstly, install the package with [yarn](https://yarnpkg.com/en/)...\n\n```bash\nyarn add update-check\n```\n\n...or [npm](https://www.npmjs.com/):\n\n```bash\nnpm install update-check\n```\n\nNext, initialize it.\n\nIf there's a new update available, the package will return the content of latest version's `package.json` file:\n\n```js\nconst pkg = require('./package');\nconst checkForUpdate = require('update-check');\n\nlet update = null;\n\ntry {\n\tupdate = await checkForUpdate(pkg);\n} catch (err) {\n\tconsole.error(`Failed to check for updates: ${err}`);\n}\n\nif (update) {\n\tconsole.log(`The latest version is ${update.latest}. Please update!`);\n}\n```\n\nThat's it! You're done.\n\n### Configuration\n\nIf you want, you can also pass options to customize the package's behavior:\n\n```js\nconst pkg = require('./package');\nconst checkForUpdate = require('update-check');\n\nlet update = null;\n\ntry {\n\tupdate = await checkForUpdate(pkg, {\n\t\tinterval: 3600000,  // For how long to cache latest version (default: 1 day)\n\t\tdistTag: 'canary'   // A npm distribution tag for comparision (default: 'latest')\n\t});\n} catch (err) {\n\tconsole.error(`Failed to check for updates: ${err}`);\n}\n\nif (update) {\n\tconsole.log(`The latest version is ${update.latest}. Please update!`);\n}\n```\n\n## Contributing\n\n1. [Fork](https://help.github.com/articles/fork-a-repo/) this repository to your own GitHub account and then [clone](https://help.github.com/articles/cloning-a-repository/) it to your local device\n2. Link the package to the global module directory: `npm link`\n3. Within the module you want to test your local development instance of the package, just link it: `npm link update-check`. Instead of the default one from npm, node will now use your clone.\n\n## Author\n\nLeo Lamprecht ([@notquiteleo](https://twitter.com/notquiteleo)) - [ZEIT](https://zeit.co)\n\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 ZEIT, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/update-check/-/update-check-1.5.2.tgz#2fe09f725c543440b3d7dabe8971f2d5caaedc28",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/update-check/-/update-check-1.5.2.tgz",
    "hash": "2fe09f725c543440b3d7dabe8971f2d5caaedc28",
    "integrity": "sha512-1TrmYLuLj/5ZovwUS7fFd1jMH3NnFDN1y1A8dboedIDt7zs/zJMo6TwwlhYKkSeEwzleeiSBV5/3c9ufAQWDaQ==",
    "registry": "npm",
    "packageName": "update-check",
    "cacheIntegrity": "sha512-1TrmYLuLj/5ZovwUS7fFd1jMH3NnFDN1y1A8dboedIDt7zs/zJMo6TwwlhYKkSeEwzleeiSBV5/3c9ufAQWDaQ== sha1-L+CfclxUNECz19q+iXHy1cqu3Cg="
  },
  "registry": "npm",
  "hash": "2fe09f725c543440b3d7dabe8971f2d5caaedc28"
}