{
  "manifest": {
    "name": "@casl/ability",
    "version": "4.1.6",
    "description": "CASL is an isomorphic authorization JavaScript library which restricts what resources a given user is allowed to access",
    "funding": "https://github.com/stalniy/casl/blob/master/BACKERS.md",
    "main": "dist/umd/index.js",
    "module": "dist/es5m/index.js",
    "es2015": "dist/es6/index.js",
    "typings": "./index.d.ts",
    "sideEffects": false,
    "repository": {
      "type": "git",
      "url": "https://github.com/stalniy/casl.git"
    },
    "homepage": "https://stalniy.github.io/casl/",
    "publishConfig": {
      "access": "public"
    },
    "scripts": {
      "build.core": "rollup -c ../../rollup.config.js -n casl -g sift:sift",
      "build.extra": "rollup -c ../../rollup.config.js -i src/extra.ts -n casl.extra",
      "build.types": "rm -rf dist/types/* && tsc && cp index.metadata.json dist/types",
      "build": "npm run build.types && npm run build.core && npm run build.extra",
      "lint": "eslint --ext .js,.ts src/ spec/",
      "test": "NODE_ENV=test jest --config ../../tools/jest.config.js --env node",
      "prerelease": "npm run lint && npm test && NODE_ENV=production npm run build",
      "release": "semantic-release -e ../../tools/semantic-release"
    },
    "keywords": [
      "permissions",
      "authorization",
      "access control",
      "security",
      "acl",
      "abac",
      "rbac",
      "ibac",
      "cancan"
    ],
    "author": {
      "name": "Sergii Stotskyi",
      "email": "sergiy.stotskiy@freaksidea.com"
    },
    "license": "MIT",
    "engines": {
      "npm": "^6.0.0"
    },
    "dependencies": {
      "sift": "^13.0.0"
    },
    "devDependencies": {
      "@babel/core": "^7.8.4",
      "@babel/plugin-proposal-class-properties": "^7.8.3",
      "@babel/plugin-proposal-object-rest-spread": "^7.10.0",
      "@babel/plugin-transform-typescript": "^7.10.0",
      "@babel/preset-env": "^7.8.4",
      "@rollup/plugin-babel": "^5.0.2",
      "@rollup/plugin-node-resolve": "^9.0.0",
      "@semantic-release/changelog": "^5.0.1",
      "@semantic-release/git": "^9.0.0",
      "@semantic-release/github": "^7.0.7",
      "@semantic-release/npm": "^7.0.5",
      "@types/node": "^14.0.5",
      "@typescript-eslint/eslint-plugin": "3.10.1",
      "babel-jest": "^26.0.0",
      "chai": "^4.1.0",
      "chai-spies": "^1.0.0",
      "eslint": "^7.1.0",
      "eslint-config-airbnb-base": "^14.1.0",
      "eslint-config-airbnb-typescript": "^9.0.0",
      "eslint-plugin-import": "^2.20.2",
      "jest": "^26.0.0",
      "rollup": "^2.10.9",
      "rollup-plugin-sourcemaps": "^0.6.2",
      "rollup-plugin-terser": "^7.0.0",
      "semantic-release": "17.1.1",
      "typescript": "~3.8.0"
    },
    "files": [
      "dist",
      "*.d.ts",
      "extra"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@casl-ability-4.1.6-89f263903adfc9316cedff329ad615564662448a-integrity/node_modules/@casl/ability/package.json",
    "readmeFilename": "README.md",
    "readme": "# [CASL Ability](https://stalniy.github.io/casl/) [![@casl/ability NPM version](https://badge.fury.io/js/%40casl%2Fability.svg)](https://badge.fury.io/js/%40casl%2Fability)  [![](https://img.shields.io/npm/dm/%40casl%2Fability.svg)](https://www.npmjs.com/package/%40casl%2Fability) [![CASL Documentation](https://img.shields.io/badge/documentation-available-brightgreen.svg)](https://stalniy.github.io/casl/) [![CASL Join the chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/stalniy-casl/casl)\n\nThis package is the core of CASL. It includes logic responsible for [checking and defining][intro] permissions.\n\n## Installation\n\n```sh\nnpm install @casl/ability\n```\n\n## Documentation\n\nThis README file contains only basic information about the package. If you need an in depth introduction, please visit [CASL's documentation](https://casl.js.org/).\n\n## Getting Started\n\n**Note**: the best way to get started is to read [Guide][intro] in the official documentation. In this README file, you will find just basic information.\n\nCASL operates on the abilities level, that is what a user can actually do in the application. An ability itself depends on the 4 parameters (last 3 are optional):\n\n1. User Action\\\n   Describes what user can actually do in the app. User action is a word (usually a verb) which depends on the business logic (e.g., `prolong`, `read`). Very often it will be a list of words from CRUD - `create`, `read`, `update` and `delete`.\n2. Subject\\\n   The subject or subject type which you want to check user action on. Usually this is a business (or domain) entity name (e.g., `Subscription`, `BlogPost`, `User`).\n3. Conditions\\\n   An object or function which restricts user action only to matched subjects. This is useful when you need to give a permission on resources created by a user (e.g., to allow user to update and delete own `BlogPost`)\n4. Fields\\\n   Can be used to restrict user action only to matched subject's fields (e.g., to allow moderator to update `hidden` field of `BlogPost` but not update `description` or `title`)\n\nUsing CASL you can describe abilities using regular and inverted rules. Let's see how\n\n**Note**: all the examples below are written in ES6 using ES modules but CASL also has a sophisticated support for TypeScript, read [CASL TypeScript support][typescript-support] for details.\n\n### 1. Define Abilities\n\nLets define `Ability` for a blog website where visitors:\n* can read blog posts\n* can manage (i.e., do anything) own posts\n* cannot delete a post if it was created more than a day ago\n\n```js\nimport { AbilityBuilder, Ability } from '@casl/ability'\nimport { User } from '../models'; // application specific interfaces\n\n/**\n * @param user contains details about logged in user: its id, name, email, etc\n */\nfunction defineAbilitiesFor(user) {\n  const { can, cannot, rules } = new AbilityBuilder();\n\n  // can read blog posts\n  can('read', 'BlogPost');\n  // can manage (i.e., do anything) own posts\n  can('manage', 'BlogPost', { author: user.id });\n  // cannot delete a post if it was created more than a day ago\n  cannot('delete', 'BlogPost', {\n    createdAt: { $lt: Date.now() - 24 * 60 * 60 * 1000 }\n  });\n\n  return new Ability(rules);\n});\n```\n\nDo you see how easily business requirements were translated into CASL's rules?\n\n**Note**: you can use class instead of string as a subject type (e.g., `can('read', BlogPost)`)\n\nAnd yes, `Ability` class allow you to use some MongoDB operators to define conditions. Don't worry if you don't know MongoDB, it's not required and explained in details in [Defining Abilities][define-abilities]\n\n### 2. Check Abilities\n\nLater on you can check abilities by using `can` and `cannot` methods of `Ability` instance.\n\n```js\nimport { BlogPost, ForbiddenError } from '../models';\n\nconst user = getLoggedInUser(); // app specific function\nconst ability = defineAbilitiesFor(user)\n\n// true if ability allows to read at least one Post\nability.can('read', 'BlogPost');\n\n// true if there is no ability to read this particular blog post\nconst post = new BlogPost({ title: 'What is CASL?' });\nability.cannot('read', post);\n\n// you can even throw an error if there is a missed ability\nForbiddenError.from(ability).throwUnlessCan('read', post);\n```\n\n**Note**: you can use class instead of string as a subject type (e.g., `ability.can('read', BlogPost)`)\n\nOf course, you are not restricted to use only class instances in order to check permissions on objects. See [Introduction][intro] for the detailed explanation.\n\n### 3. Database integration\n\nCASL has a complementary package [@casl/mongoose] which provides easy integration with MongoDB and [mongoose].\n\n```js\nimport { AbilityBuilder } from '@casl/ability';\nimport { accessibleRecordsPlugin } from '@casl/mongoose';\nimport mongoose from 'mongoose';\n\nmongoose.plugin(accessibleRecordsPlugin);\n\nconst user = getUserLoggedInUser(); // app specific function\n\nconst ability = defineAbilitiesFor(user);\nconst BlogPost = mongoose.model('BlogPost', mongoose.Schema({\n  title: String,\n  author: mongoose.Types.ObjectId,\n  content: String,\n  createdAt: Date,\n  hidden: { type: Boolean, default: false }\n}))\n\n// returns mongoose Query, so you can chain it with other conditions\nconst posts = await Post.accessibleBy(ability).where({ hidden: false });\n\n// you can also call it on existing query to enforce permissions\nconst hiddenPosts = await Post.find({ hidden: true }).accessibleBy(ability);\n\n// you can even pass the action as a 2nd parameter. By default action is \"read\"\nconst updatablePosts = await Post.accessibleBy(ability, 'update');\n```\n\nSee [Database integration][database-integration] for details.\n\n### 4. Advanced usage\n\n**CASL is incrementally adoptable**, that means you can start your project with simple claim (or action) based authorization and evolve it later, when your app functionality evolves.\n\n**CASL is composable**, that means you can implement alternative conditions matching (e.g., based on [joi], [ajv] or pure functions) and field matching (e.g., to support alternative syntax in fields like `addresses.*.street` or `addresses[0].street`) logic.\n\nSee [Advanced usage][advanced-usage] for details.\n\n[joi]: https://www.npmjs.com/package/@hapi/joi\n[ajv]: https://www.npmjs.com/package/ajv\n\n### 5. Performance and computational complexity\n\nCASL checks are quite fast, thanks to underlying rule index structure. The estimated complexity of different operations can be found below:\n\n| Operation                        | Complexity | Notes         |\n|----------------------------------|------------|---------------|\n| `Ability` creation time          | O(n)       | n - amount of rules |\n| Check by action and subject type (e.g., `ability.can('read', 'Todo')`) | O(1) | |\n| Check by action and subject object (e.g., `ability.can('read', todo)`) | O(m + k) + O(p) | m - amount of rules for the same pair of action and subject; k - amount of operators in conditions; O(p) - complexity of used operators (e.g., `$in` implementation is more complex than `$lt`) |\n\n## Want to help?\n\nWant to file a bug, contribute some code, or improve documentation? Excellent! Read up on guidelines for [contributing]\n\n## License\n\n[MIT License](http://www.opensource.org/licenses/MIT)\n\n[contributing]: https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md\n[define-abilities]: https://stalniy.github.io/casl/en/guide/define-rules\n[intro]: https://stalniy.github.io/casl/en/guide/intro\n[database-integration]: https://stalniy.github.io/casl/en/package/casl-mongoose\n[advanced-usage]: https://stalniy.github.io/casl/en/advanced/customize-ability\n[typescript-support]: https://stalniy.github.io/casl/en/advanced/typescript\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017-2018 Sergii Stotskyi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@casl/ability/-/ability-4.1.6.tgz#89f263903adfc9316cedff329ad615564662448a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@casl/ability/-/ability-4.1.6.tgz",
    "hash": "89f263903adfc9316cedff329ad615564662448a",
    "integrity": "sha512-ZI30fRacHKCCrWJn1pmxx/+IKUkoycVNz+Mge9EeIH+esDT7nydgWbitVPnlBAbxQXz5eybPAvfPSg3WOa2izw==",
    "registry": "npm",
    "packageName": "@casl/ability",
    "cacheIntegrity": "sha512-ZI30fRacHKCCrWJn1pmxx/+IKUkoycVNz+Mge9EeIH+esDT7nydgWbitVPnlBAbxQXz5eybPAvfPSg3WOa2izw== sha1-ifJjkDrfyTFs7f8ymtYVVkZiRIo="
  },
  "registry": "npm",
  "hash": "89f263903adfc9316cedff329ad615564662448a"
}