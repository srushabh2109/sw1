{
  "manifest": {
    "name": "libbase64",
    "version": "0.1.0",
    "description": "Encode and decode base64 encoded strings",
    "main": "lib/libbase64.js",
    "scripts": {
      "test": "grunt"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/andris9/libbase64.git"
    },
    "keywords": [
      "base64",
      "mime"
    ],
    "author": {
      "name": "Andris Reinman"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/andris9/libbase64/issues"
    },
    "homepage": "https://github.com/andris9/libbase64",
    "devDependencies": {
      "chai": "~1.8.1",
      "grunt": "~0.4.1",
      "grunt-contrib-jshint": "~0.8.0",
      "grunt-mocha-test": "~0.10.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-libbase64-0.1.0-62351a839563ac5ff5bd26f12f60e9830bb751e6-integrity/node_modules/libbase64/package.json",
    "readmeFilename": "README.md",
    "readme": "# libbase64\n\nEncode and decode base64 strings.\n\n## Usage\n\nInstall with npm\n\n    npm install libbase64\n\nRequire in your script\n\n```javascript\nvar libbase64 = require('libbase64');\n```\n\n### Encode values\n\nEncode Buffer objects or unicode strings with\n\n    libbase64.encode(val) → String\n\nWhere\n\n  * **val** is a Buffer or an unicode string\n\n**Example**\n\n```javascript\nlibbase64.encode('jõgeva');\n// asO1Z2V2YQ==\n```\n\n### Wrap encoded values\n\nTo enforce soft line breaks on lines longer than selected amount of characters, use `wrap`\n\n    libbase64.wrap(str[, lineLength]) → String\n\nWhere\n\n  * **str** is a base64 encoded string\n  * **lineLength** (defaults to 76) is the maximum allowed line length\n\n**Example**\n\n```javascript\nlibbase64.wrap('asO1Z2V2asO1Z2V2asO1Z2V2YQ==', 10)\n// asO1Z2V2as\\r\\n\n// O1Z2V2asO1\\r\\n\n// Z2V2YQ==\n```\n\n### Transform Streams\n\n`libbase64` makes it possible to encode and decode streams with `libbase64.Encoder` and `libbase64.Decoder` constructors.\n\n### Encoder Stream\n\nCreate new Encoder Stream with\n\n    var encoder = new libbase64.Encoder([options])\n\nWhere\n\n  * **options** is the optional stream options object with an additional option `lineLength` if you want to use any other line length than the default 76 characters (or set to `false` to turn the soft wrapping off completely)\n\n**Example**\n\nThe following example script reads in a file, encodes it to base64 and saves the output to a file.\n\n```javascript\nvar libbase64 = require('libbase64');\nvar fs = require('fs');\nvar source = fs.createReadStream('source.txt');\nvar encoded = fs.createReadStream('encoded.txt');\nvar encoder = new libbase64.Encoder();\n\nsource.pipe(encoder).pipe(encoded);\n```\n\n### Decoder Stream\n\nCreate new Decoder Stream with\n\n    var decoder = new libbase64.Decoder([options])\n\nWhere\n\n  * **options** is the optional stream options object\n\n**Example**\n\nThe following example script reads in a file in base64 encoding, decodes it and saves the output to a file.\n\n```javascript\nvar libbase64 = require('libbase64');\nvar fs = require('fs');\nvar encoded = fs.createReadStream('encoded.txt');\nvar dest = fs.createReadStream('dest.txt');\nvar decoder = new libbase64.Decoder();\n\nencoded.pipe(decoder).pipe(dest);\n```\n\n## License\n\n**MIT**",
    "licenseText": "Copyright (c) 2014 Andris Reinman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/libbase64/-/libbase64-0.1.0.tgz#62351a839563ac5ff5bd26f12f60e9830bb751e6",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/libbase64/-/libbase64-0.1.0.tgz",
    "hash": "62351a839563ac5ff5bd26f12f60e9830bb751e6",
    "integrity": "sha1-YjUag5VjrF/1vSbxL2Dpgwu3UeY=",
    "registry": "npm",
    "packageName": "libbase64",
    "cacheIntegrity": "sha512-B91jifmFw1DKEqEWstSpg1PbtUbBzR4yQAPT86kCQXBtud1AJVA+Z6RSklSrqmKe4q2eiEufgnhqJKPgozzfIQ== sha1-YjUag5VjrF/1vSbxL2Dpgwu3UeY="
  },
  "registry": "npm",
  "hash": "62351a839563ac5ff5bd26f12f60e9830bb751e6"
}