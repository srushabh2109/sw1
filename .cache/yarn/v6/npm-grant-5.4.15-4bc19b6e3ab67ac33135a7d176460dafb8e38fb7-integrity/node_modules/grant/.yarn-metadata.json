{
  "manifest": {
    "name": "grant",
    "version": "5.4.15",
    "description": "OAuth Proxy",
    "keywords": [
      "oauth",
      "oauth2",
      "openid",
      "openid-connect",
      "authentication",
      "authorization",
      "proxy",
      "middleware",
      "lambda",
      "express",
      "koa",
      "hapi",
      "fastify",
      "aws",
      "azure",
      "google-cloud",
      "vercel"
    ],
    "license": "MIT",
    "homepage": "https://github.com/simov/grant",
    "author": {
      "name": "Simeon Velichkov",
      "email": "simeonvelichkov@gmail.com",
      "url": "https://simov.github.io"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/simov/grant.git"
    },
    "dependencies": {
      "qs": "^6.10.1",
      "request-compose": "^2.1.4",
      "request-oauth": "^1.0.1"
    },
    "optionalDependencies": {
      "cookie": "^0.4.1",
      "cookie-signature": "^1.1.0",
      "jwk-to-pem": "^2.0.5",
      "jws": "^4.0.0"
    },
    "devDependencies": {
      "@curveball/bodyparser": "0.4.6",
      "@curveball/core": "0.14.2",
      "@curveball/router": "0.2.4",
      "@curveball/session": "0.5.0",
      "@hapi/hapi": "^20.1.4",
      "@hapi/yar": "^10.1.1",
      "body-parser": "^1.19.0",
      "cookie-session": "^1.4.0",
      "express": "^4.17.1",
      "express-session": "^1.17.2",
      "fastify": "^3.18.0",
      "fastify-cookie": "^5.3.1",
      "fastify-formbody": "^5.0.0",
      "fastify-session": "^5.2.1",
      "grant-profile": "^1.0.2",
      "koa": "^2.13.1",
      "koa-bodyparser": "^4.3.0",
      "koa-mount": "^4.0.0",
      "koa-qs": "^3.0.0",
      "koa-session": "^6.2.0",
      "mocha": "^8.4.0",
      "nyc": "^15.1.0",
      "request-cookie": "^1.0.0",
      "request-logs": "^2.1.4"
    },
    "main": "./grant.js",
    "files": [
      "config/",
      "lib/",
      "grant.js",
      "grant.d.ts",
      "CHANGELOG.md",
      "LICENSE",
      "README.md",
      "package.json"
    ],
    "types": "grant.d.ts",
    "scripts": {
      "test": "npm run test:ci",
      "test:ci": "npx mocha --recursive",
      "test:cov": "npx nyc --reporter=lcov --reporter=text-summary mocha -- --recursive"
    },
    "engines": {
      "node": ">=12.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-grant-5.4.15-4bc19b6e3ab67ac33135a7d176460dafb8e38fb7-integrity/node_modules/grant/package.json",
    "readmeFilename": "README.md",
    "readme": "\n# Grant\n\n[![npm-version]][npm] [![travis-ci]][travis] [![coveralls-status]][coveralls] [![snyk-vulnerabilities]][snyk]\n\n> _OAuth Proxy_\n\n## 200+ Supported Providers / [OAuth Playground][grant-oauth]\n\n[`23andme`](https://api.23andme.com) | [`500px`](https://github.com/500px/api-documentation) | [`acton`](https://developer.act-on.com) | [`acuityscheduling`](https://developers.acuityscheduling.com) | [`aha`](https://www.aha.io/api) | [`alchemer`](https://apihelp.alchemer.com) | [`amazon`](https://login.amazon.com/documentation) | [`angellist`](https://angel.co/api) | [`apple`](https://developer.apple.com) | [`arcgis`](https://developers.arcgis.com) | [`asana`](https://asana.com/developers) | [`assembla`](https://api-docs.assembla.cc) | [`atlassian`](https://developer.atlassian.com) | [`auth0`](https://auth0.com/docs) | [`authentiq`](https://www.authentiq.com/developers) | [`autodesk`](https://forge.autodesk.com) | [`aweber`](https://api.aweber.com) | [`axosoft`](https://developer.axosoft.com) | [`baidu`](https://developer.baidu.com) | [`basecamp`](https://github.com/basecamp/bc3-api) | [`battlenet`](https://develop.battle.net) | [`beatport`](https://oauth-api.beatport.com) | [`bitbucket`](https://developer.atlassian.com/bitbucket/api/2/reference/) | [`bitly`](https://dev.bitly.com) | [`box`](https://developer.box.com) | [`buffer`](https://buffer.com/developers) | [`campaignmonitor`](https://www.campaignmonitor.com/api) | [`cas`](https://apereo.github.io/cas/) | [`cheddar`](https://cheddarapp.com/developer) | [`clio`](https://app.clio.com/api/v4/documentation) | [`cognito`](https://aws.amazon.com/cognito/) | [`coinbase`](https://developers.coinbase.com) | [`concur`](https://developer.concur.com) | [`constantcontact`](https://developer.constantcontact.com) | [`coursera`](https://building.coursera.org) | [`dailymotion`](https://developer.dailymotion.com) | [`deezer`](https://developers.deezer.com) | [`delivery`](https://developers.delivery.com) | [`deputy`](https://www.deputy.com/api-doc/) | [`deviantart`](https://www.deviantart.com/developers/) | [`digitalocean`](https://developers.digitalocean.com) | [`discogs`](https://www.discogs.com/developers/) | [`discord`](https://discord.com/developers/docs/intro) | [`disqus`](https://disqus.com/api/docs) | [`docusign`](https://developers.docusign.com) | [`dribbble`](https://developer.dribbble.com) | [`dropbox`](https://www.dropbox.com/developers) | [`ebay`](https://developer.ebay.com) | [`echosign`](https://secure.echosign.com/public/docs/restapi/v3) | [`ecwid`](https://developers.ecwid.com) | [`edmodo`](https://partnerships.edmodo.com) | [`egnyte`](https://developers.egnyte.com) | [`etsy`](https://www.etsy.com/developers) | [`eventbrite`](https://www.eventbrite.com/platform) | [`evernote`](https://dev.evernote.com) | [`eyeem`](https://github.com/eyeem/Public-API) | [`facebook`](https://developers.facebook.com) | [`familysearch`](https://www.familysearch.org/developers/) | [`feedly`](https://developer.feedly.com) | [`figma`](https://www.figma.com/developers) | [`fitbit`](https://dev.fitbit.com) | [`flattr`](http://developers.flattr.net) | [`flickr`](https://www.flickr.com/services) | [`flowdock`](https://www.flowdock.com/api) | [`formstack`](https://developers.formstack.com) | [`foursquare`](https://developer.foursquare.com) | [`freeagent`](https://dev.freeagent.com) | [`freelancer`](https://developers.freelancer.com) | [`freshbooks`](https://www.freshbooks.com/developers) | [`fusionauth`](https://fusionauth.io/docs/) | [`garmin`](https://developer.garmin.com) | [`geeklist`](http://hackers.geekli.st) | [`genius`](https://docs.genius.com) | [`getbase`](https://developers.getbase.com) | [`getpocket`](https://getpocket.com/developer) | [`gitbook`](https://developer.gitbook.com) | [`github`](https://docs.github.com/developers) | [`gitlab`](https://docs.gitlab.com/ce/api/) | [`gitter`](https://developer.gitter.im) | [`goodreads`](https://www.goodreads.com/api) | [`google`](https://developers.google.com) | [`groove`](https://www.groovehq.com/docs) | [`gumroad`](https://gumroad.com/api) | [`harvest`](https://help.getharvest.com/api-v2/) | [`hellosign`](https://www.hellosign.com/api) | [`heroku`](https://devcenter.heroku.com/categories/platform-api) | [`homeaway`](https://www.homeaway.com/platform) | [`hootsuite`](https://developer.hootsuite.com) | [`huddle`](https://www.huddle.com/huddle-api/) | [`ibm`](https://ibm.biz/provisioner) | [`iconfinder`](https://developer.iconfinder.com) | [`idme`](https://developer.id.me) | [`idonethis`](https://i-done-this.readme.io/docs) | [`imgur`](https://apidocs.imgur.com) | [`infusionsoft`](https://developer.infusionsoft.com) | [`instagram`](https://instagram.com/developer) | [`intuit`](https://developer.intuit.com) | [`jamendo`](https://devportal.jamendo.com/) | [`jumplead`](https://developer.jumplead.com) | [`kakao`](https://developers.kakao.com) | [`keycloak`](https://www.keycloak.org) | [`line`](https://developers.line.biz) | [`linkedin`](https://www.linkedin.com/developers) | [`live`](https://docs.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/msa-oauth?view=odsp-graph-online) | [`livechat`](https://developers.livechatinc.com) | [`logingov`](https://developers.login.gov) | [`lyft`](https://developer.lyft.com) | [`mailchimp`](https://developer.mailchimp.com) | [`mailup`](http://help.mailup.com/display/mailupapi/REST+API) | [`mailxpert`](https://dev.mailxpert.ch) | [`mapmyfitness`](https://developer.underarmour.com) | [`mastodon`](https://docs.joinmastodon.org/) | [`medium`](https://developers.medium.com) | [`meetup`](https://www.meetup.com/meetup_api/) | [`mendeley`](https://dev.mendeley.com) | [`mention`](https://dev.mention.com) | [`microsoft`](https://developer.microsoft.com/en-us/graph) | [`mixcloud`](https://www.mixcloud.com/developers) | [`moxtra`](https://developer.moxtra.com) | [`myob`](https://developer.myob.com) | [`naver`](https://developers.naver.com) | [`nest`](https://developers.nest.com) | [`netlify`](https://docs.netlify.com) | [`nokotime`](https://developer.nokotime.com) | [`notion`](https://developers.notion.com) | [`nylas`](https://docs.nylas.com) | [`okta`](https://developer.okta.com/) | [`onelogin`](https://developers.onelogin.com) | [`openstreetmap`](https://wiki.openstreetmap.org/wiki/API_v0.6) | [`optimizely`](https://developers.optimizely.com) | [`patreon`](https://docs.patreon.com) | [`paypal`](https://developer.paypal.com) | [`phantauth`](https://www.phantauth.net) | [`pinterest`](https://developers.pinterest.com) | [`plurk`](https://www.plurk.com/API) | [`podio`](https://developers.podio.com) | [`producthunt`](https://api.producthunt.com/v2/docs) | [`projectplace`](https://service.projectplace.com/apidocs) | [`pushbullet`](https://docs.pushbullet.com) | [`qq`](https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0) | [`ravelry`](https://www.ravelry.com/api) | [`redbooth`](https://redbooth.com/api) | [`reddit`](https://www.reddit.com/dev/api) | [`runkeeper`](https://runkeeper.com/developer/healthgraph/) | [`salesforce`](https://developer.salesforce.com) | [`sellsy`](https://api.sellsy.com) | [`shoeboxed`](https://github.com/Shoeboxed/api) | [`shopify`](https://developers.shopify.com) | [`skyrock`](https://www.skyrock.com/developer) | [`slack`](https://api.slack.com) | [`slice`](https://developer.slice.com) | [`smartsheet`](https://smartsheet-platform.github.io/api-docs) | [`smugmug`](https://api.smugmug.com) | [`snapchat`](https://kit.snapchat.com) | [`snowflake`](https://docs.snowflake.com) | [`socialpilot`](https://developer.socialpilot.co) | [`socrata`](https://dev.socrata.com) | [`soundcloud`](https://developers.soundcloud.com) | [`spotify`](https://developer.spotify.com) | [`square`](https://squareup.com/developers) | [`stackexchange`](https://api.stackexchange.com) | [`stocktwits`](https://api.stocktwits.com/developers) | [`stormz`](https://developer.stormz.me) | [`storyblok`](https://www.storyblok.com/docs/guide/introduction) | [`strava`](https://developers.strava.com) | [`stripe`](https://stripe.com/docs) | [`surveymonkey`](https://developer.surveymonkey.com) | [`thingiverse`](https://www.thingiverse.com/developers) | [`ticketbud`](https://api.ticketbud.com) | [`timelyapp`](https://dev.timelyapp.com) | [`todoist`](https://developer.todoist.com) | [`trakt`](https://trakt.docs.apiary.io) | [`traxo`](https://developer.traxo.com) | [`trello`](https://developers.trello.com) | [`tripit`](https://www.tripit.com/developer) | [`tumblr`](https://www.tumblr.com/docs/en/api/v2) | [`twitch`](https://dev.twitch.tv) | [`twitter`](https://developer.twitter.com) | [`typeform`](https://developer.typeform.com) | [`uber`](https://developer.uber.com) | [`underarmour`](https://developer.underarmour.com) | [`unsplash`](https://unsplash.com/documentation) | [`upwork`](https://developers.upwork.com) | [`uservoice`](https://developer.uservoice.com) | [`vend`](https://developers.vendhq.com) | [`venmo`](https://developers.braintreepayments.com/guides/venmo/overview/) | [`vercel`](https://vercel.com/docs) | [`verticalresponse`](http://developers.verticalresponse.com) | [`viadeo`](https://partners.viadeo.com) | [`vimeo`](https://developer.vimeo.com) | [`visualstudio`](https://docs.microsoft.com/en-us/vsts/integrate/get-started/authentication/oauth?view=vsts) | [`vk`](https://vk.com/dev) | [`wechat`](https://mp.weixin.qq.com) | [`weekdone`](https://weekdone.com/developer) | [`weibo`](https://open.weibo.com) | [`withings`](http://developer.withings.com) | [`wordpress`](https://developer.wordpress.com) | [`wrike`](https://developers.wrike.com) | [`xero`](https://developer.xero.com) | [`xing`](https://dev.xing.com) | [`yahoo`](https://developer.yahoo.com) | [`yammer`](https://developer.yammer.com/docs) | [`yandex`](https://tech.yandex.com) | [`zendesk`](https://developer.zendesk.com) | [`zoom`](https://marketplace.zoom.us/docs)\n\n\n## Table of Contents\n\n### [Migration Guide: from v4 to v5][migration]\n\n- **[Providers](#grant)**\n- **Handlers**\n  - [Express](#handlers) / [Koa](#handlers) / [Hapi](#handlers) / [Fastify](#handlers)\n  - [AWS Lambda](#handlers) / [Azure Function](#handlers) / [Google Cloud Function](#handlers) / [Vercel](#handlers)\n- **Configuration**\n  - [Basics](#configuration-basics) / [Description](#configuration-description) / [Values](#configuration-values) / [Scopes](#configuration-scopes)\n- **Connect**\n  - [Origin](#connect-origin) / [Prefix](#connect-prefix) / [Redirect URI](#connect-redirect-uri) / [Custom Parameters](#connect-custom-parameters) / [OpenID Connect](#connect-openid-connect) / [PKCE](#connect-pkce) / [Static Overrides](#connect-static-overrides)\n- **Callback**\n  - [Data](#callback-data) / [Transport](#callback-transport) / [Response](#callback-response) / [Session](#callback-session)\n- **Dynamic Configuration**\n  - [Instance](#dynamic-instance) / [State](#dynamic-state) / [HTTP](#dynamic-http) / [OAuth Proxy](#dynamic-oauth-proxy)\n- **Misc**\n  - [Configuration](#misc-redirect-uri) / [Handlers](#misc-handler-constructors) / [Request](#misc-request) / [Types](#misc-es-modules-and-typescript) / [OAuth Quirks](#misc-oauth-quirks)\n- **Examples**\n  - [express][examples] / [koa][examples] / [hapi][examples] / [fastify][examples] / [aws][grant-aws] / [azure][grant-azure] / [gcloud][grant-gcloud] / [vercel][grant-vercel]\n- **[Changelog][changelog]**\n\n----\n\n# Handlers\n\n\n### HTTP Frameworks\n\n<details><summary>Express</summary>\n\n```js\nvar express = require('express')\nvar session = require('express-session')\nvar grant = require('grant').express()\n\nvar app = express()\n// REQUIRED: any session store - see /examples/handler-express\napp.use(session({secret: 'grant'}))\n// mount grant\napp.use(grant({/*configuration - see below*/}))\n```\n</details>\n\n<details><summary>Koa</summary>\n\n```js\nvar Koa = require('koa')\nvar session = require('koa-session')\nvar grant = require('grant').koa()\n\nvar app = new Koa()\n// REQUIRED: any session store - see /examples/handler-koa\napp.keys = ['grant']\napp.use(session(app))\n// mount grant\napp.use(grant({/*configuration - see below*/}))\n```\n</details>\n\n<details><summary>Hapi</summary>\n\n```js\nvar Hapi = require('hapi')\nvar yar = require('yar')\nvar grant = require('grant').hapi()\n\nvar server = new Hapi.Server()\nserver.register([\n  // REQUIRED: any session store - see /examples/handler-hapi\n  {plugin: yar, options: {cookieOptions: {password: 'grant', isSecure: false}}},\n  // mount grant\n  {plugin: grant({/*configuration - see below*/})}\n])\n```\n</details>\n\n<details><summary>Fastify</summary>\n\n```js\nvar fastify = require('fastify')\nvar cookie = require('fastify-cookie')\nvar session = require('fastify-session')\nvar grant = require('grant').fastify()\n\nfastify()\n  .register(cookie)\n  .register(session, {secret: 'grant', cookie: {secure: false}})\n  .register(grant({/*configuration - see below*/}))\n```\n</details>\n\n### Serverless Functions\n\n<details><summary>AWS Lambda</summary>\n\n```js\nvar grant = require('grant').aws({\n  config: {/*configuration - see below*/}, session: {secret: 'grant'}\n})\n\nexports.handler = async (event) => {\n  var {redirect, response} = await grant(event)\n  return redirect || {\n    statusCode: 200,\n    headers: {'content-type': 'application/json'},\n    body: JSON.stringify(response)\n  }\n}\n```\n</details>\n\n<details><summary>Azure Function</summary>\n\n```js\nvar grant = require('grant').azure({\n  config: {/*configuration - see below*/}, session: {secret: 'grant'}\n})\n\nmodule.exports = async (context, req) => {\n  var {redirect, response} = await grant(req)\n  return redirect || {\n    status: 200,\n    headers: {'content-type': 'application/json'},\n    body: JSON.stringify(response)\n  }\n}\n```\n</details>\n\n<details><summary>Google Cloud Function</summary>\n\n```js\nvar grant = require('grant').gcloud({\n  config: {/*configuration - see below*/}, session: {secret: 'grant'}\n})\n\nexports.handler = async (req, res) => {\n  var {response} = await grant(req, res)\n  if (response) {\n    res.statusCode = 200\n    res.setHeader('content-type', 'application/json')\n    res.end(JSON.stringify(response))\n  }\n}\n```\n</details>\n\n<details><summary>Vercel</summary>\n\n```js\nvar grant = require('grant').vercel({\n  config: {/*configuration - see below*/}, session: {secret: 'grant'}\n})\n\nmodule.exports = async (req, res) => {\n  var {response} = await grant(req, res)\n  if (response) {\n    res.statusCode = 200\n    res.setHeader('content-type', 'application/json')\n    res.end(JSON.stringify(response))\n  }\n}\n```\n</details>\n\n### Examples\n\n> __[express][examples] / [koa][examples] / [hapi][examples] / [fastify][examples] / [aws][grant-aws] / [azure][grant-azure] / [gcloud][grant-gcloud] / [vercel][grant-vercel]__\n\n> _[ES Modules and TypeScript](#misc-es-modules-and-typescript)_\n\n---\n\n# Configuration\n\n\n## Configuration: Basics\n\n```json\n{\n  \"defaults\": {\n    \"origin\": \"http://localhost:3000\",\n    \"transport\": \"session\",\n    \"state\": true\n  },\n  \"google\": {\n    \"key\": \"...\",\n    \"secret\": \"...\",\n    \"scope\": [\"openid\"],\n    \"nonce\": true,\n    \"custom_params\": {\"access_type\": \"offline\"},\n    \"callback\": \"/hello\"\n  },\n  \"twitter\": {\n    \"key\": \"...\",\n    \"secret\": \"...\",\n    \"callback\": \"/hi\"\n  }\n}\n```\n\n- **defaults** - default configuration for all providers\n  - **origin** - where your client server can be reached `http://localhost:3000` | `https://site.com` ...\n  - **transport** - a [transport](#callback-transport) used to deliver the [response data](#callback-response) in your `callback` route\n  - **state** - generate random state string\n- **provider** - any [supported provider](#grant) `google` | `twitter` ...\n  - **key** - `consumer_key` or `client_id` of your OAuth app\n  - **secret** - `consumer_secret` or `client_secret` of your OAuth app\n  - **scope** - array of OAuth scopes to request\n  - **nonce** - generate random nonce string ([OpenID Connect](#connect-openid-connect) only)\n  - **custom_params** - custom [authorization parameters](#connect-custom-parameters)\n  - **callback** - relative route or absolute URL to receive the response data `/hello` | `https://site.com/hey` ...\n\n\n## Configuration: Description\n\nKey | Location | Description\n:-| :-: | :-\n***Authorization Server*** |\n**`request_url`** | [oauth.json] | OAuth 1.0a only, first step\n**`authorize_url`** | [oauth.json] | OAuth 2.0 first step, OAuth 1.0a second step\n**`access_url`** | [oauth.json] | OAuth 2.0 second step, OAuth 1.0a third step\n**`oauth`** | [oauth.json] | OAuth version number\n**`scope_delimiter`** | [oauth.json] | String delimiter used for concatenating multiple scopes\n**`token_endpoint_auth_method`** | `[provider]` | Authentication method for the token endpoint\n**`token_endpoint_auth_signing_alg`** | `[provider]` | Signing algorithm for the token endpoint\n***Client Server*** |\n**`origin`** | `defaults` | Where your client server can be reached\n**`prefix`** | `defaults` | Path prefix for the Grant internal routes\n**`state`** | `defaults` | Random state string for OAuth 2.0\n**`nonce`** | `defaults` | Random nonce string for OpenID Connect\n**`pkce`** | `defaults` | Toggle PKCE support\n**`response`** | `defaults` | Response data to receive\n**`transport`** | `defaults` | A way to deliver the response data\n**`callback`** | `[provider]` | Relative or absolute URL to receive the response data\n**`overrides`** | `[provider]` | Static configuration overrides for a provider\n**`dynamic`** | `[provider]` | Configuration keys that can be overridden dynamically over HTTP\n***Client App*** |\n**`key`** **`client_id`** **`consumer_key`** | `[provider]` | The `client_id` or `consumer_key` of your OAuth app\n**`secret`** **`client_secret`**  **`consumer_secret`** | `[provider]` | The `client_secret` or `consumer_secret` of your OAuth app\n**`scope`** | `[provider]` | List of scopes to request\n**`custom_params`** | `[provider]` | Custom authorization parameters and their values\n**`subdomain`** | `[provider]` | String to embed into the authorization server URLs\n**`public_key`** | `[provider]` | Public PEM or JWK\n**`private_key`** | `[provider]` | Private PEM or JWK\n**`redirect_uri`** | `generated` | Absolute redirect URL of the OAuth app\n***Grant*** |\n**`name`** | `generated` | Provider's [name](#grant)\n**`[provider]`** | `generated` | Provider's [name](#grant) as key\n**`profile_url`** | [profile.json] | User profile URL\n\n\n## Configuration: Values\n\nKey | Location | Value\n:- | :-: | :-:\n***Authorization Server*** |\n**`request_url`** | [oauth.json] | `'https://api.twitter.com/oauth/request_token'`\n**`authorize_url`** | [oauth.json] | `'https://api.twitter.com/oauth/authenticate'`\n**`access_url`** | [oauth.json] | `'https://api.twitter.com/oauth/access_token'`\n**`oauth`** | [oauth.json] | `2` `1`\n**`scope_delimiter`** | [oauth.json] | `','` `' '`\n**`token_endpoint_auth_method`** | `[provider]` | `'client_secret_post'` `'client_secret_basic'` `'private_key_jwt'`\n**`token_endpoint_auth_signing_alg`** | `[provider]` | `'RS256'` `'ES256'` `'PS256'`\n***Client Server*** |\n**`origin`** | `defaults` | `'http://localhost:3000'` `https://site.com`\n**`prefix`** | `defaults` | `'/connect'` `/oauth` `''`\n**`state`** | `defaults` | `true`\n**`nonce`** | `defaults` | `true`\n**`pkce`** | `defaults` | `true`\n**`response`** | `defaults` | `['tokens', 'raw', 'jwt', 'profile']`\n**`transport`** | `defaults` | `'querystring'` `'session'` `'state'`\n**`callback`** | `[provider]` | `'/hello'` `'https://site.com/hi'`\n**`overrides`** | `[provider]` | `{something: {scope: ['..']}}`\n**`dynamic`** | `[provider]` | `['scope', 'subdomain']`\n***Client App*** |\n**`key`** **`client_id`** **`consumer_key`** | `[provider]` | `'123'`\n**`secret`** **`client_secret`**  **`consumer_secret`** | `[provider]` | `'123'`\n**`scope`** | `[provider]` | `['openid', '..']`\n**`custom_params`** | `[provider]` | `{access_type: 'offline'}`\n**`subdomain`** | `[provider]` | `'myorg'`\n**`public_key`** | `[provider]` | `'..PEM..'` `'{..JWK..}'`\n**`private_key`** | `[provider]` | `'..PEM..'` `'{..JWK..}'`\n**`redirect_uri`** |`generated` | `'http://localhost:3000/connect/twitter/callback'`\n***Grant*** |\n**`name`** |`generated` | `name: 'twitter'`\n**`[provider]`** |`generated` | `twitter: true`\n**`profile_url`** | [profile.json] | `'https://api.twitter.com/1.1/users/show.json'`\n\n\n## Configuration: Scopes\n\nGrant relies on configuration gathered from **6** different places:\n\n1. The **first** place Grant looks for configuration is the built-in [oauth.json] file located in the config folder.\n\n2. The **second** place Grant looks for configuration is the `defaults` key, specified in the user's configuration. These defaults are applied for every provider in the user's configuration.\n\n3. The **third** place for configuration is the provider itself. All providers in the user's configuration inherit every option defined for them in the [oauth.json] file, and all options defined inside the `defaults` key. Having [oauth.json] file and a `defaults` configuration is only a convenience. You can define all available options directly for a provider.\n\n4. The **fourth** place for configuration are the provider's [`overrides`](#connect-static-overrides). The static overrides inherit their parent provider, essentially creating new provider of the same type.\n\n5. The **fifth** place for configuration is the dynamic [state](#dynamic-state) override. The request/response lifecycle state of your HTTP framework of choice can be used to dynamically override configuration.\n\n6. The **sixth** place for configuration, that _[potentially](#dynamic-oauth-proxy)_ can override all of the above, and make all of the above optional, is the [`dynamic`](#dynamic-http) HTTP override.\n\n---\n\n# Connect\n\n\n## Connect: Origin\n\nThe `origin` is where your client server can be reached:\n\n```json\n{\n  \"defaults\": {\n    \"origin\": \"http://localhost:3000\"\n  }\n}\n```\n\nYou login by navigating to the `/connect/:provider` route where `:provider` is a key in your configuration, usually one of the [officially supported](#grant) ones, but you can define [your own](#misc-custom-providers) as well. Additionally you can login through a [static override](#connect-static-overrides) defined for that provider by navigating to the `/connect/:provider/:override?` route.\n\n## Connect: Prefix\n\nBy default Grant operates on the following two routes:\n\n```\n/connect/:provider/:override?\n/connect/:provider/callback\n```\n\nHowever, the default `/connect` prefix can be configured:\n\n```json\n{\n  \"defaults\": {\n    \"origin\": \"http://localhost:3000\",\n    \"prefix\": \"/oauth\"\n  }\n}\n```\n\n\n## Connect: Redirect URI\n\nThe [`redirect_uri`](#misc-redirect-uri) of your OAuth app should follow this format:\n\n```\n[origin][prefix]/[provider]/callback\n```\n\nWhere [`origin`](#connect-origin) and [`prefix`](#connect-prefix) have to match the ones set in your configuration, and [`provider`](#grant) is a provider key found in your configuration.\n\nFor example: `http://localhost:3000/connect/google/callback`\n\nThis redirect URI is used internally by Grant. Depending on the [`transport`](#callback-transport) being used you will receive the response data in the [`callback`](#callback-data) route or absolute URL configured for that provider.\n\n\n## Connect: Custom Parameters\n\nSome providers may employ custom authorization parameters that you can configure using the `custom_params` key:\n\n```json\n{\n  \"google\": {\n    \"custom_params\": {\"access_type\": \"offline\", \"prompt\": \"consent\"}\n  },\n  \"reddit\": {\n    \"custom_params\": {\"duration\": \"permanent\"}\n  },\n  \"trello\": {\n    \"custom_params\": {\"name\": \"my app\", \"expiration\": \"never\"}\n  }\n}\n```\n\n\n## Connect: OpenID Connect\n\nThe `openid` scope is required, and generating a random `nonce` string is optional but recommended:\n\n```json\n{\n  \"google\": {\n    \"scope\": [\"openid\"],\n    \"nonce\": true\n  }\n}\n```\n\nGrant **does not** verify the signature of the returned `id_token` by default.\n\nHowever, the following two claims of the `id_token` are being validated:\n\n1. `aud` - is the token intended for my OAuth app?\n2. `nonce` - does it tie to a request of my own?\n\n\n## Connect: PKCE\n\nPKCE can be enabled for all providers or for a specific provider only:\n\n```json\n{\n  \"google\": {\n    \"pkce\": true\n  }\n}\n```\n\nProviders that do not support PKCE will ignore the additional parameters being sent.\n\n\n## Connect: Static Overrides\n\nProvider sub configurations can be configured using the `overrides` key:\n\n```json\n{\n  \"github\": {\n    \"key\": \"...\", \"secret\": \"...\",\n    \"scope\": [\"public_repo\"],\n    \"callback\": \"/hello\",\n    \"overrides\": {\n      \"notifications\": {\n        \"key\": \"...\", \"secret\": \"...\",\n        \"scope\": [\"notifications\"]\n      },\n      \"all\": {\n        \"scope\": [\"repo\", \"gist\", \"user\"],\n        \"callback\": \"/hey\"\n      }\n    }\n  }\n}\n```\n\nNavigate to:\n\n- `/connect/github` to request the public_repo `scope`\n- `/connect/github/notifications` to request the notifications `scope` using another OAuth App (`key` and `secret`)\n- `/connect/github/all` to request a bunch of `scope`s and also receive the response data in another `callback` route\n\n---\n\n# Callback\n\n\n## Callback: Data\n\nBy default the response data will be returned in your `callback` route or absolute URL encoded as querystring.\n\nDepending on the [`transport`](#callback-transport) being used the response data can be returned in the `session` or in the `state` object instead.\n\nThe amount of the returned data can be controlled through the [`response`](#callback-response) configuration.\n\n### OAuth 2.0\n\n```js\n{\n  id_token: '...',\n  access_token: '...',\n  refresh_token: '...',\n  raw: {\n    id_token: '...',\n    access_token: '...',\n    refresh_token: '...',\n    some: 'other data'\n  }\n}\n```\n\nThe `refresh_token` is optional. The `id_token` is returned only for [OpenID Connect](#connect-openid-connect) providers requesting the `openid` scope.\n\n\n### OAuth 1.0a\n\n```js\n{\n  access_token: '...',\n  access_secret: '...',\n  raw: {\n    oauth_token: '...',\n    oauth_token_secret: '...',\n    some: 'other data'\n  }\n}\n```\n\n\n### Error\n\n```js\n{\n  error: {\n    some: 'error data'\n  }\n}\n```\n\n\n## Callback: Transport\n\n### querystring\n\nBy default Grant will encode the OAuth [response data](#callback-data) as `querystring` in your `callback` route or absolute URL:\n\n```json\n{\n  \"github\": {\n    \"callback\": \"https://site.com/hello\"\n  }\n}\n```\n\nThis is useful when using Grant as [OAuth Proxy](#dynamic-oauth-proxy). However this final `https://site.com/hello?access_token=...` redirect can potentially leak private data in your server logs, especially when sitting behind a reverse proxy.\n\n\n### session\n\nFor local `callback` routes the session `transport` is recommended:\n\n```json\n{\n  \"defaults\": {\n    \"transport\": \"session\"\n  },\n  \"github\": {\n    \"callback\": \"/hello\"\n  }\n}\n```\n\nThis will make the OAuth [response data](#callback-data) available in the `session` object instead:\n\n```js\nreq.session.grant.response // Express\nctx.session.grant.response // Koa\nreq.yar.get('grant').response // Hapi\nreq.session.grant.response // Fastify\n(await session.get()).grant.response // Serverless Function\n```\n\n\n### state\n\nThe request/response lifecycle `state` can be used as well:\n\n```json\n{\n  \"defaults\": {\n    \"transport\": \"state\"\n  }\n}\n```\n\nIn this case a `callback` route is not needed, and it will be ignored if provided. The response data will be available in the request/response lifecycle state object instead:\n\n```js\nres.locals.grant.response // Express\nctx.state.grant.response // Koa\nreq.plugins.grant.response // Hapi\nres.grant.response // Fastify\nvar {response} = await grant(...) // Serverless Function\n```\n\n\n## Callback: Response\n\nBy default Grant returns all of the available tokens and the `raw` response data returned by the Authorization server:\n\n```js\n{\n  id_token: '...',\n  access_token: '...',\n  refresh_token: '...',\n  raw: {\n    id_token: '...',\n    access_token: '...',\n    refresh_token: '...',\n    some: 'other data'\n  }\n}\n```\n\n### querystring\n\nWhen using the querystring [`transport`](#callback-transport) it might be a good idea to limit the response data:\n\n```json\n{\n  \"defaults\": {\n    \"response\": [\"tokens\"]\n  }\n}\n```\n\nThis will return only the tokens available, without the `raw` response data.\n\nThis is useful when using Grant as [OAuth Proxy](#dynamic-oauth-proxy). Encoding potentially large amounts of data as querystring can lead to incompatibility issues with some servers and browsers, and generally is considered a bad practice.\n\n### session\n\nUsing the session [`transport`](#callback-transport) is generally safer, but it also depends on the implementation of your session store.\n\nIn case your session store encodes the entire session in a cookie, not just the session ID, some servers may reject the HTTP request because of HTTP headers size being too big.\n\n```json\n{\n  \"google\": {\n    \"response\": [\"tokens\"]\n  }\n}\n```\n\nThis will return only the tokens available, without the `raw` response data.\n\n### jwt\n\nGrant can also return even larger [response data](#callback-data) by including the decoded JWT for [OpenID Connect](#connect-openid-connect) providers that return `id_token`:\n\n```json\n{\n  \"google\": {\n    \"response\": [\"tokens\", \"raw\", \"jwt\"]\n  }\n}\n```\n\nThis will make the decoded JWT available in the response data:\n\n```js\n{\n  id_token: '...',\n  access_token: '...',\n  refresh_token: '...',\n  raw: {\n    id_token: '...',\n    access_token: '...',\n    refresh_token: '...',\n    some: 'other data'\n  },\n  jwt: {id_token: {header: {}, payload: {}, signature: '...'}}\n}\n```\n\nMake sure you include all of the response keys that you want to be returned when configuring the `response` data explicitly.\n\n\n### profile\n\nOutside of the regular OAuth flow, Grant can also request the user profile:\n\n```json\n{\n  \"google\": {\n    \"response\": [\"tokens\", \"profile\"]\n  }\n}\n```\n\nAdditionaly a `profile` key will be available in the response data:\n\n```js\n{\n  access_token: '...',\n  refresh_token: '...',\n  profile: {some: 'user data'}\n}\n```\n\nThe `profile` key contains either the raw response data returned by the user profile endpoint or an error message.\n\nNot all of the supported providers have their `profile_url` set, and some of them might require custom parameters. Usually the user profile endpoint is accessible only when certain `scope`s were requested.\n\n\n## Callback: Session\n\nGrant uses session to persist state between HTTP redirects occurring during the OAuth flow. This session, however, was never meant to be used as persistent storage, even if that's totally possible.\n\nOnce you receive the [response data](#callback-data) in your `callback` route you are free to destroy that session.\n\nHowever, there are a few session keys returned in your `callback` route, that you may find useful:\n\nKey        | Availability            | Description\n:--        | :--                     | :--\n`provider` | **Always**              | The provider [name](#grant) used for this authorization\n`override` | Depends on URL          | The [static override](#connect-static-overrides) name used for this authorization\n`dynamic`  | Depends on request type | The [dynamic override](#dynamic-http) configuration passed to this authorization\n`state`    | OAuth 2.0 only          | OAuth 2.0 state string that was generated\n`nonce`    | OpenID Connect only     | [OpenID Connect](#connect-openid-connect) nonce string that was generated\n`code_verifier` | PKCE only     | The code verifier that was generated for [PKCE](#connect-pkce)\n`request`  | OAuth 1.0a only         | Data returned from the first request of the OAuth 1.0a flow\n`response` | Depends on transport used | The final [response data](#callback-data)\n\n---\n\n# Dynamic Configuration\n\n\n## Dynamic: Instance\n\nEvery Grant instance have a `config` property attached to it:\n\n```js\nvar grant = Grant(require('./config'))\nconsole.log(grant.config)\n```\n\nYou can use the `config` property to alter the Grant's behavior during runtime without having to restart your server.\n\nThis property contains the **generated** configuration used internally by Grant, and changes made to that configuration affects the **entire** Grant instance!\n\n\n## Dynamic: State\n\nThe request/response lifecycle state can be used to alter configuration on every request:\n\n```js\nvar state = {dynamic: {subdomain: 'usershop'}}\nres.locals.grant = state // Express\nctx.state.grant = state // Koa\nreq.plugins.grant = state // Hapi\nreq.grant = state // Fastify\nawait grant(..., state) // Serverless Function\n```\n\nThis is useful in cases when you want to configure Grant dynamically with potentially sensitive data that you don't want to send over HTTP.\n\nThe request/response lifecycle state is not controlled by the [`dynamic`](#dynamic-http) configuration, meaning that you can override any configuration key.\n\nAny allowed [`dynamic`](#dynamic-http) configuration key sent through HTTP GET/POST request will override the identical one set using a state override.\n\n\n## Dynamic: HTTP\n\nThe `dynamic` configuration allows certain configuration keys to be set dynamically over HTTP GET/POST request.\n\nFor example `shopify` requires your shop name to be embedded into the OAuth URLs, so it makes sense to allow the [`subdomain`](#subdomain-urls) configuration key to be set dynamically:\n\n```json\n{\n  \"shopify\": {\n    \"dynamic\": [\"subdomain\"]\n  }\n}\n```\n\nThen you can have a web form on your website allowing the user to specify the shop name:\n\n```html\n<form action=\"/connect/shopify\" method=\"POST\" accept-charset=\"utf-8\">\n  <input type=\"text\" name=\"subdomain\" value=\"\" />\n  <button>Login</button>\n</form>\n```\n\nMaking `POST` request to the `/connect/:provider/:override?` route requires a form body parser middleware:\n\n```js\n.use(require('body-parser').urlencoded({extended: true})) // Express\n.use(require('koa-bodyparser')()) // Koa\n.register(require('fastify-formbody')) // Fastify\n```\n\nAlternatively you can make a `GET` request to the `/connect/:provider/:override?` route:\n\n```\nhttps://awesome.com/connect/shopify?subdomain=usershop\n```\n\nAny `dynamic` configuration sent over HTTP GET/POST request overrides any other configuration.\n\n\n## Dynamic: OAuth Proxy\n\nIn case you really want to, you can allow `dynamic` configuration override of every configuration key for a provider:\n\n```json\n{\n  \"github\": {\n    \"dynamic\": true\n  }\n}\n```\n\nAnd the most extreme case is allowing even non preconfigured providers to be used dynamically:\n\n```json\n{\n  \"defaults\": {\n    \"dynamic\": true\n  }\n}\n```\n\nEssentially Grant is a completely transparent **[OAuth Proxy][oauth-like-a-boss]**.\n\n---\n\n# Misc\n\n## Misc: Redirect URI\n\nThe [`origin`](#connect-origin) and the [`prefix`](#connect-prefix) configuration is used to generate the correct [`redirect_uri`](#connect-redirect-uri) that Grant expects:\n\n```json\n{\n  \"defaults\": {\n    \"origin\": \"https://mysite.com\"\n  },\n  \"google\": {},\n  \"twitter\": {}\n}\n```\n\nThe above configuration is identical to:\n\n```json\n{\n  \"google\": {\n    \"redirect_uri\": \"https://mysite.com/connect/google/callback\"\n  },\n  \"twitter\": {\n    \"redirect_uri\": \"https://mysite.com/connect/twitter/callback\"\n  }\n}\n```\n\nExplicitly specifying the `redirect_uri` overrides the one generated by default.\n\n\n## Misc: Custom Providers\n\nYou can define your own provider by adding a key for it in your configuration. In this case all of the required configuration keys have to be specified:\n\n```json\n{\n  \"defaults\": {\n    \"origin\": \"http://localhost:3000\"\n  },\n  \"awesome\": {\n    \"authorize_url\": \"https://awesome.com/authorize\",\n    \"access_url\": \"https://awesome.com/token\",\n    \"oauth\": 2,\n    \"key\": \"...\",\n    \"secret\": \"...\",\n    \"scope\": [\"read\", \"write\"]\n  }\n}\n```\n\nTake a look at the [oauth.json] file on how various providers are being configured.\n\n\n## Misc: Meta Configuration\n\nYou can document your configuration by adding custom keys to it:\n\n```json\n{\n  \"google\": {\n    \"meta\": {\n      \"app\": \"My Awesome OAuth App\",\n      \"owner\": \"my_email@gmail.com\",\n      \"url\": \"https://url/to/manage/oauth/app\"\n    }\n  }\n}\n```\n\nNote that `meta` is arbitrary key, but it cannot be one of the [reserved keys][reserved-keys].\n\n\n## Misc: Handler Constructors\n\nGrant supports different ways of instantiation:\n\n```js\n// Express or any other handler\nvar grant = require('grant').express()(config)\nvar grant = require('grant').express()({config, ...})\nvar grant = require('grant').express(config)\nvar grant = require('grant').express({config, ...})\nvar grant = require('grant')({handler: 'express', config, ...})\n```\n\nUsing the `new` keyword is optional:\n\n```js\nvar Grant = require('grant').express()\nvar grant = Grant(config)\nvar grant = new Grant(config)\n```\n\nAdditionally Hapi accepts the configuration in two different ways:\n\n```js\nserver.register([{plugin: grant(config)}])\nserver.register([{plugin: grant(), options: config}])\n```\n\n## Misc: Path Prefix\n\nYou can mount Grant under specific path prefix:\n\n```js\n// Express\napp.use('/oauth', grant(config))\n// Koa - using koa-mount\napp.use(mount('/oauth', grant(config)))\n// Hapi\nserver.register([{routes: {prefix: '/oauth'}, plugin: grant(config)}])\n// Fastify\nserver.register(grant(config), {prefix: '/oauth'})\n```\n\nIn this case the [`prefix`](#connect-prefix) configuration should reflect that + any other path parts that you may have:\n\n```json\n{\n  \"defaults\": {\n    \"origin\": \"http://localhost:3000\",\n    \"prefix\": \"/oauth/login\"\n  }\n}\n```\n\nIn this case you login by navigating to: `http://localhost:3000/oauth/login/:provider`\n\nAnd the [`redirect_uri`](#connect-redirect-uri) of your OAuth app should be `http://localhost:3000/oauth/login/:provider/callback`\n\nOptionally you can prefix your [`callback`](#callback) routes as well:\n\n```json\n{\n  \"github\": {\n    \"callback\": \"/oauth/login/hello\"\n  }\n}\n```\n\n## Misc: Request\n\nThe underlying [HTTP client] can be configured using the `request` option:\n\n```js\nvar grant = require('grant').express({\n  config,\n  request: {agent, timeout: 5000}\n})\n```\n\nFancy [request logs] are available too:\n\n```bash\nnpm i --save-dev request-logs\nDEBUG=req,res,json node app.js\n```\n\n## Misc: ES Modules and TypeScript\n\nImport Grant in your `.mjs` files:\n\n```js\nimport express from 'express'\nimport session from 'express-session'\nimport grant from 'grant'\nimport config from './config.json'\n\nexpress()\n  .use(session({}))\n  .use(grant.express(config))\n```\n\nImporting a `.json` file may require additional flag:\n\n```bash\nnode --experimental-json-modules app.mjs\n```\n\nGrant ships with extensive [type definitions][type-definitions] for TypeScript. Additonal type definitions and examples can be found [here][grant-types].\n\n\n## Misc: OAuth Quirks\n\n### Subdomain URLs\n\nSome providers have dynamic URLs containing bits of user information embedded into them. Inside the main [oauth.json] configuration file such URLs contain a `[subdomain]` token embedded in them.\n\nThe `subdomain` option can be used to specify your company name, server region etc:\n\n```json\n\"shopify\": {\n  \"subdomain\": \"mycompany\"\n},\n\"battlenet\": {\n  \"subdomain\": \"us\"\n}\n```\n\nThen Grant will generate the correct OAuth URLs:\n\n```json\n\"shopify\": {\n  \"authorize_url\": \"https://mycompany.myshopify.com/admin/oauth/authorize\",\n  \"access_url\": \"https://mycompany.myshopify.com/admin/oauth/access_token\"\n},\n\"battlenet\": {\n  \"authorize_url\": \"https://us.battle.net/oauth/authorize\",\n  \"access_url\": \"https://us.battle.net/oauth/token\"\n}\n```\n\nAlternatively you can override the entire `authorize_url` and `access_url` in your configuration.\n\n\n### Sandbox OAuth URLs\n\nSome providers may have Sandbox URLs to use while developing your app. To use them just override the entire `request_url`, `authorize_url` and `access_url` in your configuration (notice the `sandbox` bits):\n\n```json\n\"paypal\": {\n  \"authorize_url\": \"https://www.sandbox.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize\",\n  \"access_url\": \"https://api.sandbox.paypal.com/v1/identity/openidconnect/tokenservice\"\n},\n\"evernote\": {\n  \"request_url\": \"https://sandbox.evernote.com/oauth\",\n  \"authorize_url\": \"https://sandbox.evernote.com/OAuth.action\",\n  \"access_url\": \"https://sandbox.evernote.com/oauth\"\n}\n```\n\n\n### Sandbox Redirect URI\n\nVery rarely you may need to override the [`redirect_uri`](#connect-redirect-uri) that Grant generates for you.\n\nFor example Feedly supports only `http://localhost` as redirect URI of their Sandbox OAuth app, and it won't allow the correct `http://localhost/connect/feedly/callback` URL:\n\n```json\n\"feedly\": {\n  \"redirect_uri\": \"http://localhost\"\n}\n```\n\nIn this case you'll have to redirect the user to the `[origin][prefix]/[provider]/callback` route that Grant uses to execute the last step of the OAuth flow:\n\n```js\nvar qs = require('querystring')\n\napp.get('/', (req, res) => {\n  if (process.env.NODE_ENV === 'development' &&\n      req.session.grant &&\n      req.session.grant.provider === 'feedly' &&\n      req.query.code\n  ) {\n    res.redirect(`/connect/${req.session.grant.provider}/callback?${qs.stringify(req.query)}`)\n  }\n})\n```\n\nAs usual you will receive the response data in your final [`callback`](#callback) route.\n\n\n### Provider Quirks\n\n\n> **Ebay**\n\nSet the Redirect URI of your OAuth app as usual `[origin][prefix]/[provider]/callback`. Then Ebay will generate a special string called RuName (eBay Redirect URL name) that you need to set as `redirect_uri` in Grant:\n\n```json\n\"ebay\": {\n  \"redirect_uri\": \"RUNAME\"\n}\n```\n\n\n> **Flickr, Freelancer, Optimizely**\n\nSome providers are using custom authorization parameter to pass the requested scopes - Flickr `perms`, Freelancer `advanced_scopes`, Optimizely `scopes`, but you can use the regular `scope` option instead:\n\n```json\n\"flickr\": {\n  \"scope\": [\"write\"]\n},\n\"freelancer\": {\n  \"scope\": [\"1\", \"2\"]\n},\n\"optimizely\": {\n  \"scope\": [\"all\"]\n}\n```\n\n\n> **Mastodon**\n\nMastodon requires the entire domain of your server to be embedded in the OAuth URLs. However you should use the `subdomain` option:\n\n```json\n\"mastodon\": {\n  \"subdomain\": \"mastodon.cloud\"\n}\n```\n\n\n> **SurveyMonkey**\n\nSet your Mashery user name as `key` and your application key as `api_key`:\n\n```json\n\"surveymonkey\": {\n  \"key\": \"MASHERY_USER_NAME\",\n  \"secret\": \"CLIENT_SECRET\",\n  \"custom_params\": {\"api_key\": \"CLIENT_ID\"}\n}\n```\n\n\n> **VisualStudio**\n\nSet your Client Secret as `secret` not the App Secret:\n\n```json\n\"visualstudio\": {\n  \"key\": \"APP_ID\",\n  \"secret\": \"CLIENT_SECRET instead of APP_SECRET\"\n}\n```\n\n---\n\n\n  [npm-version]: https://img.shields.io/npm/v/grant.svg?style=flat-square (NPM Version)\n  [travis-ci]: https://img.shields.io/travis/simov/grant/master.svg?style=flat-square (Build Status)\n  [coveralls-status]: https://img.shields.io/coveralls/simov/grant.svg?style=flat-square (Test Coverage)\n  [snyk-vulnerabilities]: https://img.shields.io/snyk/vulnerabilities/npm/grant.svg?style=flat-square (Vulnerabilities)\n\n  [npm]: https://www.npmjs.com/package/grant\n  [travis]: https://travis-ci.org/simov/grant\n  [coveralls]: https://coveralls.io/r/simov/grant?branch=master\n  [snyk]: https://snyk.io/test/npm/grant\n\n  [grant-oauth]: https://grant.outofindex.com\n  [oauth-like-a-boss]: https://dev.to/simov/oauth-like-a-boss-2m3b\n  [http client]: https://github.com/simov/request-compose\n  [request logs]: https://github.com/simov/request-logs\n\n  [oauth.json]: https://github.com/simov/grant/blob/master/config/oauth.json\n  [profile.json]: https://github.com/simov/grant/blob/master/config/profile.json\n  [reserved-keys]: https://github.com/simov/grant/blob/master/config/reserved.json\n  [examples]: https://github.com/simov/grant/tree/master/examples\n  [changelog]: https://github.com/simov/grant/blob/master/CHANGELOG.md\n  [migration]: https://github.com/simov/grant/blob/master/MIGRATION.md\n\n  [grant-aws]: https://github.com/simov/grant-aws\n  [grant-azure]: https://github.com/simov/grant-azure\n  [grant-gcloud]: https://github.com/simov/grant-gcloud\n  [grant-vercel]: https://github.com/simov/grant-vercel\n\n  [grant-types]: https://github.com/simov/grant-types\n  [type-definitions]: https://github.com/simov/grant/blob/master/grant.d.ts\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-present, Simeon Velichkov <simeonvelichkov@gmail.com> (https://github.com/simov/grant)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/grant/-/grant-5.4.15.tgz#4bc19b6e3ab67ac33135a7d176460dafb8e38fb7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/grant/-/grant-5.4.15.tgz",
    "hash": "4bc19b6e3ab67ac33135a7d176460dafb8e38fb7",
    "integrity": "sha512-P2DQAgOKD4ySa+82c3DNDRLma74w/DtdJ60KsNd056oywvEAHTCCXaDBVct2vM4LPSoP8OVD/HctJEQyhExl7Q==",
    "registry": "npm",
    "packageName": "grant",
    "cacheIntegrity": "sha512-P2DQAgOKD4ySa+82c3DNDRLma74w/DtdJ60KsNd056oywvEAHTCCXaDBVct2vM4LPSoP8OVD/HctJEQyhExl7Q== sha1-S8Gbbjq2esMxNafRdkYNr7jjj7c="
  },
  "registry": "npm",
  "hash": "4bc19b6e3ab67ac33135a7d176460dafb8e38fb7"
}