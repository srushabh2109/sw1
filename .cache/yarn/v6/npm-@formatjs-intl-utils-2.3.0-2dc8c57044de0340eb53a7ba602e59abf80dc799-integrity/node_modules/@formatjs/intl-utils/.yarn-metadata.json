{
  "manifest": {
    "name": "@formatjs/intl-utils",
    "version": "2.3.0",
    "description": "Smartly determine best unit for relative time format",
    "keywords": [
      "intl",
      "i18n",
      "relative",
      "moment",
      "format",
      "date"
    ],
    "author": {
      "name": "Long Ho"
    },
    "bugs": {
      "url": "https://github.com/formatjs/formatjs/issues"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:formatjs/formatjs.git"
    },
    "sideEffects": false,
    "main": "dist/index.js",
    "module": "lib/index.js",
    "module:es6": "dist-es6/index.js",
    "types": "dist/index.d.ts",
    "files": [
      "dist",
      "lib",
      "src"
    ],
    "scripts": {
      "clean": "rimraf dist dist-es6 lib *.tsbuildinfo",
      "cldr": "ts-node scripts/cldr",
      "build": "yarn run cldr && tsc && tsc -p tsconfig.esm.json && tsc -p tsconfig.es6.json && api-extractor run --local",
      "test": "mocha --opts ../../mocha.opts tests/*"
    },
    "homepage": "https://github.com/formatjs/formatjs",
    "license": "MIT",
    "gitHead": "5b218606c3ec03e332f472706fffd04153c20dae",
    "devDependencies": {
      "@types/chai": "^4.2.11",
      "@types/mocha": "^7.0.2",
      "@types/serialize-javascript": "^1.5.0",
      "chai": "^4.2.0",
      "mocha": "^7.1.2",
      "serialize-javascript": "^3.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@formatjs-intl-utils-2.3.0-2dc8c57044de0340eb53a7ba602e59abf80dc799-integrity/node_modules/@formatjs/intl-utils/package.json",
    "readmeFilename": "README.md",
    "readme": "# Intl Utils\n\nProvide i18n utilities.\n\n[![npm Version](https://img.shields.io/npm/v/@formatjs/intl-utils.svg?style=flat-square)](https://www.npmjs.org/package/@formatjs/intl-utils)\n\n## API\n\n### selectUnit\n\nThis function determines the `best fit` unit based on a specific set of customizable thresholds.\n\n```ts\nfunction selectUnit(\n  from: Date | number,\n  to: Date | number = Date.now(),\n  thresholds = DEFAULT_THRESHOLDS\n): {value: number; unit: Unit};\n```\n\nwhere `thresholds` has the shape of:\n\n```ts\ninterface Threshold {\n  second: number;\n  minute: number;\n  hour: number;\n  day: number;\n}\n```\n\n`month` & `year` are based on calendar, thus not customizable.\n\nExample:\n\n```ts\nimport {selectUnit} from '@formatjs/intl-utils';\nselectUnit(Date.now() - 1000); // { value: -1, unit: 'second' }\nselectUnit(Date.now() - 44000); // { value: -44, unit: 'second' }\nselectUnit(Date.now() - 50000); // { value: 1, unit: 'minute' }\n```\n\n#### Caveats\n\n`selectUnit` is meant to be a stepping stone from the old `IntlRelativeFormat` to the officially spec-ed `Intl.RelativeTimeFormat`. Therefore we don't recommend using this for an extended period of time because of ambiguous editorial issues such as:\n\n- From 2019/01/01 -> 2018/11/01 can technically be `last year`, `2 months ago` or `a quarter ago`.\n\n- From 2019/01/02 6am to 2019/01/01 11pm can also be `7 hours ago` or `yesterday`. Timezone further complicates the issue.\n\nThe examples above have not even tackled the differences in non-Gregorian calendars. There is an issue opened upstream in the spec that potentially introduces a [`best fit` algorithm](https://github.com/tc39/proposal-intl-relative-time/issues/47). Therefore, we recommend that you implement your own version of `selectUnit` that matches your editorial expectation.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 FormatJS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@formatjs/intl-utils/-/intl-utils-2.3.0.tgz#2dc8c57044de0340eb53a7ba602e59abf80dc799",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@formatjs/intl-utils/-/intl-utils-2.3.0.tgz",
    "hash": "2dc8c57044de0340eb53a7ba602e59abf80dc799",
    "integrity": "sha512-KWk80UPIzPmUg+P0rKh6TqspRw0G6eux1PuJr+zz47ftMaZ9QDwbGzHZbtzWkl5hgayM/qrKRutllRC7D/vVXQ==",
    "registry": "npm",
    "packageName": "@formatjs/intl-utils",
    "cacheIntegrity": "sha512-KWk80UPIzPmUg+P0rKh6TqspRw0G6eux1PuJr+zz47ftMaZ9QDwbGzHZbtzWkl5hgayM/qrKRutllRC7D/vVXQ== sha1-LcjFcETeA0DrU6e6YC5Zq/gNx5k="
  },
  "registry": "npm",
  "hash": "2dc8c57044de0340eb53a7ba602e59abf80dc799"
}