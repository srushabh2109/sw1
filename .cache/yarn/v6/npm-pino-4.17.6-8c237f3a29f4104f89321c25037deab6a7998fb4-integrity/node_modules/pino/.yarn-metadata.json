{
  "manifest": {
    "name": "pino",
    "version": "4.17.6",
    "description": "super fast, all natural json logger",
    "main": "pino.js",
    "browser": "./browser.js",
    "bin": {
      "pino": "bin.js"
    },
    "files": [
      "pino.js",
      "bin.js",
      "browser.js",
      "pretty.js",
      "usage.txt",
      "test",
      "docs",
      "example.js",
      "lib"
    ],
    "scripts": {
      "browser-test": "airtap --local 8080 test/browser*test.js",
      "test": "standard | snazzy && NODE_OPTIONS='--no-warnings' tap --no-cov test/*test.js",
      "ci": "standard | snazzy &&  NODE_OPTIONS='--no-warnings' tap --cov test/*test.js",
      "bench-all": "node benchmarks/runbench all",
      "bench-basic": "node benchmarks/runbench basic",
      "bench-object": "node benchmarks/runbench object",
      "bench-deepobject": "node benchmarks/runbench deepobject",
      "bench-multiarg": "node benchmarks/runbench multiarg",
      "bench-longstring": "node benchmarks/runbench longstring",
      "bench-child": "node benchmarks/runbench child",
      "bench-grandchild": "node benchmarks/runbench grandchild",
      "bench-conception": "node benchmarks/runbench conception"
    },
    "precommit": "test",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/pinojs/pino.git"
    },
    "keywords": [
      "fast",
      "logger",
      "stream",
      "json"
    ],
    "author": {
      "name": "Matteo Collina",
      "email": "hello@matteocollina.com"
    },
    "contributors": [
      {
        "name": "David Mark Clements",
        "email": "huperekchuno@googlemail.com"
      },
      {
        "name": "James Sumners",
        "email": "james.sumners@gmail.com"
      },
      {
        "name": "Thomas Watson Steen",
        "email": "w@tson.dk",
        "url": "https://twitter.com/wa7son"
      }
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/pinojs/pino/issues"
    },
    "homepage": "http://getpino.io/",
    "devDependencies": {
      "airtap": "0.1.0",
      "benchmark": "^2.1.4",
      "bole": "^3.0.2",
      "bunyan": "^1.8.12",
      "debug": "^3.1.0",
      "fastbench": "^1.0.1",
      "flush-write-stream": "^1.0.3",
      "fresh-require": "^1.0.3",
      "log": "^1.4.0",
      "loglevel": "^1.6.1",
      "pre-commit": "^1.2.2",
      "proxyquire": "^2.0.1",
      "snazzy": "^7.1.1",
      "standard": "^11.0.1",
      "steed": "^1.1.3",
      "tap": "^12.0.1",
      "tape": "^4.9.0",
      "through2": "^2.0.3",
      "winston": "^3.0.0"
    },
    "dependencies": {
      "chalk": "^2.4.1",
      "fast-json-parse": "^1.0.3",
      "fast-safe-stringify": "^1.2.3",
      "flatstr": "^1.0.5",
      "pino-std-serializers": "^2.0.0",
      "pump": "^3.0.0",
      "quick-format-unescaped": "^1.1.2",
      "split2": "^2.2.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-pino-4.17.6-8c237f3a29f4104f89321c25037deab6a7998fb4-integrity/node_modules/pino/package.json",
    "readmeFilename": "README.md",
    "readme": "![banner](pino-banner.png)\n\n# pino&nbsp;&nbsp;[![Build Status](https://travis-ci.org/pinojs/pino.svg?branch=master)](https://travis-ci.org/pinojs/pino)&nbsp;[![Coverage Status](https://coveralls.io/repos/github/pinojs/pino/badge.svg?branch=master)](https://coveralls.io/github/pinojs/pino?branch=master) [![TypeScript definitions on DefinitelyTyped](http://definitelytyped.org/badges/standard.svg)](http://definitelytyped.org)\n\n[Extremely fast](#benchmarks) node.js logger, inspired by Bunyan.\nIt also includes a shell utility to pretty-print its log files.\n\n![cli](demo.png)\n\n* [Installation](#install)\n* [Usage](#usage)\n* [Benchmarks](#benchmarks)\n* [API ⇗](docs/API.md)\n* [CLI ⇗](docs/cli.md)\n* [Extreme mode explained ⇗](docs/extreme.md)\n* [Pino Howtos ⇗](docs/howtos.md)\n* [Transports with Pino](#transports)\n* [Pino in the browser](#browser)\n* [Caveats](#caveats)\n* [Team](#team)\n* [Contributing](#contributing)\n* [Acknowledgements](#acknowledgements)\n* [License](#license)\n\n## Install\n\n```\nnpm install pino --save\n```\n\nIf you need support for Node.js v0.12 or v0.10, please install the latest 2.x release using the `legacy` tag:\n\n```\nnpm install pino@legacy --save\n```\n\nDocumentation for the legacy version 2.x is available on the [`v2.x.x` branch](https://github.com/pinojs/pino/tree/v2.x.x).\n\n## Usage\n\n```js\n'use strict'\n\nvar pino = require('pino')()\n\npino.info('hello world')\npino.error('this is at error level')\npino.info('the answer is %d', 42)\npino.info({ obj: 42 }, 'hello world')\npino.info({ obj: 42, b: 2 }, 'hello world')\npino.info({ obj: { aa: 'bbb' } }, 'another')\nsetImmediate(function () {\n  pino.info('after setImmediate')\n})\npino.error(new Error('an error'))\n\nvar child = pino.child({ a: 'property' })\nchild.info('hello child!')\n\nvar childsChild = child.child({ another: 'property' })\nchildsChild.info('hello baby..')\n\n```\n\nThis produces:\n\n```\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"hello world\",\"time\":1459529098958,\"v\":1}\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":50,\"msg\":\"this is at error level\",\"time\":1459529098959,\"v\":1}\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"the answer is 42\",\"time\":1459529098960,\"v\":1}\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"hello world\",\"time\":1459529098960,\"obj\":42,\"v\":1}\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"hello world\",\"time\":1459529098960,\"obj\":42,\"b\":2,\"v\":1}\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"another\",\"time\":1459529098960,\"obj\":{\"aa\":\"bbb\"},\"v\":1}\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":50,\"msg\":\"an error\",\"time\":1459529098961,\"type\":\"Error\",\"stack\":\"Error: an error\\n    at Object.<anonymous> (/Users/davidclements/z/nearForm/pino/example.js:14:12)\\n    at Module._compile (module.js:435:26)\\n    at Object.Module._extensions..js (module.js:442:10)\\n    at Module.load (module.js:356:32)\\n    at Function.Module._load (module.js:311:12)\\n    at Function.Module.runMain (module.js:467:10)\\n    at startup (node.js:136:18)\\n    at node.js:963:3\",\"v\":1}\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"hello child!\",\"time\":1459529098962,\"a\":\"property\",\"v\":1}\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"hello baby..\",\"time\":1459529098962,\"another\":\"property\",\"a\":\"property\",\"v\":1}\n{\"pid\":94473,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"after setImmediate\",\"time\":1459529098963,\"v\":1}\n\n```\n\n<a name=\"benchmarks\"></a>\n## Benchmarks\n\nAs far as we know, it is one of the fastest loggers in town:\n\n`pino.info('hello world')`:\n\n```\nBASIC benchmark averages\nBunyan average: 549.042ms\nWinston average: 467.873ms\nBole average: 201.529ms\nDebug average: 253.724ms\nLogLevel average: 282.653ms\nPino average: 188.956ms\nPinoExtreme average: 108.809ms\n```\n\n`pino.info({'hello': 'world'})`:\n\n```\nOBJECT benchmark averages\nBunyanObj average: 564.363ms\nWinstonObj average: 464.824ms\nBoleObj average: 230.220ms\nLogLevelObject average: 474.857ms\nPinoObj average: 201.442ms\nPinoUnsafeObj average: 202.687ms\nPinoExtremeObj average: 108.689ms\nPinoUnsafeExtremeObj average: 106.718ms\n```\n\n`pino.info(aBigDeeplyNestedObject)`:\n\n```\nDEEPOBJECT benchmark averages\nBunyanDeepObj average: 5293.279ms\nWinstonDeepObj average: 9020.292ms\nBoleDeepObj average: 9169.043ms\nLogLevelDeepObj average: 15260.917ms\nPinoDeepObj average: 8467.807ms\nPinoUnsafeDeepObj average: 6159.227ms\nPinoExtremeDeepObj average: 8354.557ms\nPinoUnsafeExtremeDeepObj average: 6214.073ms\n```\n\n`pino.info('hello %s %j %d', 'world', {obj: true}, 4, {another: 'obj'})`:\n\n```\nBunyanInterpolateExtra average: 778.408ms\nWinstonInterpolateExtra average: 627.956ms\nBoleInterpolateExtra average: 429.757ms\nPinoInterpolateExtra average: 316.043ms\nPinoUnsafeInterpolateExtra average: 316.809ms\nPinoExtremeInterpolateExtra average: 218.468ms\nPinoUnsafeExtremeInterpolateExtra average: 215.040ms\n```\n\nIn many cases, pino is over 5x faster than alternatives.\n\nFor a fair comparison, [LogLevel](http://npm.im/loglevel) was extended\nto include a timestamp and [bole](http://npm.im/bole) had\n`fastTime` mode switched on.\n\n<a name=\"transports\"></a>\n## Transports\n\nA transport in most logging libraries is something that runs in-process to\nperform some operation with the finalized log line. For example, a transport\nmight send the log line to a standard syslog server after processing the log\nline and reformatting it. For details on implementing, and some already written,\ntransports, see our [Transports⇗](docs/transports.md) document.\n\n> **Pino *does not* natively support in-process transports.**\n\nPino does not support in-process transports because Node processes are\nsingle threaded processes (ignoring some technical details). Given this\nrestriction, one of the methods Pino employs to achieve its speed is to\npurposefully offload the handling of logs, and their ultimate destination, to\nexternal processes so that the threading capabilities of the OS can be\nused (or other CPUs).\n\nOne consequence of this methodology is that \"error\" logs do not get written to\n`stderr`. However, since Pino logs are in a parseable format, it is possible to\nuse tools like [pino-tee][pino-tee] or [jq][jq] to work with the logs. For\nexample, to view only logs marked as \"error\" logs:\n\n```\n$ node an-app.js | jq 'select(.level == 50)'\n```\n\nIn short, the way Pino generates logs:\n\n1. Reduces the impact of logging on your application to an extremely minimal amount.\n2. Gives greater flexibility in how logs are processed and stored.\n\nGiven all of the above, Pino clearly promotes out-of-process log processing.\nHowever, it is possible to wrap Pino and perform processing in-process.\nFor an example of this, see [pino-multi-stream][pinoms].\n\n[pino-tee]: https://npm.im/pino-tee\n[jq]: https://stedolan.github.io/jq/\n[pinoms]: https://npm.im/pino-multi-stream\n\n<a name=\"browser\"></a>\n## Pino in the browser\n\nPino is compatible with [`browserify`](http://npm.im) for browser side usage:\n\nThis can be useful with isomorphic/universal JavaScript code.\n\nBy default, in the browser,\n`pino` uses corresponding [Log4j](https://en.wikipedia.org/wiki/Log4j) `console` methods (`console.error`, `console.warn`, `console.info`, `console.debug`, `console.trace`) and uses `console.error` for any `fatal` level logs.\n\n### Browser Options\n\nPino can be passed a `browser` object in the options object,\nwhich can have the following properties: \n\n#### `asObject` (Boolean)\n\n```js\nvar pino = require('pino')({browser: {asObject: true}})\n```\n\nThe `asObject` option will create a pino-like log object instead of\npassing all arguments to a console method, for instance:\n\n```js\npino.info('hi') // creates and logs {msg: 'hi', level: 30, time: <ts>}\n```\n\nWhen `write` is set, `asObject` will always be `true`.\n\n#### `write` (Function | Object)\n\nInstead of passing log messages to `console.log` they can be passed to\na supplied function.\n\nIf `write` is set to a single function, all logging objects are passed\nto this function.\n\n```js\nvar pino = require('pino')({browser: {write: (o) => {\n  // do something with o\n}}})\n```\n\nIf `write` is an object, it can have methods that correspond to the\nlevels. When a message is logged at a given level, the corresponding\nmethod is called. If a method isn't present, the logging falls back\nto using the `console`.\n\n\n```js\nvar pino = require('pino')({browser: {write: {\n  info: function (o) {\n    //process info log object\n  },\n  error: function (o) {\n    //process error log object\n  }\n}}})\n```\n\n#### `serialize`: (Boolean | Array)\n\nThe serializers provided to `pino` are ignored by default in the browser, including\nthe standard serializers provided with Pino. Since the default destination for log\nmessages is the console, values such as `Error` objects are enhanced for inspection, \nwhich they otherwise wouldn't be if the Error serializer was enabled.\n\nWe can turn all serializers on, \n\n```js\nvar pino = require('pino')({\n  browser: {\n    serialize: true\n  }\n})\n```\n\nOr we can selectively enable them via an array:\n\n```js\nvar pino = require('pino')({\n  serializers: {\n    custom: myCustomSerializer,\n    another: anotherSerializer\n  },\n  browser: {\n    serialize: ['custom']\n  }\n})\n// following will apply myCustomSerializer to the custom property,\n// but will not apply anotherSerizlier to another key\npino.info({custom: 'a', another: 'b'})  \n```\n\nWhen `serialize` is `true` the standard error serializer is also enabled (see https://github.com/pinojs/pino/blob/master/docs/API.md#stdSerializers).\nThis is a global serializer which will apply to any `Error` objects passed to the logger methods.\n\nIf `serialize` is an array the standard error serializer is also automatically enabled, it can\nbe explicitly disabled by including a string in the serialize array: `!stdSerializers.err`, like so:\n\n```js\nvar pino = require('pino')({\n  serializers: {\n    custom: myCustomSerializer,\n    another: anotherSerializer\n  },\n  browser: {\n    serialize: ['!stdSerializers.err', 'custom'] //will not serialize Errors, will serialize `custom` keys\n  }\n})\n```\n\nThe `serialize` array also applies to any child logger serializers (see https://github.com/pinojs/pino/blob/master/docs/API.md#discussion-2\nfor how to set child-bound serializers).\n\nUnlike server pino the serializers apply to every object passed to the logger method,\nif the `asObject` option is `true`, this results in the serializers applying to the\nfirst object (as in server pino).      \n\nFor more info on serializers see https://github.com/pinojs/pino/blob/master/docs/API.md#parameters.\n\n#### `transmit` (Object)\n\nAn object with `send` and `level` properties.\n\nThe `transmit.level` property specifies the minimum level (inclusive) of when the `send` function\nshould be called, if not supplied the `send` function be called based on the main logging `level`\n(set via `options.level`, defaulting to `info`). \n\nThe `transmit` object must have a `send` function which will be called after \nwriting the log message. The `send` function is passed the level of the log \nmessage and a `logEvent` object. \n\nThe `logEvent` object is a data structure representing a log message, it represents\nthe arguments passed to a logger statement, the level \nat which they were logged and the heirarchy of child bindings. \n\nThe `logEvent` format is structured like so: \n\n```js\n{ \n  ts = Number,\n  messages = Array, \n  bindings = Array, \n  level: { label = String, value = Number}\n}\n```\n\nThe `ts` property is a unix epoch timestamp in milliseconds, the time is taken from the moment the\nlogger method is called.\n\nThe `messages` array is all arguments passed to logger method, (for instance `logger.info('a', 'b', 'c')`\nwould result in `messages` array `['a', 'b', 'c']`).\n\nThe `bindings` array represents each child logger (if any), and the relevant bindings. \nFor instance given `logger.child({a: 1}).child({b: 2}).info({c: 3})`, the bindings array \nwould hold `[{a: 1}, {b: 2}]` and the `messages` array would be `[{c: 3}]`. The `bindings`\nare ordered according to their position in the child logger heirarchy, with the lowest index\nbeing the top of the heirarchy.\n\nBy default serializers are not applied to log output in the browser, but they will *always* be\napplied to `messages` and `bindings` in the `logEvent` object. This allows us to ensure a consistent \nformat for all values between server and client.\n\nThe `level` holds the label (for instance `info`), and the corresponding numerical value \n(for instance `30`). This could be important in cases where client side level values and \nlabels differ from server side.\n\nThe point of the `send` function is to remotely record log messages: \n\n```js\nvar pino = require('pino')({\n  browser: {\n    transmit: {\n      level: 'warn',\n      send: function (level, logEvent) {\n        if (level === 'warn') {\n          // maybe send the logEvent to a separate endpoint\n          // or maybe analyse the messages further before sending\n        }\n        // we could also use the `logEvent.level.value` property to determine\n        // numerical value\n        if (logEvent.level.value >= 50) { // covers error and fatal\n\n          // send the logEvent somewhere \n        }\n      }\n    }\n  }\n})\n```\n\n<a name=\"caveats\"></a>\n## Caveats\n\nThere's some fine points to be aware of, which are a result of worthwhile trade-offs:\n\n### 11 Arguments\n\nThe logger functions (e.g. `pino.info`) can take a maximum of 11 arguments.\n\nIf you need more than that to write a log entry, you're probably doing it wrong.\n\n### Duplicate Keys\n\nIt's possible for naming conflicts to arise between child loggers and\nchildren of child loggers.\n\nThis isn't as bad as it sounds, even if you do use the same keys between\nparent and child loggers Pino resolves the conflict in the sanest way.\n\nFor example, consider the following:\n\n```js\nvar pino = require('pino')\nvar fs = require('fs')\npino(fs.createWriteStream('./my-log'))\n  .child({a: 'property'})\n  .child({a: 'prop'})\n  .info('howdy')\n```\n\n```sh\n$ cat my-log\n{\"pid\":95469,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"howdy\",\"time\":1459534114473,\"a\":\"property\",\"a\":\"prop\",\"v\":1}\n```\n\nNotice how there's two key's named `a` in the JSON output. The sub-childs properties\nappear after the parent child properties. This means if we run our logs through `pino -t` (or convert them to objects in any other way) we'll end up with one `a` property whose value corresponds to the lowest child in the hierarchy:\n\n```sh\n$ cat my-log | pino -t\n{\"pid\":95469,\"hostname\":\"MacBook-Pro-3.home\",\"level\":30,\"msg\":\"howdy\",\"time\":\"2016-04-01T18:08:34.473Z\",\"a\":\"prop\",\"v\":1}\n```\n\nThis equates to the same log output that Bunyan supplies.\n\nOne of Pino's performance tricks is to avoid building objects and stringifying\nthem, so we're building strings instead. This is why duplicate keys between\nparents and children will end up in log output.\n\n<a name=\"team\"></a>\n## The Team\n\n### Matteo Collina\n\n<https://github.com/pinojs>\n\n<https://www.npmjs.com/~matteo.collina>\n\n<https://twitter.com/matteocollina>\n\n### David Mark Clements\n\n<https://github.com/davidmarkclements>\n\n<https://www.npmjs.com/~davidmarkclements>\n\n<https://twitter.com/davidmarkclem>\n\n### James Sumners\n\n<https://github.com/jsumners>\n\n<https://www.npmjs.com/~jsumners>\n\n<https://twitter.com/jsumners79>\n\n### Thomas Watson Steen\n\n<https://github.com/watson>\n\n<https://www.npmjs.com/~watson>\n\n<https://twitter.com/wa7son>\n\n### Chat on Gitter\n\n<https://gitter.im/pinojs/pino>\n\n### Chat on IRC\n\nYou'll find an active group of Pino users in the #pinojs channel on Freenode, including some of the contributors to this project.\n\n## Contributing\n\nPino is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/pinojs/pino/blob/master/CONTRIBUTING.md) file for more details.\n\n<a name=\"acknowledgements\"></a>\n## Acknowledgements\n\nThis project was kindly sponsored by [nearForm](http://nearform.com).\n\nLogo and identity designed by Cosmic Fox Design: https://www.behance.net/cosmicfox.\n\n## License\n\nLicensed under [MIT](./LICENSE).\n\n[elasticsearch]: https://www.elastic.co/products/elasticsearch\n[kibana]: https://www.elastic.co/products/kibana\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016-2018 Matteo Collina and the Pino contributors\n\nPino contributors listed at https://github.com/pinojs/pino#the-team and in\nthe README file.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/pino/-/pino-4.17.6.tgz#8c237f3a29f4104f89321c25037deab6a7998fb4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/pino/-/pino-4.17.6.tgz",
    "hash": "8c237f3a29f4104f89321c25037deab6a7998fb4",
    "integrity": "sha512-LFDwmhyWLBnmwO/2UFbWu1jEGVDzaPupaVdx0XcZ3tIAx1EDEBauzxXf2S0UcFK7oe+X9MApjH0hx9U1XMgfCA==",
    "registry": "npm",
    "packageName": "pino",
    "cacheIntegrity": "sha512-LFDwmhyWLBnmwO/2UFbWu1jEGVDzaPupaVdx0XcZ3tIAx1EDEBauzxXf2S0UcFK7oe+X9MApjH0hx9U1XMgfCA== sha1-jCN/Oin0EE+JMhwlA33qtqeZj7Q="
  },
  "registry": "npm",
  "hash": "8c237f3a29f4104f89321c25037deab6a7998fb4"
}