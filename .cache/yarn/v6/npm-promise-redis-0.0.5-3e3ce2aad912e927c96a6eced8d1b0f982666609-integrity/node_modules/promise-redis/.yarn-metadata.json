{
  "manifest": {
    "name": "promise-redis",
    "version": "0.0.5",
    "description": "Tiny library that adds promise awareness to node_redis",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/maxbrieiev/promise-redis"
    },
    "keywords": [
      "redis",
      "promise",
      "when",
      "q",
      "bluebird",
      "then"
    ],
    "author": {
      "name": "Maksym Brieiev"
    },
    "license": "MIT",
    "dependencies": {
      "redis": "*",
      "redis-commands": "*"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-promise-redis-0.0.5-3e3ce2aad912e927c96a6eced8d1b0f982666609-integrity/node_modules/promise-redis/package.json",
    "readmeFilename": "README.rst",
    "readme": "-------------\npromise-redis\n-------------\n\n`promise-redis` is a tiny library that adds promise awareness to `node_redis`_,\nthe main node.js redis client. You may provide any promise-library. But if you\ndon't provide any, then `native JavaScript Promise`_ will be used instead.\n\nFeatures:\n\n* It is agnostic about what promise library you use. You will want to provide\n  promise library of your choice (no lock-in) or just use native JavaScript\n  promises.\n\n* Nothing new to learn. `promise-redis` just lifts redis commands to return\n  promises, and then exposes to you the original `node_redis`_ object. So for\n  API docs visit `node_redis documentation`_.\n\n* It is very small.\n\n.. contents::\n\n\nInstallation\n------------\n\nThe only dependency of `promise-redis` is `node_redis`_. To install\n`promise-redis` run:\n\n.. code-block:: bash\n\n    npm install promise-redis\n\n\nUsage\n-----\n\nUsing redis with native promises is easy:\n\n.. code-block:: javascript\n\n    var redis = require('promise-redis')();\n\nNow you can use ``redis`` object as usual, but each command will return\na promise:\n\n.. code-block:: javascript\n\n    var client = redis.createClient();\n    client.set('mykey', 'myvalue')\n        .then(console.log)\n        .catch(console.log)\n\nIf you want to use some promise library, you need to provide factory function:\n\n.. code-block:: javascript\n\n    var redis = require('promise-redis')(function(resolver) {\n        // do something here that provides a way to create new promise.\n    });\n\nSee below for examples of integration with some well-known promise libraries.\n\nQ\n===\n\nIntegration with `Q`_ is easy. Just use ``Q.Promise`` as a factory function.\n\n.. code-block:: javascript\n\n    var promiseFactory = require(\"q\").Promise,\n        redis = require('promise-redis')(promiseFactory);\n\n    // redis is the usual node_redis object. Do what you usually do with it:\n    var client = redis.createClient();\n    client.on(\"error\", function (err) {\n        console.log(\"uh oh\", err);\n    });\n\n    // All your redis commands return promises now.\n    client.set('mykey', 'myvalue')\n        .then(console.log)\n        .catch(console.log)\n\n    // Callback style code is still supported. This can be useful if some of\n    // old code still relies on callbacks.\n    client.hmset('myotherkey', {'one': 1, 'two': 2}, function (err, value) {\n        if (err) {\n            return console.log(\"Error: \", err.message);\n        }\n        console.log(value);\n    });\n\nwhen\n====\n\nIntegration with `when`_ is easy as well. Just use ``when.promise`` as a factory\nfunction:\n\n.. code-block:: javascript\n\n    var promiseFactory = require(\"when\").promise,\n        redis = require('promise-redis')(promiseFactory);\n\n    // redis is the usual node_redis object. Do what you usually do with it:\n    var client = redis.createClient();\n    client.on(\"error\", function (err) {\n        console.log(\"uh oh\", err);\n    });\n\n    // All your redis commands return promises now.\n    client.set('mykey', 'myvalue')\n        .then(console.log)\n        .catch(console.log)\n\n    // Callback style code is still supported. This can be useful if some of\n    // old code still relies on callbacks.\n    client.hmset('myotherkey', {'one': 1, 'two': 2}, function (err, value) {\n        if (err) {\n            return console.log(\"Error: \", err.message);\n        }\n        console.log(value);\n    });\n\nBluebird\n========\n\n`Bluebird`_ is a bit different, but still nothing special:\n\n.. code-block:: javascript\n\n    var Promise = require(\"bluebird\"),\n        redis = require('promise-redis')(function(resolver) {\n            return new Promise(resolver);\n        });\n\n    // redis is the usual node_redis object. Do what you usually do with it:\n    var client = redis.createClient();\n    client.on(\"error\", function (err) {\n        console.log(\"uh oh\", err);\n    });\n\n    // All your redis commands return promises now.\n    client.set('mykey', 'myvalue')\n        .then(console.log)\n        .catch(console.log)\n\n    // Callback style code is still supported. This can be useful if some of\n    // old code still relies on callbacks.\n    client.hmset('myotherkey', {'one': 1, 'two': 2}, function (err, value) {\n        if (err) {\n            return console.log(\"Error: \", err.message);\n        }\n        console.log(value);\n    });\n\nOther libraries\n===============\n\nPull requests that demonstrate how other libraries can be integrated are\nwelcome.\n\n\nExamples\n--------\n\nHere is a copy-and-paste example from \"Usage\" section of `node_redis\ndocumentation`_. The example is silly and doesn't demonstrate any advantages of\npromises. I use `when`_ library here, but as you already know it really doesn't\nmatter:\n\n.. code-block:: javascript\n\n    var promiseFactory = require(\"when\").promise,\n        redis = require(\"promise-redis\")(promiseFactory),\n        client = redis.createClient();\n\n    // if you'd like to select database 3, instead of 0 (default), call\n    client.select(3).then(function() { \n        console.log(\"Selected database 3\");\n    });\n\n    client.on(\"error\", function (err) {\n        console.log(\"Error \" + err);\n    });\n\n    client.set(\"string key\", \"string val\").then(console.log);\n    client.hset(\"hash key\", \"hashtest 1\", \"some value\").then(console.log);\n    client.hset([\"hash key\", \"hashtest 2\", \"some other value\"]).then(console.log);\n    client.hkeys(\"hash key\").then(function (replies) {\n        console.log(replies.length + \" replies:\");\n        replies.forEach(function (reply, i) {\n            console.log(\"    \" + i + \": \" + reply);\n        });\n        client.quit();\n    });\n\nAnd finally here is an example of using ``client.multi`` (it is also from\n`node_redis`_ docs):\n\n.. code-block:: javascript\n\n    var promiseFactory = require(\"when\").promise,\n        redis = require(\"promise-redis\")(promiseFactory),\n        client = redis.createClient();\n\n    client.sadd(\"bigset\", \"a member\");\n    client.sadd(\"bigset\", \"another member\");\n\n    while (set_size > 0) {\n        client.sadd(\"bigset\", \"member \" + set_size);\n        set_size -= 1;\n    }\n\n    // multi chain\n    client.multi()\n        .scard(\"bigset\")\n        .smembers(\"bigset\")\n        .keys(\"*\")\n        .dbsize()\n        .exec()\n        .then(function (replies) {\n            console.log(\"MULTI got \" + replies.length + \" replies\");\n            replies.forEach(function (reply, index) {\n                console.log(\"Reply \" + index + \": \" + reply.toString());\n            });\n        });\n\n``client.multi`` is a constructor that returns an object, which you can use to\nchain (queue) multiple redis commands together. All commands, but ``exec``,\nthat you issue on ``Multi`` don't start any I/O. But when ``exec`` command is\nissued, all queued operations are executed atomically. ``exec`` returns a\npromise.\n\n.. _node_redis: https://github.com/mranney/node_redis\n.. _`node_redis documentation`: https://github.com/mranney/node_redis#redis---a-nodejs-redis-client\n.. _Q: https://github.com/kriskowal/q/\n.. _when: https://github.com/cujojs/when\n.. _Bluebird: https://github.com/petkaantonov/bluebird\n.. _`native JavaScript Promise`: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Maxim\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/promise-redis/-/promise-redis-0.0.5.tgz#3e3ce2aad912e927c96a6eced8d1b0f982666609",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/promise-redis/-/promise-redis-0.0.5.tgz",
    "hash": "3e3ce2aad912e927c96a6eced8d1b0f982666609",
    "integrity": "sha1-PjziqtkS6SfJam7O2NGw+YJmZgk=",
    "registry": "npm",
    "packageName": "promise-redis",
    "cacheIntegrity": "sha512-ad6KJ5o8OEamlkmLfhZUVtnNOq493ea9EjCr5B32Xeo9RE/C8d+UHTetiY5kJIWw7prZ82g0fzqRE8UP+yBQiw== sha1-PjziqtkS6SfJam7O2NGw+YJmZgk="
  },
  "registry": "npm",
  "hash": "3e3ce2aad912e927c96a6eced8d1b0f982666609"
}