{
  "manifest": {
    "name": "koa-session",
    "description": "Koa cookie session middleware with external store support",
    "repository": {
      "type": "git",
      "url": "https://github.com/koajs/session.git"
    },
    "version": "6.2.0",
    "keywords": [
      "koa",
      "middleware",
      "session",
      "cookie"
    ],
    "files": [
      "index.js",
      "lib"
    ],
    "devDependencies": {
      "benchmark": "^2.1.4",
      "eslint": "3",
      "eslint-config-egg": "3",
      "istanbul": "0",
      "koa": "2",
      "mm": "^2.1.0",
      "mocha": "^5.2.0",
      "mz-modules": "^2.0.0",
      "pedding": "^1.1.0",
      "uid-safe": "^2.1.3",
      "should": "8",
      "supertest": "^3.3.0"
    },
    "license": "MIT",
    "dependencies": {
      "crc": "^3.4.4",
      "debug": "^3.1.0",
      "is-type-of": "^1.0.0",
      "uuid": "^3.3.2"
    },
    "engines": {
      "node": ">=7.6"
    },
    "scripts": {
      "test": "npm run lint && NODE_ENV=test mocha --exit --require should --reporter spec test/*.test.js",
      "test-cov": "NODE_ENV=test node ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --exit --require should test/*.test.js",
      "test-travis": "npm run lint && NODE_ENV=test node ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --exit --require should test/*.test.js",
      "lint": "eslint lib test index.js"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-koa-session-6.2.0-c0da2a808b520f62a25dac9f2914b580b2402078-integrity/node_modules/koa-session/package.json",
    "readmeFilename": "Readme.md",
    "readme": "# koa-session\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Gittip][gittip-image]][gittip-url]\n[![David deps][david-image]][david-url]\n[![iojs version][iojs-image]][iojs-url]\n[![node version][node-image]][node-url]\n[![npm download][download-image]][download-url]\n\n[npm-image]: https://img.shields.io/npm/v/koa-session.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/koa-session\n[travis-image]: https://img.shields.io/travis/koajs/session.svg?style=flat-square\n[travis-url]: https://travis-ci.org/koajs/session\n[coveralls-image]: https://img.shields.io/coveralls/koajs/session.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/koajs/session?branch=master\n[gittip-image]: https://img.shields.io/gittip/fengmk2.svg?style=flat-square\n[gittip-url]: https://www.gittip.com/fengmk2/\n[david-image]: https://img.shields.io/david/koajs/session.svg?style=flat-square\n[david-url]: https://david-dm.org/koajs/session\n[iojs-image]: https://img.shields.io/badge/io.js-%3E=_1.0-yellow.svg?style=flat-square\n[iojs-url]: http://iojs.org/\n[node-image]: https://img.shields.io/badge/node.js-%3E=_7.6-green.svg?style=flat-square\n[node-url]: http://nodejs.org/download/\n[download-image]: https://img.shields.io/npm/dm/koa-session.svg?style=flat-square\n[download-url]: https://npmjs.org/package/koa-session\n\n Simple session middleware for Koa. Defaults to cookie-based sessions and supports external stores.\n\n *Requires Node 7.6 or greater for async/await support*\n\n## Installation\n\n```js\n$ npm install koa-session\n```\n\n## Notice\n\n6.x changed the default cookie key from `koa:sess` to `koa.sess` to ensure `set-cookie` value valid with HTTP spec.[see issue](https://github.com/koajs/session/issues/28). If you want to be compatible with the previous version, you can manually set `config.key` to `koa:sess`.\n\n## Example\n\n  View counter example:\n\n```js\nconst session = require('koa-session');\nconst Koa = require('koa');\nconst app = new Koa();\n\napp.keys = ['some secret hurr'];\n\nconst CONFIG = {\n  key: 'koa.sess', /** (string) cookie key (default is koa.sess) */\n  /** (number || 'session') maxAge in ms (default is 1 days) */\n  /** 'session' will result in a cookie that expires when session/browser is closed */\n  /** Warning: If a session cookie is stolen, this cookie will never expire */\n  maxAge: 86400000,\n  autoCommit: true, /** (boolean) automatically commit headers (default true) */\n  overwrite: true, /** (boolean) can overwrite or not (default true) */\n  httpOnly: true, /** (boolean) httpOnly or not (default true) */\n  signed: true, /** (boolean) signed or not (default true) */\n  rolling: false, /** (boolean) Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) */\n  renew: false, /** (boolean) renew session when session is nearly expired, so we can always keep user logged in. (default is false)*/\n  secure: true, /** (boolean) secure cookie*/\n  sameSite: null, /** (string) session cookie sameSite options (default null, don't set it) */\n};\n\napp.use(session(CONFIG, app));\n// or if you prefer all default config, just use => app.use(session(app));\n\napp.use(ctx => {\n  // ignore favicon\n  if (ctx.path === '/favicon.ico') return;\n\n  let n = ctx.session.views || 0;\n  ctx.session.views = ++n;\n  ctx.body = n + ' views';\n});\n\napp.listen(3000);\nconsole.log('listening on port 3000');\n```\n\n## API\n\n### Options\n\n  The cookie name is controlled by the `key` option, which defaults\n  to \"koa.sess\". All other options are passed to `ctx.cookies.get()` and\n  `ctx.cookies.set()` allowing you to control security, domain, path,\n  and signing among other settings.\n\n#### Custom `encode/decode` Support\n\n  Use `options.encode` and `options.decode` to customize your own encode/decode methods.\n\n### Hooks\n\n  - `valid()`: valid session value before use it\n  - `beforeSave()`: hook before save session\n\n### External Session Stores\n\n  The session is stored in a cookie by default, but it has some disadvantages:\n\n  - Session is stored on client side unencrypted\n  - [Browser cookies always have length limits](http://browsercookielimits.squawky.net/)\n\n\n  You can store the session content in external stores (Redis, MongoDB or other DBs) by passing `options.store` with three methods (these need to be async functions):\n\n  - `get(key, maxAge, { rolling, ctx })`: get session object by key\n  - `set(key, sess, maxAge, { rolling, changed, ctx })`: set session object for key, with a `maxAge` (in ms)\n  - `destroy(key, {ctx})`: destroy session for key\n\n\n  Once you pass `options.store`, session storage is dependent on your external store -- you can't access the session if your external store is down. **Use external session stores only if necessary, avoid using session as a cache, keep the session lean, and store it in a cookie if possible!**\n\n\n  The way of generating external session id is controlled by the `options.genid(ctx)`, which defaults to `uuid.v4()`.\n\n  If you want to add prefix for all external session id, you can use `options.prefix`, it will not work if `options.genid(ctx)` present.\n\n  If your session store requires data or utilities from context, `opts.ContextStore` is also supported. `ContextStore` must be a class which claims three instance methods demonstrated above. `new ContextStore(ctx)` will be executed on every request.\n\n### Events\n\n`koa-session` will emit event on `app` when session expired or invalid:\n\n- `session:missed`: can't get session value from external store.\n- `session:invalid`: session value is invalid.\n- `session:expired`: session value is expired.\n\n### Custom External Key\n\nExternal key is used the cookie by default, but you can use `options.externalKey` to customize your own external key methods. `options.externalKey` with two methods:\n\n- `get(ctx)`: get the external key\n- `set(ctx, value)`: set the external key\n\n### Session#isNew\n\n  Returns __true__ if the session is new.\n\n```js\nif (this.session.isNew) {\n  // user has not logged in\n} else {\n  // user has already logged in\n}\n```\n\n### Session#maxAge\n\n  Get cookie's maxAge.\n\n### Session#maxAge=\n\n  Set cookie's maxAge.\n\n### Session#externalKey\n\n  Get session external key, only exist when external session store present.\n\n### Session#save()\n\n  Save this session no matter whether it is populated.\n\n### Session#manuallyCommit()\n\n  Session headers are auto committed by default. Use this if `autoCommit` is set to `false`.\n\n### Destroying a session\n\n  To destroy a session simply set it to `null`:\n\n```js\nthis.session = null;\n```\n\n## License\n\n  MIT\n",
    "licenseText": "MIT License\n\nCopyright (c) 2014-present Koajs contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/koa-session/-/koa-session-6.2.0.tgz#c0da2a808b520f62a25dac9f2914b580b2402078",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/koa-session/-/koa-session-6.2.0.tgz",
    "hash": "c0da2a808b520f62a25dac9f2914b580b2402078",
    "integrity": "sha512-l2ZC6D1BnRkIXhWkRgpewdqKn38/9/2WScmxyShuN408TxX+J/gUzdzGBIvGZaRwmezOU819sNpGmfFGLeDckg==",
    "registry": "npm",
    "packageName": "koa-session",
    "cacheIntegrity": "sha512-l2ZC6D1BnRkIXhWkRgpewdqKn38/9/2WScmxyShuN408TxX+J/gUzdzGBIvGZaRwmezOU819sNpGmfFGLeDckg== sha1-wNoqgItSD2KiXayfKRS1gLJAIHg="
  },
  "registry": "npm",
  "hash": "c0da2a808b520f62a25dac9f2914b580b2402078"
}