{
  "manifest": {
    "name": "resolve-path",
    "description": "Resolve a relative path against a root path with validation",
    "version": "1.4.0",
    "author": {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com",
      "url": "http://jongleberry.com"
    },
    "contributors": [
      {
        "name": "Douglas Christopher Wilson",
        "email": "doug@somethingdoug.com"
      }
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/pillarjs/resolve-path.git"
    },
    "dependencies": {
      "http-errors": "~1.6.2",
      "path-is-absolute": "1.0.1"
    },
    "devDependencies": {
      "eslint": "3.19.0",
      "eslint-config-standard": "10.2.1",
      "eslint-plugin-import": "2.8.0",
      "eslint-plugin-markdown": "1.0.0-beta.6",
      "eslint-plugin-node": "5.2.1",
      "eslint-plugin-promise": "3.6.0",
      "eslint-plugin-standard": "3.0.1",
      "istanbul": "0.4.5",
      "mocha": "2.5.3"
    },
    "files": [
      "HISTORY.md",
      "LICENSE",
      "README.md",
      "index.js"
    ],
    "engines": {
      "node": ">= 0.8"
    },
    "scripts": {
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"
    },
    "keywords": [
      "resolve",
      "path",
      "safe"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-resolve-path-1.4.0-c4bda9f5efb2fce65247873ab36bb4d834fe16f7-integrity/node_modules/resolve-path/package.json",
    "readmeFilename": "README.md",
    "readme": "# resolve-path\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nResolve a relative path against a root path with validation.\n\nThis module would protect against commons attacks like `GET /../file.js`\nwhich reaches outside the root folder.\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install resolve-path\n```\n\n## API\n\n```\nvar resolvePath = require('resolve-path')\n```\n\n### resolvePath(relativePath)\n\nResolve a relative path against `process.cwd()` (the process's current working\ndirectory) and return an absolute path. *This will throw* if the resulting resolution\nseems malicious. The following are malicious:\n\n  - The relative path is an absolute path\n  - The relative path contains a NULL byte\n  - The relative path resolves to a path outside of `process.cwd()`\n  - The relative path traverses above `process.cwd()` and back down\n\n### resolvePath(rootPath, relativePath)\n\nResolve a relative path against the provided root path and return an absolute path.\n*This will throw* if the resulting resolution seems malicious. The following are\nmalicious:\n\n  - The relative path is an absolute path\n  - The relative path contains a NULL byte\n  - The relative path resolves to a path outside of the root path\n  - The relative path traverses above the root and back down\n\n## Example\n\n### Safely resolve paths in a public directory\n\n```js\nvar http = require('http')\nvar parseUrl = require('parseurl')\nvar path = require('path')\nvar resolvePath = require('resolve-path')\n\n// the public directory\nvar publicDir = path.join(__dirname, 'public')\n\n// the server\nvar server = http.createServer(function onRequest (req, res) {\n  try {\n    // get the pathname from the URL (decoded)\n    var pathname = decodeURIComponent(parseUrl(req).pathname)\n\n    if (!pathname) {\n      res.statusCode = 400\n      res.end('path required')\n      return\n    }\n\n    // remove leading slash\n    var filename = pathname.substr(1)\n\n    // resolve the full path\n    var fullpath = resolvePath(publicDir, filename)\n\n    // echo the resolved path\n    res.statusCode = 200\n    res.end('resolved to ' + fullpath)\n  } catch (err) {\n    res.statusCode = err.status || 500\n    res.end(err.message)\n  }\n})\n\nserver.listen(3000)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/resolve-path.svg\n[npm-url]: https://npmjs.org/package/resolve-path\n[node-image]: https://img.shields.io/node/v/resolve-path.svg\n[node-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/pillarjs/resolve-path/master.svg?label=linux\n[travis-url]: https://travis-ci.org/pillarjs/resolve-path\n[appveyor-image]: https://img.shields.io/appveyor/ci/dougwilson/resolve-path/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/resolve-path\n[coveralls-image]: https://img.shields.io/coveralls/pillarjs/resolve-path/master.svg\n[coveralls-url]: https://coveralls.io/r/pillarjs/resolve-path?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/resolve-path.svg\n[downloads-url]: https://npmjs.org/package/resolve-path\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Jonathan Ong <me@jongleberry.com>\nCopyright (c) 2015-2018 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/resolve-path/-/resolve-path-1.4.0.tgz#c4bda9f5efb2fce65247873ab36bb4d834fe16f7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/resolve-path/-/resolve-path-1.4.0.tgz",
    "hash": "c4bda9f5efb2fce65247873ab36bb4d834fe16f7",
    "integrity": "sha1-xL2p9e+y/OZSR4c6s2u02DT+Fvc=",
    "registry": "npm",
    "packageName": "resolve-path",
    "cacheIntegrity": "sha512-i1xevIst/Qa+nA9olDxLWnLk8YZbi8R/7JPbCMcgyWaFR6bKWaexgJgEB5oc2PKMjYdrHynyz0NY+if+H98t1w== sha1-xL2p9e+y/OZSR4c6s2u02DT+Fvc="
  },
  "registry": "npm",
  "hash": "c4bda9f5efb2fce65247873ab36bb4d834fe16f7"
}