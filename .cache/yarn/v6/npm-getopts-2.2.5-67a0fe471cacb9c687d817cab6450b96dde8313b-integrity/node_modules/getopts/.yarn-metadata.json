{
  "manifest": {
    "name": "getopts",
    "description": "Parse CLI options, better.",
    "version": "2.2.5",
    "main": "index.js",
    "types": "getopts.d.ts",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/jorgebucaran/getopts.git"
    },
    "author": {
      "name": "Jorge Bucaran"
    },
    "files": [
      "index.js",
      "getopts.d.ts"
    ],
    "keywords": [
      "getopts",
      "cli",
      "argv",
      "flags",
      "yargs",
      "options",
      "minimist",
      "cli-parser"
    ],
    "scripts": {
      "test": "nyc -r lcov testmatrix test/*.test.js && nyc report && tsc -p test/ts",
      "release": "v=$npm_package_version; git commit -am $v && git tag -s $v -m $v && git push && git push --tags && npm publish"
    },
    "devDependencies": {
      "nyc": "^14.1.1",
      "testmatrix": "^0.1.2",
      "typescript": "^3.5.2"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-getopts-2.2.5-67a0fe471cacb9c687d817cab6450b96dde8313b-integrity/node_modules/getopts/package.json",
    "readmeFilename": "README.md",
    "readme": "# Getopts [![npm](https://img.shields.io/npm/v/getopts.svg?label=&color=0080FF)](https://github.com/jorgebucaran/getopts/releases/latest) [![Travis CI](https://img.shields.io/travis/jorgebucaran/getopts.svg?label=)](https://travis-ci.org/jorgebucaran/getopts)\n\n> Parse CLI options, better.\n\nGetopts sorts your command-line arguments into key-value pairs for easy look-up and retrieval, and its sane out-of-the-box defaults allow you to focus on the big picture: writing CLI tools. Here's why you'll love it:\n\n- Up to ~6x faster than the alternatives ([run the benchmarks](#run-the-benchmarks)).\n- Built upon [utility syntax guidelines](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html#tag_12_02) that have been used for decades.\n- You can use it as a drop-in replacement for `yargs` or `minimist`.\n- ~180 LOC and no dependencies.\n\n## Quickstart\n\n```console\nnpm i getopts\n```\n\nHow about we start with something useful: let's write a password generator. Our program should print out a random string of characters of a given length, and to make things more interesting, we'll add a way exclude certain characters like numbers or punctuation. We'll call it `pwd` (pronounced \"password\").\n\nA typical invocation of our program will look like this:\n\n```console\nexample/pwd --no-symbols --length=12\n```\n\nFirst, we'll use `getopts` to parse the [`process.argv`](https://nodejs.org/docs/latest/api/process.html#process_process_argv) array (the first two items are always `node` and the path to the script so we usually skip them). We'll also define aliases for each of our options, and set their default values.\n\n```js\n#!/usr/bin/env node\n\nconst getopts = require(\"getopts\")\n\nconst options = getopts(process.argv.slice(2), {\n  alias: {\n    help: \"h\",\n    length: \"l\",\n    digits: \"d\",\n    symbols: \"s\"\n  },\n  default: {\n    length: 16,\n    digits: true,\n    symbols: true\n  }\n})\n```\n\nWhat we get is an object mapping argument names to values. We'll use it to look up the value of an option by their name. This is what it looks like when `pwd` is invoked with `--no-symbols --length=12`:\n\n```js\n{\n  _: [],\n  symbols: false,\n  s: false,\n  length: 12,\n  l: 12,\n  digits: true,\n  d: true\n}\n```\n\nAnd to generate the password, here's what we're going to do:\n\n1. Print usage if `--help` is in the parsed options and exit.\n2. Initialize `CHARS` with all the possible password characters.\n3. Initialize an array of length `options.length`, where each item is a random character from `CHARS`.\n4. Join the result into a string and print it out.\n\n```js\nif (options.help) {\n  console.log(\"usage: pwd [-l|--length=N] [-d|--digits] [-s|--symbols]\")\n  process.exit(0)\n}\n\nconst CHARS =\n  \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n  (options.digits ? \"0123456789\" : \"\") +\n  (options.symbols ? \"!@#$%^&*()_+~`|}{[]:;?><,./-=\" : \"\")\n\nconst getRandom = list => list.charAt(Math.floor(Math.random() * list.length))\n\nprocess.stdout.write(\n  Array.from({ length: options.length }, () => getRandom(CHARS)).join(\"\") + \"\\n\"\n)\n```\n\nThat's it! Now you're ready to start working with Getopts on your own project. To learn more, continue to [Parsing Rules](#parsing-rules). Want to dig deeper? Head over to the [API docs](#api).\n\n## Parsing Rules\n\n### Short Options\n\nA short option consists of a dash `-` followed by a single alphabetic character. Multiple short options can be clustered together without spaces. Short options will be a boolean `true` unless followed by an [operand](#operand) or if adjacent to one or more non-alphabetic characters matching the regular expression <code>/[!-@[-`{-~][\\s\\s]\\*/</code>.\n\n```js\ngetopts([\"-ab\", \"-c\"]) //=> { _: [], a:true, b:true, c:true }\n```\n\n```js\ngetopts([\"-a\", \"alpha\"]) //=> { _: [], a:\"alpha\" }\n```\n\n```js\ngetopts([\"-abc1\"]) //=> { _: [], a:true, b:true, c:1 }\n```\n\nThe last character in a cluster of options can be parsed as a string or as a number depending on the argument that follows it. Any options preceding it will be `true`. You can use [`opts.string`](#optsstring) to specify if one or more options should be parsed as strings instead.\n\n```js\ngetopts([\"-abc-100\"], {\n  string: [\"b\"]\n}) //=> { _: [], a:true, b:\"c-100\" }\n```\n\nThe argument immediately following a short or a long option, which is not an option itself, will be parsed as the value of that option. You can use [`opts.boolean`](#optsboolean) to specify if one or more options should be parsed as booleans, causing any adjacent argument to be parsed as an operand instead.\n\n```js\ngetopts([\"-a\", \"alpha\"], {\n  boolean: [\"a\"]\n}) //=> { _: [\"alpha\"], a:true }\n```\n\nAny character listed in the ASCII table can be used as a short option if it's the first character after the dash.\n\n```js\ngetopts([\"-9\", \"-#10\", \"-%0.01\"]) //=> { _:[], 9:true, #:10, %:0.01 }\n```\n\n### Long Options\n\n- A long option consists of two dashes `--` followed by one or more characters. Any character listed in the ASCII table can be used to create a long option except the `=` symbol, which separates an option's name and value.\n\n  ```js\n  getopts([\"--turbo\", \"--warp=10\"]) //=> { _: [], turbo:true, warp:10 }\n  ```\n\n  ```js\n  getopts([\"--warp=e=mc^2\"]) //=> { _: [], warp:\"e=mc^2\" }\n  ```\n\n  ```js\n  getopts([\"----\", \"alpha\"]) //=> { _: [], --:\"alpha\" }\n  ```\n\n- Options can be negated if they are prefixed with the sequence `--no-`. Their value is always `false`.\n\n  ```js\n  getopts([\"--no-turbo\"]) //=> { _: [], turbo:false }\n  ```\n\n### Operands\n\n- Every argument after the first double-dash sequence `--` is saved to the operands array `_`.\n\n  ```js\n  getopts([\"--\", \"--alpha\", \"001\"]) //=> { _:[\"--alpha\", \"001\"] }\n  ```\n\n- Every non-option standalone argument is an operand.\n\n  ```js\n  getopts([\"alpha\", \"-w9\"]) //=> { _: [\"alpha\"], w:9 }\n  ```\n\n  ```js\n  getopts([\"--code=alpha\", \"beta\"]) //=> { _: [\"beta\"], code:\"alpha\" }\n  ```\n\n- A dash `-` is an operand.\n\n  ```js\n  getopts([\"--turbo\", \"-\"]) //=> { _:[\"-\"], turbo:true }\n  ```\n\n### Other\n\n- Options missing from the arguments array designated as a boolean or string type will be added to the result object as `false` and `\"\"` respectively.\n\n  ```js\n  getopts([], {\n    string: [\"a\"],\n    boolean: [\"b\"]\n  }) //=> { _:[], a:\"\", b:false }\n  ```\n\n* The string `\"false\"` is always cast to a boolean `false`.\n\n  ```js\n  getopts([\"--turbo=false\"]) //=> { _:[], turbo:false }\n  ```\n\n* Options that appear multiple times are parsed as an array that consists of every value in the order they are found.\n\n  ```js\n  getopts([\"-a?alpha=beta\", \"-aa0.1\"] //=> { _:[], a:[\"?alpha=beta\", true, 0.1] }\n  ```\n\n* A value may contain newlines or other control characters.\n\n  ```js\n  getopts([\"--text=top\\n\\tcenter\\bottom\"]) //=> { _:[], text:\"top\\n\\tcenter\\bottom\" }\n  ```\n\n## API\n\n### `getopts(argv, opts)`\n\nParse command line arguments. Expects an array of arguments, e.g., [`process.argv`](https://nodejs.org/docs/latest/api/process.html#process_process_argv), options configuration object, and returns an object mapping argument names to their values.\n\n### `argv`\n\nAn array of arguments.\n\n### `opts.alias`\n\nAn object of option aliases. An alias can be a string or an array of strings. Aliases let you declare substitute names for an option, e.g., the short (abbreviated) and long (canonical) variations.\n\n```js\ngetopts([\"-t\"], {\n  alias: {\n    turbo: [\"t\", \"T\"]\n  }\n}) //=> { _:[], t:true, T:true, turbo:true }\n```\n\n### `opts.boolean`\n\nAn array to indicate boolean options. In the next example, declaring `t` as boolean causes the next argument to be parsed as an operand and not as a value.\n\n```js\ngetopts([\"-t\", \"alpha\"], {\n  boolean: [\"t\"]\n}) //=> { _:[\"alpha\"], t:true }\n```\n\n### `opts.string`\n\nAn array to indicate string options. In the next example, by declaring `t` as a string, all adjacent characters are parsed as a single value and not as individual options.\n\n```js\ngetopts([\"-atabc\"], {\n  string: [\"t\"]\n}) //=> { _:[], a:true, t:\"abc\" }\n```\n\n### `opts.default`\n\nAn object of default values for options that are not present in the arguments array.\n\n```js\ngetopts([\"--warp=10\"], {\n  default: {\n    warp: 15,\n    turbo: true\n  }\n}) //=> { _:[], warp:10, turbo:true }\n```\n\n### `opts.unknown`\n\nA function that will be invoked for every unknown option. Return `false` to discard the option. Unknown options are those that appear in the arguments array, but are not present in `opts.string`, `opts.boolean`, `opts.default`, or `opts.alias`.\n\n```js\ngetopts([\"-abc\"], {\n  unknown: option => \"a\" === option\n}) //=> { _:[], a:true }\n```\n\n### `opts.stopEarly`\n\nA boolean property. If true, the operands array `_` will be populated with all the arguments after the first non-option.\n\n```js\ngetopts([\"-w9\", \"alpha\", \"--turbo\", \"beta\"], {\n  stopEarly: true\n}) //=> { _:[\"alpha\", \"--turbo\", \"beta\"], w:9 }\n```\n\nThis property is useful when implementing sub-commands in a CLI.\n\n```js\nconst { install, update, uninstall } = require(\"./commands\")\n\nconst options = getopts(process.argv.slice(2), {\n  stopEarly: true\n})\n\nconst [command, subargs] = options._\n\nif (command === \"install\") {\n  install(subargs)\n} else if (command === \"update\") {\n  update(subargs)\n} else if (command === \"uninstall\") {\n  uninstall(subargs)\n}\n```\n\n## Run the benchmarks\n\n```\nnpm i -C bench && node bench\n```\n\n<pre>\ngetopts × 1,769,415 ops/sec\nminimist × 314,240 ops/sec\nyargs × 33,179 ops/sec\n</pre>\n\n## License\n\n[MIT](LICENSE.md)\n",
    "licenseText": "Copyright © Jorge Bucaran <<https://jorgebucaran.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/getopts/-/getopts-2.2.5.tgz#67a0fe471cacb9c687d817cab6450b96dde8313b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/getopts/-/getopts-2.2.5.tgz",
    "hash": "67a0fe471cacb9c687d817cab6450b96dde8313b",
    "integrity": "sha512-9jb7AW5p3in+IiJWhQiZmmwkpLaR/ccTWdWQCtZM66HJcHHLegowh4q4tSD7gouUyeNvFWRavfK9GXosQHDpFA==",
    "registry": "npm",
    "packageName": "getopts",
    "cacheIntegrity": "sha512-9jb7AW5p3in+IiJWhQiZmmwkpLaR/ccTWdWQCtZM66HJcHHLegowh4q4tSD7gouUyeNvFWRavfK9GXosQHDpFA== sha1-Z6D+RxysucaH2BfKtkULlt3oMTs="
  },
  "registry": "npm",
  "hash": "67a0fe471cacb9c687d817cab6450b96dde8313b"
}