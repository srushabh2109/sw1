{
  "manifest": {
    "name": "react-dates",
    "version": "21.8.0",
    "description": "A responsive and accessible date range picker component built with React",
    "main": "index.js",
    "scripts": {
      "prebuild": "npm run clean",
      "build": "npm run build:cjs && npm run build:esm && npm run build:css -- --optimize ",
      "build:cjs": "BABEL_ENV=cjs babel src/ -d lib/",
      "build:esm": "BABEL_ENV=esm babel src/ -d esm/",
      "prebuild:css": "rimraf lib/css && mkdir -p lib/css",
      "build:css": "node scripts/buildCSS.js",
      "clean": "rimraf lib esm",
      "precover": "rimraf coverage && npm run react",
      "cover": "cross-env NODE_ENV=test node --max-old-space-size=4096 $(which nyc) npm run mocha",
      "lint": "eslint --ext .js,.jsx src test",
      "mocha": "mocha ./test/_helpers",
      "storybook:uninstall": "npm uninstall --no-save @storybook/react && rimraf node_modules/@storybook node_modules/react-modal node_modules/react-dom-factories",
      "react": "enzyme-adapter-react-install 16",
      "pretest": "npm run --silent lint",
      "pretests-only": "npm run react",
      "tests-only": "npm run mocha --silent",
      "pretests-karma": "npm run react",
      "tests-karma": "karma start",
      "test": "npm run build && npm run tests-only",
      "storybook": "start-storybook -p 6006",
      "storybook:css": "npm run build:css && start-storybook -p 6006 -c .storybook-css",
      "tag": "git tag v$npm_package_version",
      "gh-pages:clean": "rimraf _gh-pages",
      "gh-pages:build": "$(npm bin)/build-storybook -o _gh-pages",
      "gh-pages:publish": "$(npm bin)/git-directory-deploy --directory _gh-pages",
      "gh-pages": "npm run gh-pages:clean && npm run gh-pages:build && npm run gh-pages:publish",
      "version:patch": "npm --no-git-tag-version version patch",
      "version:minor": "npm --no-git-tag-version version minor",
      "version:major": "npm --no-git-tag-version version major",
      "preversion": "npm run test && npm run check-changelog && npm run check-only-changelog-changed",
      "postversion": "git commit package.json CHANGELOG.md -m \"Version $npm_package_version\" && npm run tag && git push && git push --tags && npm publish --registry=https://registry.npmjs.org/",
      "prepublish": "in-publish && safe-publish-latest && npm run build || not-in-publish",
      "postpublish": "[ \"${npm_config_tag:-latest}\" != latest ] || npm run gh-pages",
      "check-changelog": "expr $(git status --porcelain 2>/dev/null| grep \"^\\s*M.*CHANGELOG.md\" | wc -l) >/dev/null || (echo 'Please edit CHANGELOG.md' && exit 1)",
      "check-only-changelog-changed": "(expr $(git status --porcelain 2>/dev/null| grep -v \"CHANGELOG.md\" | wc -l) >/dev/null && echo 'Only CHANGELOG.md may have uncommitted changes' && exit 1) || exit 0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/airbnb/react-dates.git"
    },
    "author": {
      "name": "Maja Wichrowska",
      "email": "maja.wichrowska@airbnb.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/airbnb/react-dates/issues"
    },
    "homepage": "https://github.com/airbnb/react-dates#readme",
    "devDependencies": {
      "@babel/cli": "^7.5.5",
      "@babel/core": "^7.5.5",
      "@babel/register": "^7.5.5",
      "@babel/runtime": "^7.0.0",
      "@storybook/addon-actions": "^5.1.11",
      "@storybook/addon-info": "^5.1.11",
      "@storybook/addon-links": "^5.1.11",
      "@storybook/addon-options": "^5.1.11",
      "@storybook/addons": "^5.1.11",
      "@storybook/react": "^5.1.11",
      "@welldone-software/why-did-you-render": "^3.3.1",
      "airbnb-js-shims": "^2.2.0",
      "aphrodite": "^2.3.1",
      "babel-eslint": "^10.0.3",
      "babel-loader": "^8.0.6",
      "babel-plugin-inline-react-svg": "^1.1.0",
      "babel-plugin-inline-svg": "^1.0.1",
      "babel-plugin-istanbul": "^5.2.0",
      "babel-plugin-transform-replace-object-assign": "^2.0.0",
      "babel-preset-airbnb": "^4.0.1",
      "chai": "^4.2.0",
      "clean-css": "^4.2.1",
      "coveralls": "^3.0.6",
      "cross-env": "^5.2.0",
      "enzyme": "^3.10.0",
      "enzyme-adapter-react-helper": "^1.3.6",
      "eslint": "^6.2.1",
      "eslint-config-airbnb": "^18.0.1",
      "eslint-plugin-import": "^2.18.2",
      "eslint-plugin-jsx-a11y": "^6.2.3",
      "eslint-plugin-react": "^7.14.3",
      "eslint-plugin-react-hooks": "^1.7.0",
      "eslint-plugin-react-with-styles": "^2.2.0",
      "git-directory-deploy": "^1.5.1",
      "imports-loader": "^0.8.0",
      "in-publish": "^2.0.0",
      "karma": "^4.2.0",
      "karma-chai": "^0.1.0",
      "karma-firefox-launcher": "^1.2.0",
      "karma-mocha": "^1.3.0",
      "karma-sinon": "^1.0.5",
      "karma-webpack": "^4.0.2",
      "mocha": "^3.5.3",
      "mocha-wrap": "^2.1.2",
      "moment": "^2.24.0",
      "moment-jalaali": "^0.7.4",
      "node-sass": "^4.12.0",
      "nyc": "^14.1.1",
      "raw-loader": "^0.5.1",
      "react": "^0.14 || ^15.5.4 || ^16.1.1",
      "react-dom": "^0.14 || ^15.5.4 || ^16.1.1",
      "react-with-styles-interface-aphrodite": "^6.0.0",
      "react-with-styles-interface-css-compiler": "^2.2.0",
      "rimraf": "^2.6.3",
      "safe-publish-latest": "^1.1.3",
      "sass-loader": "^7.2.0",
      "sinon": "^7.4.1",
      "sinon-sandbox": "^2.0.5",
      "style-loader": "^0.20.3",
      "typescript": "*",
      "webpack": "^4.31.0"
    },
    "dependencies": {
      "airbnb-prop-types": "^2.15.0",
      "consolidated-events": "^1.1.1 || ^2.0.0",
      "enzyme-shallow-equal": "^1.0.0",
      "is-touch-device": "^1.0.1",
      "lodash": "^4.1.1",
      "object.assign": "^4.1.0",
      "object.values": "^1.1.0",
      "prop-types": "^15.7.2",
      "raf": "^3.4.1",
      "react-moment-proptypes": "^1.6.0",
      "react-outside-click-handler": "^1.2.4",
      "react-portal": "^4.2.0",
      "react-with-direction": "^1.3.1",
      "react-with-styles": "^4.1.0",
      "react-with-styles-interface-css": "^6.0.0"
    },
    "peerDependencies": {
      "@babel/runtime": "^7.0.0",
      "moment": "^2.18.1",
      "react": "^0.14 || ^15.5.4 || ^16.1.1",
      "react-dom": "^0.14 || ^15.5.4 || ^16.1.1",
      "react-with-direction": "^1.3.1"
    },
    "greenkeeper": {
      "ignore": [
        "mocha",
        "webpack"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-react-dates-21.8.0-355c3c7a243a7c29568fe00aca96231e171a5e94-integrity/node_modules/react-dates/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-dates <sup>[![Version Badge][npm-version-svg]][package-url]</sup>\n\n[![Build Status][travis-svg]][travis-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\n> An easily internationalizable, accessible, mobile-friendly datepicker library for the web.\n\n![react-dates in action](https://raw.githubusercontent.com/airbnb/react-dates/master/react-dates-demo.gif)\n\n## Live Playground\n\nFor examples of the datepicker in action, go to http://airbnb.io/react-dates.\n\nOR\n\nTo run that demo on your own computer:\n* Clone this repository\n* `npm install`\n* `npm run storybook`\n* Visit http://localhost:6006/\n\n## Getting Started\n### Install dependencies\nEnsure packages are installed with correct version numbers by running:\n  ```sh\n  (\n    export PKG=react-dates;\n    npm info \"$PKG\" peerDependencies --json | command sed 's/[\\{\\},]//g ; s/: /@/g; s/ *//g' | xargs npm install --save \"$PKG\"\n  )\n  ```\n\n  Which produces and runs a command like:\n\n  ```sh\n  npm install --save react-dates moment@>=#.## react@>=#.## react-dom@>=#.##\n  ```\n\n### Initialize\n```js\nimport 'react-dates/initialize';\n```\n\nAs of v13.0.0 of `react-dates`, this project relies on `react-with-styles`. If you want to continue using CSS stylesheets and classes, there is a little bit of extra set-up required to get things going. As such, you need to import `react-dates/initialize` to set up class names on our components. This import should go at the top of your application as you won't be able to import any `react-dates` components without it.\n\nNote: This component assumes `box-sizing: border-box` is set globally in your page's CSS.\n\n### Include component\n```js\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\n```\n\n#### Webpack\nUsing Webpack with CSS loader, add the following import to your app:\n```js\nimport 'react-dates/lib/css/_datepicker.css';\n```\n\n#### Without Webpack:\nCreate a CSS file with the contents of `require.resolve('react-dates/lib/css/_datepicker.css')` and include it in your html `<head>` section.\n\nTo see this in action, you can check out https://github.com/majapw/react-dates-demo which adds `react-dates` on top of a simple `create-react-app` setup.\n\n#### Overriding Base Class\nBy default `react-dates` will use `PureComponent` conditionally if it is available.  However, it is possible to override this setting and use `Component` and `shouldComponentUpdate` instead. It is also possible to override the logic in `build/util/baseClass` if you know that you are using a React version with `PureComponent`.\n  ```javascript\n    import React from 'react';\n    export default React.PureComponent;\n    export const pureComponentAvailable = true;\n  ```\n\n#### Overriding styles\nRight now, the easiest way to tweak `react-dates` to your heart's content is to create another stylesheet to override the default react-dates styles. For example, you could create a file named `react_dates_overrides.css` with the following contents (Make sure when you import said file to your `app.js`, you import it after the `react-dates` styles):\n\n```css\n// NOTE: the order of these styles DO matter\n\n// Will edit everything selected including everything between a range of dates\n.CalendarDay__selected_span {\n  background: #82e0aa; //background\n  color: white; //text\n  border: 1px solid $light-red; //default styles include a border\n}\n\n// Will edit selected date or the endpoints of a range of dates\n.CalendarDay__selected {\n  background: $dark-red;\n  color: white;\n}\n\n// Will edit when hovered over. _span style also has this property\n.CalendarDay__selected:hover {\n  background: orange;\n  color: white;\n}\n\n// Will edit when the second date (end date) in a range of dates\n// is not yet selected. Edits the dates between your mouse and said date\n.CalendarDay__hovered_span:hover,\n.CalendarDay__hovered_span {\n  background: brown;\n}\n```\n\nThis would override the background and text colors applied to highlighted calendar days. You can use this method with the default set-up to override any aspect of the calendar to have it better fit to your particular needs. If there are any styles that you need that aren't listed here, you can always check the source css of each element.\n\n### Make some awesome datepickers\n\nWe provide a handful of components for your use. If you supply essential props to each component, you'll get a full featured interactive date picker. With additional optional props, you can customize the look and feel of the inputs, calendar, etc. You can see what each of the props do in the [live demo](http://airbnb.io/react-dates/) or explore\nhow to properly wrap the pickers in the [examples folder](https://github.com/airbnb/react-dates/tree/master/examples).\n\n#### DateRangePicker\nThe `DateRangePicker` is a fully controlled component that allows users to select a date range. You can control the selected\ndates using the `startDate`, `endDate`, and `onDatesChange` props as shown below. The `DateRangePicker` also manages internal\nstate for partial dates entered by typing (although `onDatesChange` will not trigger until a date has been entered\ncompletely in that case). Similarly, you can control which input is focused as well as calendar visibility (the calendar is\nonly visible if `focusedInput` is defined) with the `focusedInput` and `onFocusChange` props as shown below.\n\nHere is the minimum *REQUIRED* setup you need to get the `DateRangePicker` working:\n```jsx\n<DateRangePicker\n  startDate={this.state.startDate} // momentPropTypes.momentObj or null,\n  startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\n  endDate={this.state.endDate} // momentPropTypes.momentObj or null,\n  endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\n  onDatesChange={({ startDate, endDate }) => this.setState({ startDate, endDate })} // PropTypes.func.isRequired,\n  focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n  onFocusChange={focusedInput => this.setState({ focusedInput })} // PropTypes.func.isRequired,\n/>\n```\n\nThe following is a list of other *OPTIONAL* props you may provide to the `DateRangePicker` to customize appearance and behavior to your heart's desire. All constants (indicated by `ALL_CAPS`) are provided as named exports in `react-dates/constants`. Please explore the [storybook](http://airbnb.io/react-dates/?selectedKind=DRP%20-%20Input%20Props&selectedStory=default&full=0&down=1&left=1&panelRight=0&downPanel=kadirahq%2Fstorybook-addon-actions%2Factions-panel) for more information on what each of these props do.\n```js\n// input related props\nstartDatePlaceholderText: PropTypes.string,\nendDatePlaceholderText: PropTypes.string,\nstartDateAriaLabel: PropTypes.string,\nendDateAriaLabel: PropTypes.string,\ndisabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf([START_DATE, END_DATE])]),\nrequired: PropTypes.bool,\nreadOnly: PropTypes.bool,\nscreenReaderInputMessage: PropTypes.string,\nshowClearDates: PropTypes.bool,\nshowDefaultInputIcon: PropTypes.bool,\ncustomInputIcon: PropTypes.node,\ncustomArrowIcon: PropTypes.node,\ncustomCloseIcon: PropTypes.node,\ninputIconPosition: PropTypes.oneOf([ICON_BEFORE_POSITION, ICON_AFTER_POSITION]),\nnoBorder: PropTypes.bool,\nblock: PropTypes.bool,\nsmall: PropTypes.bool,\nregular: PropTypes.bool,\n\n// calendar presentation and interaction related props\nrenderMonthText: mutuallyExclusiveProps(PropTypes.func, 'renderMonthText', 'renderMonthElement'), // (month) => PropTypes.string,\norientation: PropTypes.oneOf([HORIZONTAL_ORIENTATION, VERTICAL_ORIENTATION]),\nanchorDirection: PropTypes.oneOf([ANCHOR_LEFT, ANCHOR_RIGHT]),\nopenDirection: PropTypes.oneOf([OPEN_DOWN, OPEN_UP]),\nhorizontalMargin: PropTypes.number,\nwithPortal: PropTypes.bool,\nwithFullScreenPortal: PropTypes.bool,\nappendToBody: PropTypes.bool,\ndisableScroll: PropTypes.bool,\ndaySize: nonNegativeInteger,\nisRTL: PropTypes.bool,\ninitialVisibleMonth: PropTypes.func,\nfirstDayOfWeek: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6]),\nnumberOfMonths: PropTypes.number,\nkeepOpenOnDateSelect: PropTypes.bool,\nreopenPickerOnClearDates: PropTypes.bool,\nrenderCalendarInfo: PropTypes.func,\nrenderMonthElement: mutuallyExclusiveProps(PropTypes.func, 'renderMonthText', 'renderMonthElement'), PropTypes.func, // ({ month, onMonthSelect, onYearSelect, isVisible }) => PropTypes.node,\nhideKeyboardShortcutsPanel: PropTypes.bool,\n\n// navigation related props\nnavPrev: PropTypes.node,\nnavNext: PropTypes.node,\nonPrevMonthClick: PropTypes.func,\nonNextMonthClick: PropTypes.func,\nonClose: PropTypes.func,\ntransitionDuration: nonNegativeInteger, // milliseconds\n\n// day presentation and interaction related props\nrenderCalendarDay: PropTypes.func,\nrenderDayContents: PropTypes.func,\nminimumNights: PropTypes.number,\nminDate: momentPropTypes.momentObj,\nmaxDate: momentPropTypes.momentObj,\nenableOutsideDays: PropTypes.bool,\nisDayBlocked: PropTypes.func,\nisOutsideRange: PropTypes.func,\nisDayHighlighted: PropTypes.func,\n\n// internationalization props\ndisplayFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\nmonthFormat: PropTypes.string,\nweekDayFormat: PropTypes.string,\nphrases: PropTypes.shape(getPhrasePropTypes(DateRangePickerPhrases)),\ndayAriaLabelFormat: PropTypes.string,\n```\n\n#### SingleDatePicker\nThe `SingleDatePicker` is a fully controlled component that allows users to select a single date. You can control the selected\ndate using the `date` and `onDateChange` props as shown below. The `SingleDatePicker` also manages internal\nstate for partial dates entered by typing (although `onDateChange` will not trigger until a date has been entered\ncompletely in that case). Similarly, you can control whether or not the input is focused (calendar visibility is also\ncontrolled with the same props) with the `focused` and `onFocusChange` props as shown below.\n\nHere is the minimum *REQUIRED* setup you need to get the `SingleDatePicker` working:\n```jsx\n<SingleDatePicker\n  date={this.state.date} // momentPropTypes.momentObj or null\n  onDateChange={date => this.setState({ date })} // PropTypes.func.isRequired\n  focused={this.state.focused} // PropTypes.bool\n  onFocusChange={({ focused }) => this.setState({ focused })} // PropTypes.func.isRequired\n  id=\"your_unique_id\" // PropTypes.string.isRequired,\n/>\n```\n\nThe following is a list of other *OPTIONAL* props you may provide to the `SingleDatePicker` to customize appearance and behavior to your heart's desire. All constants (indicated by `ALL_CAPS`) are provided as named exports in `react-dates/constants`. Please explore the [storybook](http://airbnb.io/react-dates/?selectedKind=SDP%20-%20Input%20Props&selectedStory=default&full=0&down=1&left=1&panelRight=0&downPanel=kadirahq%2Fstorybook-addon-actions%2Factions-panel) for more information on what each of these props do.\n```js\n// input related props\nplaceholder: PropTypes.string,\nariaLabel: PropTypes.string,\ndisabled: PropTypes.bool,\nrequired: PropTypes.bool,\nreadOnly: PropTypes.bool,\nscreenReaderInputMessage: PropTypes.string,\nshowClearDate: PropTypes.bool,\ncustomCloseIcon: PropTypes.node,\nshowDefaultInputIcon: PropTypes.bool,\ncustomInputIcon: PropTypes.node,\ninputIconPosition: PropTypes.oneOf([ICON_BEFORE_POSITION, ICON_AFTER_POSITION]),\nnoBorder: PropTypes.bool,\nblock: PropTypes.bool,\nsmall: PropTypes.bool,\nregular: PropTypes.bool,\n\n// calendar presentation and interaction related props\nrenderMonthText: mutuallyExclusiveProps(PropTypes.func, 'renderMonthText', 'renderMonthElement'), // (month) => PropTypes.string,\norientation: PropTypes.oneOf([HORIZONTAL_ORIENTATION, VERTICAL_ORIENTATION]),\nanchorDirection: PropTypes.oneOf([ANCHOR_LEFT, ANCHOR_RIGHT]),\nopenDirection: PropTypes.oneOf([OPEN_DOWN, OPEN_UP]),\nhorizontalMargin: PropTypes.number,\nwithPortal: PropTypes.bool,\nwithFullScreenPortal: PropTypes.bool,\nappendToBody: PropTypes.bool,\ndisableScroll: PropTypes.bool,\ninitialVisibleMonth: PropTypes.func,\nfirstDayOfWeek: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6]),\nnumberOfMonths: PropTypes.number,\nkeepOpenOnDateSelect: PropTypes.bool,\nreopenPickerOnClearDate: PropTypes.bool,\nrenderCalendarInfo: PropTypes.func,\nrenderMonthElement: mutuallyExclusiveProps(PropTypes.func, 'renderMonthText', 'renderMonthElement'), // ({ month, onMonthSelect, onYearSelect, isVisible }) => PropTypes.node,\nhideKeyboardShortcutsPanel: PropTypes.bool,\ndaySize: nonNegativeInteger,\nisRTL: PropTypes.bool,\n\n// navigation related props\nnavPrev: PropTypes.node,\nnavNext: PropTypes.node,\nonPrevMonthClick: PropTypes.func,\nonNextMonthClick: PropTypes.func,\nonClose: PropTypes.func,\ntransitionDuration: nonNegativeInteger, // milliseconds\n\n// day presentation and interaction related props\nrenderCalendarDay: PropTypes.func,\nrenderDayContents: PropTypes.func,\nenableOutsideDays: PropTypes.bool,\nisDayBlocked: PropTypes.func,\nisOutsideRange: PropTypes.func,\nisDayHighlighted: PropTypes.func,\n\n// internationalization props\ndisplayFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\nmonthFormat: PropTypes.string,\nweekDayFormat: PropTypes.string,\nphrases: PropTypes.shape(getPhrasePropTypes(SingleDatePickerPhrases)),\ndayAriaLabelFormat: PropTypes.string,\n```\n\n#### DayPickerRangeController\nThe `DayPickerRangeController` is a calendar-only version of the `DateRangePicker`. There are no inputs (which also means\nthat currently, it is not keyboard accessible) and the calendar is always visible, but you can select a date range much in the same way you would with the `DateRangePicker`. You can control the selected\ndates using the `startDate`, `endDate`, and `onDatesChange` props as shown below. Similarly, you can control which input is focused with the `focusedInput` and `onFocusChange` props as shown below. The user will only be able to select a date if `focusedInput` is provided.\n\nHere is the minimum *REQUIRED* setup you need to get the `DayPickerRangeController` working:\n```jsx\n<DayPickerRangeController\n  startDate={this.state.startDate} // momentPropTypes.momentObj or null,\n  endDate={this.state.endDate} // momentPropTypes.momentObj or null,\n  onDatesChange={({ startDate, endDate }) => this.setState({ startDate, endDate })} // PropTypes.func.isRequired,\n  focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n  onFocusChange={focusedInput => this.setState({ focusedInput })} // PropTypes.func.isRequired,\n  initialVisibleMonth={() => moment().add(2, \"M\")} // PropTypes.func or null,\n/>\n```\n\nThe following is a list of other *OPTIONAL* props you may provide to the `DayPickerRangeController` to customize appearance and behavior to your heart's desire. Again, please explore the [storybook](http://airbnb.io/react-dates/?selectedKind=DayPickerRangeController&selectedStory=default&full=0&down=1&left=1&panelRight=0&downPanel=kadirahq%2Fstorybook-addon-actions%2Factions-panel) for more information on what each of these props do.\n```js\n  // calendar presentation and interaction related props\n  enableOutsideDays: PropTypes.bool,\n  numberOfMonths: PropTypes.number,\n  orientation: ScrollableOrientationShape,\n  withPortal: PropTypes.bool,\n  initialVisibleMonth: PropTypes.func,\n  renderCalendarInfo: PropTypes.func,\n  renderMonthElement: mutuallyExclusiveProps(PropTypes.func, 'renderMonthText', 'renderMonthElement'), // ({ month, onMonthSelect, onYearSelect, isVisible }) => PropTypes.node,\n  onOutsideClick: PropTypes.func,\n  keepOpenOnDateSelect: PropTypes.bool,\n  noBorder: PropTypes.bool,\n\n  // navigation related props\n  navPrev: PropTypes.node,\n  navNext: PropTypes.node,\n  onPrevMonthClick: PropTypes.func,\n  onNextMonthClick: PropTypes.func,\n  transitionDuration: nonNegativeInteger, // milliseconds\n\n  // day presentation and interaction related props\n  renderCalendarDay: PropTypes.func,\n  renderDayContents: PropTypes.func,\n  minimumNights: PropTypes.number,\n  isOutsideRange: PropTypes.func,\n  isDayBlocked: PropTypes.func,\n  isDayHighlighted: PropTypes.func,\n\n  // internationalization props\n  monthFormat: PropTypes.string,\n  weekDayFormat: PropTypes.string,\n  phrases: PropTypes.shape(getPhrasePropTypes(DayPickerPhrases)),\n  dayAriaLabelFormat: PropTypes.string,\n/>\n```\n\n## Localization\n\n[Moment.js](http://momentjs.com) is a peer dependency of `react-dates`. The latter then uses a single instance of `moment` which is imported in one’s project. Loading a locale is done by calling `moment.locale(..)` in the component where `moment` is imported, with the [locale key](http://momentjs.com/docs/#/i18n/) of choice. For instance:\n\n```js\nmoment.locale('pl'); // Polish\n```\n\nHowever, this only solves date localization. For complete internationalization of the components, `react-dates` defines a certain amount of [user interface strings](https://github.com/airbnb/react-dates/blob/master/src/defaultPhrases.js) in English which can be changed through the `phrases` prop (explore the [storybook](http://airbnb.io/react-dates/?selectedKind=DateRangePicker%20%28DRP%29&selectedStory=non-english%20locale&full=0&addons=1&stories=1&panelRight=0&addonPanel=kadirahq%2Fstorybook-addon-actions%2Factions-panel) for examples). For accessibility and usability concerns, **all these UI elements should be translated**.\n\n## Advanced\n\n`react-dates` no longer relies strictly on CSS, but rather relies on `react-with-styles` as an abstraction layer between how styles are applied and how they are written. The instructions above will get the project working out of the box, but there's a lot more customization that can be done.\n\n### Interfaces\n\nThe `react-dates/initialize` script actually relies on [react-with-styles-interface-css](https://github.com/airbnb/react-with-styles-interface-css) under the hood. If you are interested in a different solution for styling in your project, you can do your own initialization of a another [interface](https://github.com/airbnb/react-with-styles/blob/master/README.md#interfaces). At Airbnb, for instance, we rely on [Aphrodite](https://github.com/Khan/aphrodite) under the hood and therefore use the Aphrodite interface for `react-with-styles`. If you want to do the same, you would use the following pattern:\n```js\nimport ThemedStyleSheet from 'react-with-styles/lib/ThemedStyleSheet';\nimport aphroditeInterface from 'react-with-styles-interface-aphrodite';\nimport DefaultTheme from 'react-dates/lib/theme/DefaultTheme';\n\nThemedStyleSheet.registerInterface(aphroditeInterface);\nThemedStyleSheet.registerTheme(DefaultTheme);\n```\n\nThe above code has to be run before any `react-dates` component is imported. Otherwise, you will get an error. Also note that if you register any custom interface manually, you *must* also manually register a theme.\n\n### Theming\n`react-dates` also now supports a different way to theme. You can see the default theme values in [this file](https://github.com/airbnb/react-dates/blob/master/src/theme/DefaultTheme.js) and you would override them in the following manner:\n```js\nimport ThemedStyleSheet from 'react-with-styles/lib/ThemedStyleSheet';\nimport aphroditeInterface from 'react-with-styles-interface-aphrodite';\nimport DefaultTheme from 'react-dates/lib/theme/DefaultTheme';\n\nThemedStyleSheet.registerInterface(aphroditeInterface);\nThemedStyleSheet.registerTheme({\n  reactDates: {\n    ...DefaultTheme.reactDates,\n    color: {\n      ...DefaultTheme.reactDates.color,\n      highlighted: {\n        backgroundColor: '#82E0AA',\n        backgroundColor_active: '#58D68D',\n        backgroundColor_hover: '#58D68D',\n        color: '#186A3B',\n        color_active: '#186A3B',\n        color_hover: '#186A3B',\n      },\n    },\n  },\n});\n```\n\nThe above code would use shades of green instead of shades of yellow for the highlight color on `CalendarDay` components. Note that you *must* register an interface if you manually register a theme. One will not work without the other.\n\n#### A note on using `react-with-styles-interface-css`\nThe default interface that `react-dates` ships with is the [CSS interface](https://github.com/airbnb/react-with-styles-interface-css). If you want to use this interface along with the theme registration method, you will need to rebuild the core `_datepicker.css` file. We do not currently expose a utility method to build this file, but you can follow along with the code in https://github.com/airbnb/react-dates/blob/master/scripts/buildCSS.js to build your own custom themed CSS file.\n\n[package-url]: https://npmjs.org/package/react-dates\n[npm-version-svg]: http://versionbadg.es/airbnb/react-dates.svg\n[travis-svg]: https://travis-ci.org/airbnb/react-dates.svg\n[travis-url]: https://travis-ci.org/airbnb/react-dates\n[deps-svg]: https://david-dm.org/airbnb/react-dates.svg\n[deps-url]: https://david-dm.org/airbnb/react-dates\n[dev-deps-svg]: https://david-dm.org/airbnb/react-dates/dev-status.svg\n[dev-deps-url]: https://david-dm.org/airbnb/react-dates#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/react-dates.png?downloads=true&stars=true\n[license-image]: http://img.shields.io/npm/l/react-dates.svg\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/react-dates.svg\n[downloads-url]: http://npm-stat.com/charts.html?package=react-dates\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Airbnb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-dates/-/react-dates-21.8.0.tgz#355c3c7a243a7c29568fe00aca96231e171a5e94",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-dates/-/react-dates-21.8.0.tgz",
    "hash": "355c3c7a243a7c29568fe00aca96231e171a5e94",
    "integrity": "sha512-PPriGqi30CtzZmoHiGdhlA++YPYPYGCZrhydYmXXQ6RAvAsaONcPtYgXRTLozIOrsQ5mSo40+DiA5eOFHnZ6xw==",
    "registry": "npm",
    "packageName": "react-dates",
    "cacheIntegrity": "sha512-PPriGqi30CtzZmoHiGdhlA++YPYPYGCZrhydYmXXQ6RAvAsaONcPtYgXRTLozIOrsQ5mSo40+DiA5eOFHnZ6xw== sha1-NVw8eiQ6fClWj+AKypYjHhcaXpQ="
  },
  "registry": "npm",
  "hash": "355c3c7a243a7c29568fe00aca96231e171a5e94"
}