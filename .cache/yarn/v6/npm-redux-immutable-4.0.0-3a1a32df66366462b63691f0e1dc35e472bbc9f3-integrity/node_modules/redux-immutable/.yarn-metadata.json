{
  "manifest": {
    "name": "redux-immutable",
    "description": "redux-immutable is used to create an equivalent function of Redux combineReducers that works with Immutable.js state.",
    "main": "./dist/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/gajus/redux-immutable"
    },
    "keywords": [
      "immutable",
      "redux"
    ],
    "version": "4.0.0",
    "author": {
      "name": "Gajus Kuizinas",
      "email": "gajus@anuary.com",
      "url": "http://gajus.com"
    },
    "license": "BSD-3-Clause",
    "peerDependencies": {
      "immutable": "^3.8.1 || ^4.0.0-rc.1"
    },
    "devDependencies": {
      "babel-cli": "^6.18.0",
      "babel-plugin-add-module-exports": "^0.2.1",
      "babel-plugin-flow-runtime": "0.0.6",
      "babel-plugin-syntax-flow": "^6.18.0",
      "babel-plugin-transform-flow-strip-types": "^6.21.0",
      "babel-preset-es2015": "^6.18.0",
      "babel-preset-stage-0": "^6.16.0",
      "babel-register": "^6.18.0",
      "benchmark": "^2.1.3",
      "chai": "^3.5.0",
      "eslint": "^3.13.1",
      "eslint-config-canonical": "^6.0.0",
      "flow-runtime": "0.0.6",
      "husky": "^0.12.0",
      "immutable": "^3.8.1 || ^4.0.0-rc.1",
      "mocha": "^3.2.0",
      "semantic-release": "^6.3.2"
    },
    "scripts": {
      "lint": "eslint ./src ./tests",
      "test": "mocha --compilers js:babel-register './tests/**/*.js'",
      "build": "babel ./src --source-maps --out-dir ./dist",
      "benchmark": "NODE_ENV=production node ./benchmarks/index.js",
      "precommit": "npm run lint && npm run test"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-redux-immutable-4.0.0-3a1a32df66366462b63691f0e1dc35e472bbc9f3-integrity/node_modules/redux-immutable/package.json",
    "readmeFilename": "README.md",
    "readme": "# `redux-immutable`\n\n[![Travis build status](http://img.shields.io/travis/gajus/redux-immutable/master.svg?style=flat-square)](https://travis-ci.org/gajus/redux-immutable)\n[![NPM version](http://img.shields.io/npm/v/redux-immutable.svg?style=flat-square)](https://www.npmjs.org/package/redux-immutable)\n[![Canonical Code Style](https://img.shields.io/badge/code%20style-canonical-blue.svg?style=flat-square)](https://github.com/gajus/canonical)\n\n`redux-immutable` is used to create an equivalent function of Redux [`combineReducers`](http://redux.js.org/docs/api/combineReducers.html) that works with [Immutable.js](https://facebook.github.io/immutable-js/) state.\n\nWhen Redux [`createStore`](https://github.com/reactjs/redux/blob/master/docs/api/createStore.md) `reducer` is created using `redux-immutable` then `initialState` must be an instance of [`Immutable.Collection`](https://facebook.github.io/immutable-js/docs/#/Collection).\n\n## Problem\n\nWhen [`createStore`](https://github.com/reactjs/redux/blob/v3.0.6/docs/api/createStore.md) is invoked with `initialState` that is an instance of `Immutable.Collection` further invocation of reducer will [produce an error](https://github.com/reactjs/redux/blob/v3.0.6/src/combineReducers.js#L31-L38):\n\n> The initialState argument passed to createStore has unexpected type of \"Object\".\n> Expected argument to be an object with the following keys: \"data\"\n\nThis is because Redux `combineReducers` [treats `state` object as a plain JavaScript object](https://github.com/reactjs/redux/blob/v3.0.6/src/combineReducers.js#L120-L129).\n\n`combineReducers` created using `redux-immutable` uses Immutable.js API to iterate the state.\n\n## Usage\n\nCreate a store with `initialState` set to an instance of [`Immutable.Collection`](https://facebook.github.io/immutable-js/docs/#/Collection):\n\n```js\nimport {\n  combineReducers\n} from 'redux-immutable';\n\nimport {\n  createStore\n} from 'redux';\n\nconst initialState = Immutable.Map();\nconst rootReducer = combineReducers({});\nconst store = createStore(rootReducer, initialState);\n```\n\nBy default, if `state` is `undefined`, `rootReducer(state, action)` is called with `state = Immutable.Map()`. A different default function can be provided as the second parameter to `combineReducers(reducers, getDefaultState)`, for example:\n\n```js\nconst StateRecord = Immutable.Record({\n\tfoo: 'bar'\n});\nconst rootReducer = combineReducers({foo: fooReducer}, StateRecord);\n// rootReducer now has signature of rootReducer(state = StateRecord(), action)\n// state now must always have 'foo' property with 'bar' as its default value\n```\n\nWhen using `Immutable.Record` it is possible to delegate default values to child reducers:\n\n```js\nconst StateRecord = Immutable.Record({\n\tfoo: undefined\n});\nconst rootReducer = combineReducers({foo: fooReducer}, StateRecord);\n// state now must always have 'foo' property with its default value returned from fooReducer(undefined, action)\n```\n\nIn general, `getDefaultState` function must return an instance of `Immutable.Record` or `Immutable.Collection` that implements `get`, `set` and `withMutations` methods. Such collections are `List`, `Map` and `OrderedMap`.\n\n### Using with `react-router-redux`\n\n`react-router-redux` [`routeReducer`](https://github.com/reactjs/react-router-redux/tree/v4.0.2#routerreducer) does not work with Immutable.js. You need to use a custom reducer:\n\n```js\nimport Immutable from 'immutable';\nimport {\n  LOCATION_CHANGE\n} from 'react-router-redux';\n\nconst initialState = Immutable.fromJS({\n  locationBeforeTransitions: null\n});\n\nexport default (state = initialState, action) => {\n  if (action.type === LOCATION_CHANGE) {\n    return state.set('locationBeforeTransitions', action.payload);\n  }\n\n  return state;\n};\n```\n\nPass a selector to access the payload state and convert it to a JavaScript object via the [`selectLocationState` option on `syncHistoryWithStore`](https://github.com/reactjs/react-router-redux/tree/v4.0.2#history--synchistorywithstorehistory-store-options):\n\n```js\nimport {\n  browserHistory\n} from 'react-router';\nimport {\n  syncHistoryWithStore\n} from 'react-router-redux';\n\nconst history = syncHistoryWithStore(browserHistory, store, {\n  selectLocationState (state) {\n      return state.get('routing').toJS();\n  }\n});\n```\n\nThe `'routing'` path depends on the `rootReducer` definition. This example assumes that `routeReducer` is made available under `routing` property of the `rootReducer`.\n",
    "licenseText": "Copyright (c) 2016, Gajus Kuizinas (http://gajus.com/)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the Gajus Kuizinas (http://gajus.com/) nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ANUARY BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/redux-immutable/-/redux-immutable-4.0.0.tgz#3a1a32df66366462b63691f0e1dc35e472bbc9f3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/redux-immutable/-/redux-immutable-4.0.0.tgz",
    "hash": "3a1a32df66366462b63691f0e1dc35e472bbc9f3",
    "integrity": "sha1-Ohoy32Y2ZGK2NpHw4dw15HK7yfM=",
    "registry": "npm",
    "packageName": "redux-immutable",
    "cacheIntegrity": "sha512-SchSn/DWfGb3oAejd+1hhHx01xUoxY+V7TeK0BKqpkLKiQPVFf7DYzEaKmrEVxsWxielKfSK9/Xq66YyxgR1cg== sha1-Ohoy32Y2ZGK2NpHw4dw15HK7yfM="
  },
  "registry": "npm",
  "hash": "3a1a32df66366462b63691f0e1dc35e472bbc9f3"
}