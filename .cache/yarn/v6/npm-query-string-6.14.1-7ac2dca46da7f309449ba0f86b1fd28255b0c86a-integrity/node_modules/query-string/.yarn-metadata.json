{
  "manifest": {
    "name": "query-string",
    "version": "6.14.1",
    "description": "Parse and stringify URL query strings",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/query-string.git"
    },
    "funding": "https://github.com/sponsors/sindresorhus",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "engines": {
      "node": ">=6"
    },
    "scripts": {
      "benchmark": "node benchmark.js",
      "test": "xo && ava && tsd"
    },
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "browser",
      "querystring",
      "query",
      "string",
      "qs",
      "param",
      "parameter",
      "url",
      "parse",
      "stringify",
      "encode",
      "decode",
      "searchparams",
      "filter"
    ],
    "dependencies": {
      "decode-uri-component": "^0.2.0",
      "filter-obj": "^1.1.0",
      "split-on-first": "^1.0.0",
      "strict-uri-encode": "^2.0.0"
    },
    "devDependencies": {
      "ava": "^1.4.1",
      "benchmark": "^2.1.4",
      "deep-equal": "^1.0.1",
      "fast-check": "^1.5.0",
      "tsd": "^0.7.3",
      "xo": "^0.24.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-query-string-6.14.1-7ac2dca46da7f309449ba0f86b1fd28255b0c86a-integrity/node_modules/query-string/package.json",
    "readmeFilename": "readme.md",
    "readme": "# query-string\n\n> Parse and stringify URL [query strings](https://en.wikipedia.org/wiki/Query_string)\n\n<br>\n\n---\n\n<div align=\"center\">\n\t<p>\n\t\t<p>\n\t\t\t<sup>\n\t\t\t\t<a href=\"https://github.com/sponsors/sindresorhus\">My open source work is supported by the community</a>\n\t\t\t</sup>\n\t\t</p>\n\t\t<sup>Special thanks to:</sup>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://standardresume.co/tech\">\n\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/standard-resume-logo.svg\" width=\"200\"/>\n\t\t</a>\n\t</p>\n</div>\n\n---\n\n<br>\n\n## Install\n\n```\n$ npm install query-string\n```\n\nThis module targets Node.js 6 or later and the latest version of Chrome, Firefox, and Safari. If you want support for older browsers, or, if your project is using create-react-app v1, use version 5: `npm install query-string@5`.\n\n## Usage\n\n```js\nconst queryString = require('query-string');\n\nconsole.log(location.search);\n//=> '?foo=bar'\n\nconst parsed = queryString.parse(location.search);\nconsole.log(parsed);\n//=> {foo: 'bar'}\n\nconsole.log(location.hash);\n//=> '#token=bada55cafe'\n\nconst parsedHash = queryString.parse(location.hash);\nconsole.log(parsedHash);\n//=> {token: 'bada55cafe'}\n\nparsed.foo = 'unicorn';\nparsed.ilike = 'pizza';\n\nconst stringified = queryString.stringify(parsed);\n//=> 'foo=unicorn&ilike=pizza'\n\nlocation.search = stringified;\n// note that `location.search` automatically prepends a question mark\nconsole.log(location.search);\n//=> '?foo=unicorn&ilike=pizza'\n```\n\n## API\n\n### .parse(string, options?)\n\nParse a query string into an object. Leading `?` or `#` are ignored, so you can pass `location.search` or `location.hash` directly.\n\nThe returned object is created with [`Object.create(null)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) and thus does not have a `prototype`.\n\n#### options\n\nType: `object`\n\n##### decode\n\nType: `boolean`\\\nDefault: `true`\n\nDecode the keys and values. URL components are decoded with [`decode-uri-component`](https://github.com/SamVerschueren/decode-uri-component).\n\n##### arrayFormat\n\nType: `string`\\\nDefault: `'none'`\n\n- `'bracket'`: Parse arrays with bracket representation:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo[]=1&foo[]=2&foo[]=3', {arrayFormat: 'bracket'});\n//=> {foo: ['1', '2', '3']}\n```\n\n- `'index'`: Parse arrays with index representation:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo[0]=1&foo[1]=2&foo[3]=3', {arrayFormat: 'index'});\n//=> {foo: ['1', '2', '3']}\n```\n\n- `'comma'`: Parse arrays with elements separated by comma:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo=1,2,3', {arrayFormat: 'comma'});\n//=> {foo: ['1', '2', '3']}\n```\n\n- `'separator'`: Parse arrays with elements separated by a custom character:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo=1|2|3', {arrayFormat: 'separator', arrayFormatSeparator: '|'});\n//=> {foo: ['1', '2', '3']}\n```\n\n- `'none'`: Parse arrays with elements using duplicate keys:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo=1&foo=2&foo=3');\n//=> {foo: ['1', '2', '3']}\n```\n\n##### arrayFormatSeparator\n\nType: `string`\\\nDefault: `','`\n\nThe character used to separate array elements when using `{arrayFormat: 'separator'}`.\n\n##### sort\n\nType: `Function | boolean`\\\nDefault: `true`\n\nSupports both `Function` as a custom sorting function or `false` to disable sorting.\n\n##### parseNumbers\n\nType: `boolean`\\\nDefault: `false`\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo=1', {parseNumbers: true});\n//=> {foo: 1}\n```\n\nParse the value as a number type instead of string type if it's a number.\n\n##### parseBooleans\n\nType: `boolean`\\\nDefault: `false`\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('foo=true', {parseBooleans: true});\n//=> {foo: true}\n```\n\nParse the value as a boolean type instead of string type if it's a boolean.\n\n### .stringify(object, options?)\n\nStringify an object into a query string and sorting the keys.\n\n#### options\n\nType: `object`\n\n##### strict\n\nType: `boolean`\\\nDefault: `true`\n\nStrictly encode URI components with [strict-uri-encode](https://github.com/kevva/strict-uri-encode). It uses [encodeURIComponent](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) if set to false. You probably [don't care](https://github.com/sindresorhus/query-string/issues/42) about this option.\n\n##### encode\n\nType: `boolean`\\\nDefault: `true`\n\n[URL encode](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) the keys and values.\n\n##### arrayFormat\n\nType: `string`\\\nDefault: `'none'`\n\n- `'bracket'`: Serialize arrays using bracket representation:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: [1, 2, 3]}, {arrayFormat: 'bracket'});\n//=> 'foo[]=1&foo[]=2&foo[]=3'\n```\n\n- `'index'`: Serialize arrays using index representation:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: [1, 2, 3]}, {arrayFormat: 'index'});\n//=> 'foo[0]=1&foo[1]=2&foo[2]=3'\n```\n\n- `'comma'`: Serialize arrays by separating elements with comma:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: [1, 2, 3]}, {arrayFormat: 'comma'});\n//=> 'foo=1,2,3'\n```\n\n- `'none'`: Serialize arrays by using duplicate keys:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: [1, 2, 3]});\n//=> 'foo=1&foo=2&foo=3'\n```\n\n##### arrayFormatSeparator\n\nType: `string`\\\nDefault: `','`\n\nThe character used to separate array elements when using `{arrayFormat: 'separator'}`.\n\n##### sort\n\nType: `Function | boolean`\n\nSupports both `Function` as a custom sorting function or `false` to disable sorting.\n\n```js\nconst queryString = require('query-string');\n\nconst order = ['c', 'a', 'b'];\n\nqueryString.stringify({a: 1, b: 2, c: 3}, {\n\tsort: (a, b) => order.indexOf(a) - order.indexOf(b)\n});\n//=> 'c=3&a=1&b=2'\n```\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({b: 1, c: 2, a: 3}, {sort: false});\n//=> 'b=1&c=2&a=3'\n```\n\nIf omitted, keys are sorted using `Array#sort()`, which means, converting them to strings and comparing strings in Unicode code point order.\n\n##### skipNull\n\nSkip keys with `null` as the value.\n\nNote that keys with `undefined` as the value are always skipped.\n\nType: `boolean`\\\nDefault: `false`\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({a: 1, b: undefined, c: null, d: 4}, {\n\tskipNull: true\n});\n//=> 'a=1&d=4'\n```\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({a: undefined, b: null}, {\n\tskipNull: true\n});\n//=> ''\n```\n\n##### skipEmptyString\n\nSkip keys with an empty string as the value.\n\nType: `boolean`\\\nDefault: `false`\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({a: 1, b: '', c: '', d: 4}, {\n\tskipEmptyString: true\n});\n//=> 'a=1&d=4'\n```\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({a: '', b: ''}, {\n\tskipEmptyString: true\n});\n//=> ''\n```\n\n### .extract(string)\n\nExtract a query string from a URL that can be passed into `.parse()`.\n\nNote: This behaviour can be changed with the `skipNull` option.\n\n### .parseUrl(string, options?)\n\nExtract the URL and the query string as an object.\n\nReturns an object with a `url` and `query` property.\n\nIf the `parseFragmentIdentifier` option is `true`, the object will also contain a `fragmentIdentifier` property.\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parseUrl('https://foo.bar?foo=bar');\n//=> {url: 'https://foo.bar', query: {foo: 'bar'}}\n\nqueryString.parseUrl('https://foo.bar?foo=bar#xyz', {parseFragmentIdentifier: true});\n//=> {url: 'https://foo.bar', query: {foo: 'bar'}, fragmentIdentifier: 'xyz'}\n```\n\n#### options\n\nType: `object`\n\nThe options are the same as for `.parse()`.\n\nExtra options are as below.\n\n##### parseFragmentIdentifier\n\nParse the fragment identifier from the URL.\n\nType: `boolean`\\\nDefault: `false`\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parseUrl('https://foo.bar?foo=bar#xyz', {parseFragmentIdentifier: true});\n//=> {url: 'https://foo.bar', query: {foo: 'bar'}, fragmentIdentifier: 'xyz'}\n```\n\n### .stringifyUrl(object, options?)\n\nStringify an object into a URL with a query string and sorting the keys. The inverse of [`.parseUrl()`](https://github.com/sindresorhus/query-string#parseurlstring-options)\n\nThe `options` are the same as for `.stringify()`.\n\nReturns a string with the URL and a query string.\n\nQuery items in the `query` property overrides queries in the `url` property.\n\nThe `fragmentIdentifier` property overrides the fragment identifier in the `url` property.\n\n```js\nqueryString.stringifyUrl({url: 'https://foo.bar', query: {foo: 'bar'}});\n//=> 'https://foo.bar?foo=bar'\n\nqueryString.stringifyUrl({url: 'https://foo.bar?foo=baz', query: {foo: 'bar'}});\n//=> 'https://foo.bar?foo=bar'\n\nqueryString.stringifyUrl({\n\turl: 'https://foo.bar',\n\tquery: {\n\t\ttop: 'foo'\n\t},\n\tfragmentIdentifier: 'bar'\n});\n//=> 'https://foo.bar?top=foo#bar'\n```\n\n#### object\n\nType: `object`\n\n##### url\n\nType: `string`\n\nThe URL to stringify.\n\n##### query\n\nType: `object`\n\nQuery items to add to the URL.\n\n### .pick(url, keys, options?)\n### .pick(url, filter, options?)\n\nPick query parameters from a URL.\n\nReturns a string with the new URL.\n\n```js\nconst queryString = require('query-string');\n\nqueryString.pick('https://foo.bar?foo=1&bar=2#hello', ['foo']);\n//=> 'https://foo.bar?foo=1#hello'\n\nqueryString.pick('https://foo.bar?foo=1&bar=2#hello', (name, value) => value === 2, {parseNumbers: true});\n//=> 'https://foo.bar?bar=2#hello'\n```\n\n### .exclude(url, keys, options?)\n### .exclude(url, filter, options?)\n\nExclude query parameters from a URL.\n\nReturns a string with the new URL.\n\n```js\nconst queryString = require('query-string');\n\nqueryString.exclude('https://foo.bar?foo=1&bar=2#hello', ['foo']);\n//=> 'https://foo.bar?bar=2#hello'\n\nqueryString.exclude('https://foo.bar?foo=1&bar=2#hello', (name, value) => value === 2, {parseNumbers: true});\n//=> 'https://foo.bar?foo=1#hello'\n```\n\n#### url\n\nType: `string`\n\nThe URL containing the query parameters to filter.\n\n#### keys\n\nType: `string[]`\n\nThe names of the query parameters to filter based on the function used.\n\n#### filter\n\nType: `(key, value) => boolean`\n\nA filter predicate that will be provided the name of each query parameter and its value. The `parseNumbers` and `parseBooleans` options also affect `value`.\n\n#### options\n\nType: `object`\n\n[Parse options](#options) and [stringify options](#options-1).\n\n## Nesting\n\nThis module intentionally doesn't support nesting as it's not spec'd and varies between implementations, which causes a lot of [edge cases](https://github.com/visionmedia/node-querystring/issues).\n\nYou're much better off just converting the object to a JSON string:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({\n\tfoo: 'bar',\n\tnested: JSON.stringify({\n\t\tunicorn: 'cake'\n\t})\n});\n//=> 'foo=bar&nested=%7B%22unicorn%22%3A%22cake%22%7D'\n```\n\nHowever, there is support for multiple instances of the same key:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.parse('likes=cake&name=bob&likes=icecream');\n//=> {likes: ['cake', 'icecream'], name: 'bob'}\n\nqueryString.stringify({color: ['taupe', 'chartreuse'], id: '515'});\n//=> 'color=taupe&color=chartreuse&id=515'\n```\n\n## Falsy values\n\nSometimes you want to unset a key, or maybe just make it present without assigning a value to it. Here is how falsy values are stringified:\n\n```js\nconst queryString = require('query-string');\n\nqueryString.stringify({foo: false});\n//=> 'foo=false'\n\nqueryString.stringify({foo: null});\n//=> 'foo'\n\nqueryString.stringify({foo: undefined});\n//=> ''\n```\n\n## query-string for enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of query-string and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-query-string?utm_source=npm-query-string&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (http://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/query-string/-/query-string-6.14.1.tgz#7ac2dca46da7f309449ba0f86b1fd28255b0c86a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/query-string/-/query-string-6.14.1.tgz",
    "hash": "7ac2dca46da7f309449ba0f86b1fd28255b0c86a",
    "integrity": "sha512-XDxAeVmpfu1/6IjyT/gXHOl+S0vQ9owggJ30hhWKdHAsNPOcasn5o9BW0eejZqL2e4vMjhAxoW3jVHcD6mbcYw==",
    "registry": "npm",
    "packageName": "query-string",
    "cacheIntegrity": "sha512-XDxAeVmpfu1/6IjyT/gXHOl+S0vQ9owggJ30hhWKdHAsNPOcasn5o9BW0eejZqL2e4vMjhAxoW3jVHcD6mbcYw== sha1-esLcpG2n8wlEm6D4ax/SglWwyGo="
  },
  "registry": "npm",
  "hash": "7ac2dca46da7f309449ba0f86b1fd28255b0c86a"
}