{
  "manifest": {
    "name": "flatstr",
    "version": "1.0.12",
    "description": "Flattens the underlying C structures of a concatenated JavaScript string",
    "main": "index.js",
    "browser": {
      "v8": "./v8"
    },
    "tags": [
      "perf",
      "performance",
      "strings",
      "concatenation"
    ],
    "author": {
      "name": "David Mark Clements"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/davidmarkclements/flatstr.git"
    },
    "bugs": {
      "url": "https://github.com/davidmarkclements/flatstr/issues"
    },
    "homepage": "https://github.com/davidmarkclements/flatstr#readme",
    "devDependencies": {
      "fastbench": "^1.0.1",
      "tap": "^12.0.1"
    },
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-flatstr-1.0.12-c2ba6a08173edbb6c9640e3055b95e287ceb5931-integrity/node_modules/flatstr/package.json",
    "readmeFilename": "readme.md",
    "readme": "# flatstr\n\nFlattens the underlying C structures of a concatenated JavaScript string\n\n## About\n\nIf you're doing lots of string concatenation and then writing that\nstring somewhere, you may find that passing your string through \n`flatstr` vastly improves performance.\n\n## Usage\n\n```js\nvar flatstr = require('flatstr')\nflatstr(someHeavilyConcatenatedString)\n```\n\n## Benchmarks\n\nBenchmarks test flat vs non-flat strings being written to \nan `fs.WriteStream`.\n\n```\nunflattenedManySmallConcats*10000: 147.540ms\nflattenedManySmallConcats*10000: 105.994ms\nunflattenedSeveralLargeConcats*10000: 287.901ms\nflattenedSeveralLargeConcats*10000: 226.121ms\nunflattenedExponentialSmallConcats*10000: 410.533ms\nflattenedExponentialSmallConcats*10000: 219.973ms\nunflattenedExponentialLargeConcats*10000: 2774.230ms\nflattenedExponentialLargeConcats*10000: 1862.815ms\n```\n\nIn each case, flattened strings win, \nhere's the performance gains from using `flatstr`\n\n```\nManySmallConcats: 28%\nSeveralLargeConcats: 21% \nExponentialSmallConcats: 46%\nExponentialLargeConcats: 33%\n```\n\n## How does it work\n\nIn the v8 C++ layer, JavaScript strings can be represented in two ways. \n\n1. As an array\n2. As a tree\n\nWhen JavaScript strings are concatenated, tree structures are used\nto represent them. For the concat operation, this is cheaper than\nreallocating a larger array. However, performing other operations \non the tree structures can become costly (particularly where lots of\nconcatenation has occurred). \n\nV8 has a a method called `String::Flatten`which converts the tree into a C array. This method is typically called before operations that walk through the bytes of the string (for instance, when testing against a regular expression). It may also be called if a string is accessed many times over, \nas an optimization on the string. However, strings aren't always flattened. One example is when we pass a string into a `WriteStream`, at some point the string will be converted to a buffer, and this may be expensive if the underlying representation is a tree. \n\n`String::Flatten` is not exposed as a JavaScript function, but it can be triggered as a side effect. \n\nThere are several ways to indirectly call `String::Flatten` (see `alt-benchmark.js`), \nbut coercion to a number appears to be (one of) the cheapest.\n\nHowever since Node 10 the V8 version has stopped using Flatten in all \nplaces identified. Thus the code has been updated to seamlessly \nuse the native runtime function `%FlattenString` without having to use \nthe `--allow-natives-syntax` flag directly. \n\nOne final note: calling flatstr too much can in fact negatively effect performance. For instance, don't call it every time you concat (if that\nwas performant, v8 wouldn't be using trees in the first place). The best\nplace to use flatstr is just prior to passing it to an API that eventually\nruns non-v8 code (such as `fs.WriteStream`, or perhaps `xhr` or DOM apis in the browser). \n\n\n## Acknowledgements\n\n* Sponsored by nearForm\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 David Mark Clements\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/flatstr/-/flatstr-1.0.12.tgz#c2ba6a08173edbb6c9640e3055b95e287ceb5931",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/flatstr/-/flatstr-1.0.12.tgz",
    "hash": "c2ba6a08173edbb6c9640e3055b95e287ceb5931",
    "integrity": "sha512-4zPxDyhCyiN2wIAtSLI6gc82/EjqZc1onI4Mz/l0pWrAlsSfYH/2ZIcU+e3oA2wDwbzIWNKwa23F8rh6+DRWkw==",
    "registry": "npm",
    "packageName": "flatstr",
    "cacheIntegrity": "sha512-4zPxDyhCyiN2wIAtSLI6gc82/EjqZc1onI4Mz/l0pWrAlsSfYH/2ZIcU+e3oA2wDwbzIWNKwa23F8rh6+DRWkw== sha1-wrpqCBc+27bJZA4wVbleKHzrWTE="
  },
  "registry": "npm",
  "hash": "c2ba6a08173edbb6c9640e3055b95e287ceb5931"
}