{
  "manifest": {
    "name": "request-compose",
    "version": "2.1.4",
    "description": "Composable HTTP Client",
    "keywords": [
      "functional",
      "compose",
      "composable",
      "http",
      "client"
    ],
    "license": "Apache-2.0",
    "homepage": "https://github.com/simov/request-compose",
    "author": {
      "name": "Simeon Velichkov",
      "email": "simeonvelichkov@gmail.com",
      "url": "https://simov.github.io"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/simov/request-compose.git"
    },
    "dependencies": {},
    "devDependencies": {
      "coveralls": "^3.1.0",
      "mocha": "^8.4.0",
      "nyc": "^15.1.0",
      "qs": "^6.9.4",
      "request-cookie": "^1.0.0",
      "request-logs": "^2.1.4",
      "request-multipart": "^1.0.0",
      "request-oauth": "^1.0.1"
    },
    "main": "./compose.js",
    "type": "commonjs",
    "files": [
      "request/",
      "response/",
      "utils/",
      "compose.js",
      "compose.d.ts",
      "index.js",
      "CHANGELOG.md",
      "LICENSE",
      "README.md",
      "package.json"
    ],
    "types": "compose.d.ts",
    "scripts": {
      "test": "npm run test:ci",
      "test:ci": "npx mocha --recursive",
      "test:cov": "npx nyc --reporter=lcov --reporter=text-summary mocha -- --recursive"
    },
    "engines": {
      "node": ">=12.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-request-compose-2.1.4-d427d614d31c0300e5893cbeaf86e51da1dff445-integrity/node_modules/request-compose/package.json",
    "readmeFilename": "README.md",
    "readme": "\n# request-compose\n\n[![npm-version]][npm] [![travis-ci]][travis] [![coveralls-status]][coveralls]\n\n> _Composable HTTP Client_\n\n```js\nvar compose = require('request-compose')\nvar Request = compose.Request\nvar Response = compose.Response\n\n;(async () => {\n  try {\n    var {res, body} = await compose(\n      Request.defaults({headers: {'user-agent': 'request-compose'}}),\n      Request.url('https://api.github.com/users/simov'),\n      Request.send(),\n      Response.buffer(),\n      Response.string(),\n      Response.parse(),\n    )()\n    console.log(res.statusCode, res.statusMessage)\n    console.log(res.headers['x-ratelimit-remaining'])\n    console.log(body)\n  }\n  catch (err) {\n    console.error(err)\n  }\n})()\n```\n\n# Goals\n\n- **No dependencies**\n- **No abstraction**\n- **No state**\n\n\n# Table of Contents\n\n- [**Compose**](#compose)\n- [Bundled **Middlewares**](#bundled-middlewares)\n- [Opinionated **Client**](#opinionated-client)\n  - [client](#client) / [buffer](#buffer) / [stream](#stream) / [options](#options) / [extend](#extend)\n- [**Errors**](#errors)\n- [Debug **Logs**](#debug-logs)\n- [**Examples**](#examples)\n\n\n# Compose\n\n> In computer science, __[function composition][function-composition]__ (not to be confused with object composition) is an act or mechanism to combine simple functions to build more complicated ones. Like the usual composition of functions in mathematics, the result of each function is passed as the argument of the next, and the result of the last one is the result of the whole.\n\n```js\nvar compose = require('request-compose')\n```\n\nAccepts a list of functions to execute and returns a [Promise]:\n\n```js\nvar doit = compose(\n  (a) => a + 2,\n  (a) => a * 2,\n)\n```\n\nThen we can call it:\n\n```js\nvar result = await doit(5) // 14\n```\n\nA more practical example however would be to compose our own HTTP client:\n\n```js\nvar compose = require('request-compose')\nvar https = require('https')\n\nvar request = compose(\n  (options) => {\n    options.headers = options.headers || {}\n    options.headers['user-agent'] = 'request-compose'\n    return options\n  },\n  (options) => new Promise((resolve, reject) => {\n    https.request(options)\n      .on('response', resolve)\n      .on('error', reject)\n      .end()\n  }),\n  async (res) => await new Promise((resolve, reject) => {\n    var body = ''\n    res\n      .on('data', (chunk) => body += chunk)\n      .on('end', () => resolve({res, body}))\n      .on('error', reject)\n  }),\n  ({res, body}) => ({res, body: JSON.parse(body)}),\n)\n```\n\nThen we can use it like this:\n\n```js\n;(async () => {\n  try {\n    var {res, body} = await request({\n      protocol: 'https:',\n      hostname: 'api.github.com',\n      path: '/users/simov',\n    })\n    console.log(res.statusCode, res.statusMessage)\n    console.log(res.headers['x-ratelimit-remaining'])\n    console.log(body)\n  }\n  catch (err) {\n    console.error(err)\n  }\n})()\n```\n\n# Bundled Middlewares\n\n`request-compose` comes with a bunch of pre-defined middlewares for transforming the [request][request-middlewares] and the [response][response-middlewares]:\n\n```js\nvar compose = require('request-compose')\nvar Request = compose.Request\nvar Response = compose.Response\n```\n\nWe can use these middlewares to compose our own HTTP client:\n\n```js\n;(async () => {\n  try {\n    var {res, body} = await compose(\n      Request.defaults({headers: {'user-agent': 'request-compose'}}),\n      Request.url('https://api.github.com/users/simov'),\n      Request.send(),\n      Response.buffer(),\n      Response.string(),\n      Response.parse(),\n    )()\n    console.log(res.statusCode, res.statusMessage)\n    console.log(res.headers['x-ratelimit-remaining'])\n    console.log(body)\n  }\n  catch (err) {\n    console.error(err)\n  }\n})()\n```\n\nType | Middleware | Input | Arguments | Returns\n:--- | :---       | :---  | :---      | :---\nRequest | defaults | {input} | {input} | {options}\nRequest | url, proxy, qs, cookie | see [options](#options) | {options} | {options}\nRequest | form, json, multipart, body | see [options](#options) | {options} | {options, body}\nRequest | auth, oauth | see [options](#options) | {options, body} | {options, body}\nRequest | length | - | {options, body} | {options, body}\nRequest | send | - | {options, body} | {options, res}\nResponse | buffer | - | {options, res} | {options, res, body}\nResponse | gzip | - | {options, res, body, raw} | {options, res, body, raw}\nResponse | string | see [options](#options) | {options, res, body, raw} | {options, res, body, raw}\nResponse | parse, status | - | {options, res, body, raw} | {options, res, body, raw}\nResponse | redirect | (input, client) | {options, res, body, raw} | new composition\n\n\n# Opinionated Client\n\n`request-compose` comes with opinionated HTTP client that is composed of the above [middlewares](#bundled-middlewares).\n\nThere are 3 types of composition available based on the returned data type:\n\n## client\n\n```js\nvar request = require('request-compose').client\nvar {res, body} = await request({options})\n```\n\nThe `client` composition does the following:\n\n- buffers the response body\n- decompresses `gzip` and `deflate` encoded bodies with valid `content-encoding` header\n- converts the response body to string using `utf8` encoding by default\n- tries to parse `JSON` and `querystring` encoded bodies with valid `content-type` header\n\nReturns either String or Object.\n\n## buffer\n\n```js\nvar request = require('request-compose').buffer\nvar {res, body} = await request({options})\n```\n\nThe `buffer` composition does the following:\n\n- buffers the response body\n- decompresses `gzip` and `deflate` encoded bodies with valid `content-encoding` header\n\nReturns [Buffer][buffer].\n\n## stream\n\n```js\nvar request = require('request-compose').stream\nvar {res} = await request({options})\n```\n\nThe `stream` composition returns the response [Stream][stream-incoming-message].\n\n## options\n\nThe above compositions accept any of the Node's [http.request][http-request] and [https.request][https-request] options:\n\n```js\nvar {res, body} = await request({\n  method: 'GET',\n  url: 'https://api.github.com/users/simov',\n  headers: {\n    'user-agent': 'request-compose'\n  }\n})\n```\n\nAdditionally the following options are available:\n\nOption     | Type                  | Description\n:--        | :--                   | :--\n`url`      | `'string'` [`url object`][url-parse] | URL _(encoding - see below)_\n`proxy`    | `'string'` [`url object`][url-parse] | Proxy URL\n`qs`       | `{object}` `'string'` | URL querystring _(encoding - see below)_\n`form`     | `{object}` `'string'` | application/x-www-form-urlencoded request body _(encoding - see below)_\n`json`     | `{object}` `'string'` | JSON encoded request body\n`multipart`| `{object}` `[array]`  | multipart request body using [request-multipart], see [examples](#external-middlewares)\n`body`     | `'string'` [`Buffer`][buffer] [`Stream`][stream-readable] | request body\n`auth`     | `{user, pass}`        | Basic authorization\n`oauth`    | `{object}` | OAuth 1.0a authorization using [request-oauth], see [examples](#external-middlewares)\n`encoding` | [`'string'`][buffer-encoding] | response body encoding _(default: 'utf8')_\n`cookie`   | `{object}` | cookie store using [request-cookie], see [examples](#external-middlewares)\n`redirect` | `{object}` | _see below_\n\n> Querystring set in the `url`, and/or in `qs` and/or in `form` as _'string'_ is left untouched, meaning that the proper encoding is left to the user.\n\n> When `qs` and/or `form` is _{object}_ the querystring is encoded using the Node's [querystring] module which mirrors the global [encodeURIComponent][encodeuri] method. Additionally all reserved characters according to RFC3986 are encoded as well. Full list of all reserved characters that are being encoded can be found [here][reserved-characters].\n\n#### redirect\n\nOption    | Default | Description\n:--       | :--     | :--\n`max`     | *3*     | maximum number of redirects to follow\n`all`     | *false* | follow non-GET HTTP 3xx responses as redirects\n`method`  | *true*  | follow original HTTP method, otherwise convert all redirects to GET\n`auth`    | *true*  | keep Authorization header when changing hostnames\n`referer` | *false* | add Referer header\n\n## extend\n\nExtend or override any of the bundled [request][request-middlewares] and [response][response-middlewares] middlewares:\n\n```js\nvar request = require('request-compose').extend({\n  Request: {\n    oauth: require('request-oauth'),\n    multipart: require('request-multipart'),\n    cookie: require('request-cookie').Request\n  },\n  Response: {cookie: require('request-cookie').Response},\n}).client\n```\n\n# Errors\n\nNon `200/300` responses are thrown as [Error] object with the following properties:\n\n- `message` - status code + status message\n- `res` - the response object\n- `body` - the parsed response body\n- `raw` - the raw response body\n\n\n# Debug Logs\n\nFancy [request-logs]:\n\n```bash\nnpm i --save-dev request-logs\n```\n\nPick any of the following debug options:\n\n```bash\nDEBUG=req,res,body,json,nocolor node app.js\n```\n\n# Examples\n\n## Basics\n\nTopic | Example\n:--   | :--\nTypes of lambda functions | [Get GitHub user profile](https://github.com/simov/request-compose/blob/master/examples/basic-lambda.js)\nBundled middlewares | [Get GitHub user profile](https://github.com/simov/request-compose/blob/master/examples/basic-middlewares.js)\nWrap it up and extend it | [Get GitHub user profile](https://github.com/simov/request-compose/blob/master/examples/basic-extend.js)\n\n## Compositions\n\nTopic | Example\n:--   | :--\nClient | [Get GitHub user profile](https://github.com/simov/request-compose/blob/master/examples/compose-client.js)\nBuffer | [Decoding response body using iconv-lite](https://github.com/simov/request-compose/blob/master/examples/compose-buffer.js)\nStream | [Stream Tweets](https://github.com/simov/request-compose/blob/master/examples/compose-stream.js)\n\n## External Middlewares\n\nTopic | Example\n:--   | :--\nOAuth ([request-oauth]) | [Get Twitter User Profile](https://github.com/simov/request-compose/blob/master/examples/mw-oauth.js)\nMultipart ([request-multipart]) | [Upload photo to Twitter](https://github.com/simov/request-compose/blob/master/examples/mw-multipart.js)\nCookie ([request-cookie]) | [Login to Wallhaven.cc](https://github.com/simov/request-compose/blob/master/examples/mw-cookie.js)\n\n## Stream\n\nTopic | Example\n:--   | :--\nStream request body | [Upload file to Dropbox](https://github.com/simov/request-compose/blob/master/examples/stream-dropbox-upload.js)\nHTTP stream | [Upload image from Dropbox to Slack](https://github.com/simov/request-compose/blob/master/examples/stream-dropbox-to-slack.js)\nHTTP stream | [Copy file from Dropbox to GDrive](https://github.com/simov/request-compose/blob/master/examples/stream-dropbox-to-gdrive.js)\n\n## Misc\n\nTopic | Example\n:--   | :--\nGzip decompression | [Request Gzip compressed body](https://github.com/simov/request-compose/blob/master/examples/misc-gzip.js)\nHTTPS proxy | [Tunnel Agent](https://github.com/simov/request-compose/blob/master/examples/misc-tunnel-agent.js)\nHTTPS proxy | [Proxy Agent](https://github.com/simov/request-compose/blob/master/examples/misc-proxy-agent.js)\nOverride bundled middleware - per compose instance | [Override the `qs` middleware](https://github.com/simov/request-compose/blob/master/examples/misc-extend.js)\nOverride bundled middleware - process-wide | [Override the `form` and the `parse` middlewares to use the `qs` module](https://github.com/simov/request-compose/blob/master/examples/misc-override.js)\n\n## Pipeline\n\nTopic | Example\n:--   | :--\nApp pipeline | [Slack Weather Status](https://github.com/simov/request-compose/blob/master/examples/pipe-slack-weather-status.js)\nApp pipeline | [Simultaneously search for repos in GitHub, GitLab and BitBucket](https://github.com/simov/request-compose/blob/master/examples/pipe-repo-search.js)\n\n## Modules\n\nTopic | Example\n:--   | :--\nGoogle Chrome Web Store HTTP Client | [chrome-webstore]\nwallhaven.cc HTTP Client | [wallhaven-client]\nREST API Client Library | [purest]\n\n\n  [npm-version]: https://img.shields.io/npm/v/request-compose.svg?style=flat-square (NPM Package Version)\n  [travis-ci]: https://img.shields.io/travis/simov/request-compose/master.svg?style=flat-square (Build Status - Travis CI)\n  [coveralls-status]: https://img.shields.io/coveralls/simov/request-compose.svg?style=flat-square (Test Coverage - Coveralls)\n  [codecov-status]: https://img.shields.io/codecov/c/github/simov/request-compose.svg?style=flat-square (Test Coverage - Codecov)\n\n  [npm]: https://www.npmjs.com/package/request-compose\n  [travis]: https://travis-ci.org/simov/request-compose\n  [coveralls]: https://coveralls.io/github/simov/request-compose\n  [codecov]: https://codecov.io/github/simov/request-compose?branch=master\n\n  [function-composition]: https://en.wikipedia.org/wiki/Function_composition_(computer_science)\n  [pipeline]: https://en.wikipedia.org/wiki/Pipeline_(software)\n  [pipe-operator]: https://github.com/tc39/proposal-pipeline-operator\n\n  [chunked]: https://en.wikipedia.org/wiki/Chunked_transfer_encoding\n\n  [request-middlewares]: https://github.com/simov/request-compose/tree/master/request\n  [response-middlewares]: https://github.com/simov/request-compose/tree/master/response\n  [request-oauth]: https://www.npmjs.com/package/request-oauth\n  [request-multipart]: https://www.npmjs.com/package/request-multipart\n  [request-cookie]: https://www.npmjs.com/package/request-cookie\n  [request-logs]: https://www.npmjs.com/package/request-logs\n\n  [promise]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n  [error]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n  [buffer]: https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html\n  [buffer-encoding]: https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_buffers_and_character_encodings\n  [stream-readable]: https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_class_stream_readable\n  [stream-incoming-message]: https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_incomingmessage\n  [http-request]: https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_http_request_options_callback\n  [https-request]: https://nodejs.org/dist/latest-v14.x/docs/api/https.html#https_https_request_options_callback\n  [url-parse]: https://nodejs.org/dist/latest-v10.x/docs/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost\n  [querystring-parse]: https://nodejs.org/dist/latest-v10.x/docs/api/querystring.html#querystring_querystring_parse_str_sep_eq_options\n  [querystring]: https://nodejs.org/dist/latest-v10.x/docs/api/querystring.html\n  [encodeuri]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n  [reserved-characters]: https://en.wikipedia.org/wiki/Percent-encoding#Types_of_URI_characters\n\n  [chrome-webstore]: https://github.com/simov/chrome-webstore\n  [wallhaven-client]: https://github.com/simov/wallhaven-client\n  [purest]: https://github.com/simov/purest\n",
    "licenseText": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nCopyright (c) 2018-present, Simeon Velichkov <simeonvelichkov@gmail.com> (https://github.com/simov/request-compose)\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and\nYou must cause any modified files to carry prominent notices stating that You changed the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/request-compose/-/request-compose-2.1.4.tgz#d427d614d31c0300e5893cbeaf86e51da1dff445",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/request-compose/-/request-compose-2.1.4.tgz",
    "hash": "d427d614d31c0300e5893cbeaf86e51da1dff445",
    "integrity": "sha512-F8xik9Dxd5i2aHZ0/L/oIrCM1kKSgvp9BKYxGXk91lSWF9TbicWpnuxdOchxIhEWwvLdSBWZIAbCOeXfGfqaqA==",
    "registry": "npm",
    "packageName": "request-compose",
    "cacheIntegrity": "sha512-F8xik9Dxd5i2aHZ0/L/oIrCM1kKSgvp9BKYxGXk91lSWF9TbicWpnuxdOchxIhEWwvLdSBWZIAbCOeXfGfqaqA== sha1-1CfWFNMcAwDliTy+r4blHaHf9EU="
  },
  "registry": "npm",
  "hash": "d427d614d31c0300e5893cbeaf86e51da1dff445"
}