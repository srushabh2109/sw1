{
  "manifest": {
    "name": "optional-require",
    "version": "1.0.3",
    "description": "NodeJS Require that let you handle module not found error without try/catch",
    "main": "index.js",
    "scripts": {
      "test": "mocha test/spec",
      "coverage": "istanbul cover _mocha -- test/spec/*.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jchip/optional-require.git"
    },
    "keywords": [
      "optional require",
      "optional",
      "require"
    ],
    "files": [
      "index.js"
    ],
    "engines": {
      "node": ">=4"
    },
    "author": {
      "name": "Joel Chen"
    },
    "license": "Apache-2.0",
    "devDependencies": {
      "chai": "^3.5.0",
      "istanbul": "^0.4.5",
      "mocha": "^3.2.0",
      "prettier": "1.19.1",
      "require-at": "^1.0.0"
    },
    "dependencies": {},
    "prettier": {
      "printWidth": 120
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-optional-require-1.0.3-275b8e9df1dc6a17ad155369c2422a440f89cb07-integrity/node_modules/optional-require/package.json",
    "readmeFilename": "README.md",
    "readme": "[![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url]\n[![Dependency Status][daviddm-image]][daviddm-url] [![devDependency Status][daviddm-dev-image]][daviddm-dev-url]\n\n# Optional Require\n\nNodeJS Require that let you handle module not found error without try/catch.  Allows you to gracefully require a module only if it exists and contains no error.\n\n# Usage\n\n```js\nconst optionalRequire = require(\"optional-require\")(require);\n\nconst foo = optionalRequire(\"foo\") || {};\nconst bar = optionalRequire(\"bar\", true); // true enables console.log a message when not found\nconst xyz = optionalRequire(\"xyz\", \"test\"); // \"test\" enables console.log a message with \"test\" added.\nconst fbPath = optionalRequire.resolve(\"foo\", \"foo doesn't exist\");\nconst rel = optionalRequire(\"../foo/bar\"); // relative module path works\n```\n\n# Install\n\n```bash\n$ npm i optional-require --save\n```\n\n# API\n\n#### [optionalRequire(require)](#optionalrequirerequire)\n\nThe single function this module exports.  Call it with `require` to get a custom function for you to do optional require from your file's require context.  See [Usage](#usage) above.\n\n#### [customOptionalRequire(path, \\[message|options\\])](#customoptionalrequirepath-messageoptions)\n\nThe function [optionalRequire](#optionalrequirerequire) returns for you to do optional require from your file's require context.\n\n##### Params\n\n-   `path` - name/path to the module your want to optionally require\n-   `message` - optional flag/message to enable `console.log` a message when module is not found\n-   `options` - an optional object with the following fields\n    -   `message` - see above\n    -   `fail` - callback for when an error that's _not_ `MODULE_NOT_FOUND` for `path` occurred\n    -   `notFound` - callback for when `path` was not found\n        -   The value from this is returned\n    -   `default` - default value to returned when not found - not allowed with `notFound` together\n\n##### Returns\n\n-   module required or one of the following if not found\n    -   `undefined` or\n    -   return value from `options.notFound` if it's specified\n    -   `options.default` if it's specified\n\n##### Throws\n\n-   rethrows any error that's not `MODULE_NOT_FOUND` for the module `path`\n\n#### [customOptionalRequire.resolve(path, \\[message\\])](#customoptionalrequireresolvepath-message)\n\nSame as [customOptionalRequire](#customoptionalrequirepath-messageoptions) but acts like `require.resolve`\n\n#### [optionalRequire.log(message, path)](#optionalrequirelogmessage-path)\n\nThe function that will be called to log the message when optional module is not found.  You can override this with your own function.\n\n#### [optionalRequire.try(require, path, \\[message|options\\])](#optionalrequiretryrequire-path-messageoptions)\n\nSame as [customOptionalRequire](#customoptionalrequirepath-messageoptions) but you have to pass in `require` from your file's context.\n\n#### [optionalRequire.resolve(require, path, \\[message|options\\])](#optionalrequireresolverequire-path-messageoptions)\n\nSame as [customOptionalRequire.resolve](#customoptionalrequirepath-messageoptions) but you have to pass in `require` from your file's context.\n\n# LICENSE\n\nApache-2.0 Â© [Joel Chen](https://github.com/jchip)\n\n[travis-image]: https://travis-ci.org/jchip/optional-require.svg?branch=master\n\n[travis-url]: https://travis-ci.org/jchip/optional-require\n\n[npm-image]: https://badge.fury.io/js/optional-require.svg\n\n[npm-url]: https://npmjs.org/package/optional-require\n\n[daviddm-image]: https://david-dm.org/jchip/optional-require/status.svg\n\n[daviddm-url]: https://david-dm.org/jchip/optional-require\n\n[daviddm-dev-image]: https://david-dm.org/jchip/optional-require/dev-status.svg\n\n[daviddm-dev-url]: https://david-dm.org/jchip/optional-require?type=dev\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/optional-require/-/optional-require-1.0.3.tgz#275b8e9df1dc6a17ad155369c2422a440f89cb07",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/optional-require/-/optional-require-1.0.3.tgz",
    "hash": "275b8e9df1dc6a17ad155369c2422a440f89cb07",
    "integrity": "sha512-RV2Zp2MY2aeYK5G+B/Sps8lW5NHAzE5QClbFP15j+PWmP+T9PxlJXBOOLoSAdgwFvS4t0aMR4vpedMkbHfh0nA==",
    "registry": "npm",
    "packageName": "optional-require",
    "cacheIntegrity": "sha512-RV2Zp2MY2aeYK5G+B/Sps8lW5NHAzE5QClbFP15j+PWmP+T9PxlJXBOOLoSAdgwFvS4t0aMR4vpedMkbHfh0nA== sha1-J1uOnfHcahetFVNpwkIqRA+Jywc="
  },
  "registry": "npm",
  "hash": "275b8e9df1dc6a17ad155369c2422a440f89cb07"
}