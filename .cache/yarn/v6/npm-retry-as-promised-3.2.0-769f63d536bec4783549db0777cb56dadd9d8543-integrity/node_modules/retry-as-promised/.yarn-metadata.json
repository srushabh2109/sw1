{
  "manifest": {
    "name": "retry-as-promised",
    "version": "3.2.0",
    "description": "Retry a failed promise",
    "main": "index.js",
    "scripts": {
      "test": "PROMISE_TYPE=bluebird npm run test-raw && PROMISE_TYPE=q npm run test-raw",
      "test-raw": "cross-env DEBUG=retry-as-promised* ./node_modules/.bin/mocha --check-leaks --colors -t 10000 --reporter spec test/promise.test.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/mickhansen/retry-as-promised.git"
    },
    "keywords": [
      "retry",
      "promise",
      "bluebird"
    ],
    "author": {
      "name": "Mick Hansen",
      "email": "maker@mhansen.io"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mickhansen/retry-as-promised/issues"
    },
    "homepage": "https://github.com/mickhansen/retry-as-promised",
    "dependencies": {
      "any-promise": "^1.3.0"
    },
    "files": [],
    "devDependencies": {
      "bluebird": "^3.5.1",
      "chai": "^4.2.0",
      "chai-as-promised": "^7.1.1",
      "cross-env": "^5.2.0",
      "mocha": "^5.2.0",
      "moment": "^2.10.6",
      "q": "^1.5.1",
      "sinon": "^7.0.0",
      "sinon-chai": "^3.2.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-retry-as-promised-3.2.0-769f63d536bec4783549db0777cb56dadd9d8543-integrity/node_modules/retry-as-promised/package.json",
    "readmeFilename": "README.md",
    "readme": "# retry-as-promised\n\nRetry promises when they fail, based upon [any-promise](https://github.com/kevinbeaty/any-promise).\n\n## Installation\n\n```sh\n$ npm install --save retry-as-promised\n$ yarn add retry-as-promised\n```\n\n## Configuration\n\n```js\nvar retry = require('retry-as-promised');\n\nvar warningFn = function(msg){ someLoggingFunction(msg, 'notice'); };\n\n// Will call the until max retries or the promise is resolved.\nreturn retry(function (options) {\n  // options.current, times callback has been called including this call\n  return promise;\n}, {\n  max: 3, // maximum amount of tries\n  timeout: 10000 // throw if no response or error within millisecond timeout, default: undefined,\n  match: [ // Must match error signature (ala bluebird catch) to continue\n    Sequelize.ConnectionError,\n    'SQLITE_BUSY'\n  ],\n  backoffBase: 1000 // Initial backoff duration in ms. Default: 100,\n  backoffExponent: 1.5 // Exponent to increase backoff each try. Default: 1.1\n  report: warningFn, // the function used for reporting; must have a (string, object) argument signature, where string is the message that will passed in by retry-as-promised, and the object will be this configuration object + the $current property\n  name:  'SourceX' // if user supplies string, it will be used when composing error/reporting messages; else if retry gets a callback, uses callback name in erroring/reporting; else (default) uses literal string 'unknown'\n});\n```\n\n## Tested with\n\n- Bluebird\n- Q\n",
    "licenseText": "The MIT License\n\nCopyright (c) 2015-2016 Mick Hansen. http://mhansen.io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/retry-as-promised/-/retry-as-promised-3.2.0.tgz#769f63d536bec4783549db0777cb56dadd9d8543",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/retry-as-promised/-/retry-as-promised-3.2.0.tgz",
    "hash": "769f63d536bec4783549db0777cb56dadd9d8543",
    "integrity": "sha512-CybGs60B7oYU/qSQ6kuaFmRd9sTZ6oXSc0toqePvV74Ac6/IFZSI1ReFQmtCN+uvW1Mtqdwpvt/LGOiCBAY2Mg==",
    "registry": "npm",
    "packageName": "retry-as-promised",
    "cacheIntegrity": "sha512-CybGs60B7oYU/qSQ6kuaFmRd9sTZ6oXSc0toqePvV74Ac6/IFZSI1ReFQmtCN+uvW1Mtqdwpvt/LGOiCBAY2Mg== sha1-dp9j1Ta+xHg1SdsHd8tW2t2dhUM="
  },
  "registry": "npm",
  "hash": "769f63d536bec4783549db0777cb56dadd9d8543"
}