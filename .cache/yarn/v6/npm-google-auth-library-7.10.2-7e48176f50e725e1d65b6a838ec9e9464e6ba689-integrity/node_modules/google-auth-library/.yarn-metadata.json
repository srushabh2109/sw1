{
  "manifest": {
    "name": "google-auth-library",
    "version": "7.10.2",
    "author": {
      "name": "Google Inc."
    },
    "description": "Google APIs Authentication Client Library for Node.js",
    "engines": {
      "node": ">=10"
    },
    "main": "./build/src/index.js",
    "types": "./build/src/index.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/googleapis/google-auth-library-nodejs.git"
    },
    "keywords": [
      "google",
      "api",
      "google apis",
      "client",
      "client library"
    ],
    "dependencies": {
      "arrify": "^2.0.0",
      "base64-js": "^1.3.0",
      "ecdsa-sig-formatter": "^1.0.11",
      "fast-text-encoding": "^1.0.0",
      "gaxios": "^4.0.0",
      "gcp-metadata": "^4.2.0",
      "gtoken": "^5.0.4",
      "jws": "^4.0.0",
      "lru-cache": "^6.0.0"
    },
    "devDependencies": {
      "@compodoc/compodoc": "^1.1.7",
      "@types/base64-js": "^1.2.5",
      "@types/chai": "^4.1.7",
      "@types/jws": "^3.1.0",
      "@types/lru-cache": "^5.0.0",
      "@types/mocha": "^8.0.0",
      "@types/mv": "^2.1.0",
      "@types/ncp": "^2.0.1",
      "@types/node": "^16.0.0",
      "@types/sinon": "^10.0.0",
      "@types/tmp": "^0.2.0",
      "assert-rejects": "^1.0.0",
      "c8": "^7.0.0",
      "chai": "^4.2.0",
      "codecov": "^3.0.2",
      "execa": "^5.0.0",
      "gts": "^2.0.0",
      "is-docker": "^2.0.0",
      "karma": "^6.0.0",
      "karma-chrome-launcher": "^3.0.0",
      "karma-coverage": "^2.0.0",
      "karma-firefox-launcher": "^2.0.0",
      "karma-mocha": "^2.0.0",
      "karma-remap-coverage": "^0.1.5",
      "karma-sourcemap-loader": "^0.3.7",
      "karma-webpack": "^5.0.0",
      "keypair": "^1.0.4",
      "linkinator": "^2.0.0",
      "mocha": "^8.0.0",
      "mv": "^2.1.1",
      "ncp": "^2.0.0",
      "nock": "^13.0.0",
      "null-loader": "^4.0.0",
      "puppeteer": "^11.0.0",
      "sinon": "^11.0.0",
      "tmp": "^0.2.0",
      "ts-loader": "^8.0.0",
      "typescript": "^3.8.3",
      "webpack": "^5.21.2",
      "webpack-cli": "^4.0.0"
    },
    "files": [
      "build/src",
      "!build/src/**/*.map"
    ],
    "scripts": {
      "test": "c8 mocha build/test",
      "clean": "gts clean",
      "prepare": "npm run compile",
      "lint": "gts check",
      "compile": "tsc -p .",
      "fix": "gts fix",
      "pretest": "npm run compile",
      "docs": "compodoc src/",
      "samples-setup": "cd samples/ && npm link ../ && npm run setup && cd ../",
      "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
      "system-test": "mocha build/system-test --timeout 60000",
      "presystem-test": "npm run compile",
      "webpack": "webpack",
      "browser-test": "karma start",
      "docs-test": "linkinator docs",
      "predocs-test": "npm run docs",
      "prelint": "cd samples; npm link ../; npm install",
      "precompile": "gts clean"
    },
    "license": "Apache-2.0",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-google-auth-library-7.10.2-7e48176f50e725e1d65b6a838ec9e9464e6ba689-integrity/node_modules/google-auth-library/package.json",
    "readmeFilename": "README.md",
    "readme": "[//]: # \"This README.md file is auto-generated, all changes to this file will be lost.\"\n[//]: # \"To regenerate it, use `python -m synthtool`.\"\n<img src=\"https://avatars2.githubusercontent.com/u/2810941?v=3&s=96\" alt=\"Google Cloud Platform logo\" title=\"Google Cloud Platform\" align=\"right\" height=\"96\" width=\"96\"/>\n\n# [Google Auth Library: Node.js Client](https://github.com/googleapis/google-auth-library-nodejs)\n\n[![release level](https://img.shields.io/badge/release%20level-general%20availability%20%28GA%29-brightgreen.svg?style=flat)](https://cloud.google.com/terms/launch-stages)\n[![npm version](https://img.shields.io/npm/v/google-auth-library.svg)](https://www.npmjs.org/package/google-auth-library)\n[![codecov](https://img.shields.io/codecov/c/github/googleapis/google-auth-library-nodejs/main.svg?style=flat)](https://codecov.io/gh/googleapis/google-auth-library-nodejs)\n\n\n\n\nThis is Google's officially supported [node.js](http://nodejs.org/) client library for using OAuth 2.0 authorization and authentication with Google APIs.\n\n\nA comprehensive list of changes in each version may be found in\n[the CHANGELOG](https://github.com/googleapis/google-auth-library-nodejs/blob/main/CHANGELOG.md).\n\n* [Google Auth Library Node.js Client API Reference][client-docs]\n* [Google Auth Library Documentation][product-docs]\n* [github.com/googleapis/google-auth-library-nodejs](https://github.com/googleapis/google-auth-library-nodejs)\n\nRead more about the client libraries for Cloud APIs, including the older\nGoogle APIs Client Libraries, in [Client Libraries Explained][explained].\n\n[explained]: https://cloud.google.com/apis/docs/client-libraries-explained\n\n**Table of contents:**\n\n\n* [Quickstart](#quickstart)\n\n  * [Installing the client library](#installing-the-client-library)\n\n* [Samples](#samples)\n* [Versioning](#versioning)\n* [Contributing](#contributing)\n* [License](#license)\n\n## Quickstart\n\n### Installing the client library\n\n```bash\nnpm install google-auth-library\n```\n\n## Ways to authenticate\nThis library provides a variety of ways to authenticate to your Google services.\n- [Application Default Credentials](#choosing-the-correct-credential-type-automatically) - Use Application Default Credentials when you use a single identity for all users in your application. Especially useful for applications running on Google Cloud. Application Default Credentials also support workload identity federation to access Google Cloud resources from non-Google Cloud platforms.\n- [OAuth 2](#oauth2) - Use OAuth2 when you need to perform actions on behalf of the end user.\n- [JSON Web Tokens](#json-web-tokens) - Use JWT when you are using a single identity for all users. Especially useful for server->server or server->API communication.\n- [Google Compute](#compute) - Directly use a service account on Google Cloud Platform. Useful for server->server or server->API communication.\n- [Workload Identity Federation](#workload-identity-federation) - Use workload identity federation to access Google Cloud resources from Amazon Web Services (AWS), Microsoft Azure or any identity provider that supports OpenID Connect (OIDC).\n- [Impersonated Credentials Client](#impersonated-credentials-client) - access protected resources on behalf of another service account.\n\n## Application Default Credentials\nThis library provides an implementation of [Application Default Credentials](https://cloud.google.com/docs/authentication/getting-started)for Node.js. The [Application Default Credentials](https://cloud.google.com/docs/authentication/getting-started) provide a simple way to get authorization credentials for use in calling Google APIs.\n\nThey are best suited for cases when the call needs to have the same identity and authorization level for the application independent of the user. This is the recommended approach to authorize calls to Cloud APIs, particularly when you're building an application that uses Google Cloud Platform.\n\nApplication Default Credentials also support workload identity federation to access Google Cloud resources from non-Google Cloud platforms including Amazon Web Services (AWS), Microsoft Azure or any identity provider that supports OpenID Connect (OIDC). Workload identity federation is recommended for non-Google Cloud environments as it avoids the need to download, manage and store service account private keys locally, see: [Workload Identity Federation](#workload-identity-federation).\n\n#### Download your Service Account Credentials JSON file\n\nTo use Application Default Credentials, You first need to download a set of JSON credentials for your project. Go to **APIs & Auth** > **Credentials** in the [Google Developers Console](https://console.cloud.google.com/) and select **Service account** from the **Add credentials** dropdown.\n\n> This file is your *only copy* of these credentials. It should never be\n> committed with your source code, and should be stored securely.\n\nOnce downloaded, store the path to this file in the `GOOGLE_APPLICATION_CREDENTIALS` environment variable.\n\n#### Enable the API you want to use\n\nBefore making your API call, you must be sure the API you're calling has been enabled. Go to **APIs & Auth** > **APIs** in the [Google Developers Console](https://console.cloud.google.com/) and enable the APIs you'd like to call. For the example below, you must enable the `DNS API`.\n\n\n#### Choosing the correct credential type automatically\n\nRather than manually creating an OAuth2 client, JWT client, or Compute client, the auth library can create the correct credential type for you, depending upon the environment your code is running under.\n\nFor example, a JWT auth client will be created when your code is running on your local developer machine, and a Compute client will be created when the same code is running on Google Cloud Platform. If you need a specific set of scopes, you can pass those in the form of a string or an array to the `GoogleAuth` constructor.\n\nThe code below shows how to retrieve a default credential type, depending upon the runtime environment.\n\n```js\nconst {GoogleAuth} = require('google-auth-library');\n\n/**\n* Instead of specifying the type of client you'd like to use (JWT, OAuth2, etc)\n* this library will automatically choose the right client based on the environment.\n*/\nasync function main() {\n  const auth = new GoogleAuth({\n    scopes: 'https://www.googleapis.com/auth/cloud-platform'\n  });\n  const client = await auth.getClient();\n  const projectId = await auth.getProjectId();\n  const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n  const res = await client.request({ url });\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\n## OAuth2\n\nThis library comes with an [OAuth2](https://developers.google.com/identity/protocols/OAuth2) client that allows you to retrieve an access token and refreshes the token and retry the request seamlessly if you also provide an `expiry_date` and the token is expired. The basics of Google's OAuth2 implementation is explained on [Google Authorization and Authentication documentation](https://developers.google.com/accounts/docs/OAuth2Login).\n\nIn the following examples, you may need a `CLIENT_ID`, `CLIENT_SECRET` and `REDIRECT_URL`. You can find these pieces of information by going to the [Developer Console](https://console.cloud.google.com/), clicking your project > APIs & auth > credentials.\n\nFor more information about OAuth2 and how it works, [see here](https://developers.google.com/identity/protocols/OAuth2).\n\n#### A complete OAuth2 example\n\nLet's take a look at a complete example.\n\n``` js\nconst {OAuth2Client} = require('google-auth-library');\nconst http = require('http');\nconst url = require('url');\nconst open = require('open');\nconst destroyer = require('server-destroy');\n\n// Download your OAuth2 configuration from the Google\nconst keys = require('./oauth2.keys.json');\n\n/**\n* Start by acquiring a pre-authenticated oAuth2 client.\n*/\nasync function main() {\n  const oAuth2Client = await getAuthenticatedClient();\n  // Make a simple request to the People API using our pre-authenticated client. The `request()` method\n  // takes an GaxiosOptions object.  Visit https://github.com/JustinBeckwith/gaxios.\n  const url = 'https://people.googleapis.com/v1/people/me?personFields=names';\n  const res = await oAuth2Client.request({url});\n  console.log(res.data);\n\n  // After acquiring an access_token, you may want to check on the audience, expiration,\n  // or original scopes requested.  You can do that with the `getTokenInfo` method.\n  const tokenInfo = await oAuth2Client.getTokenInfo(\n    oAuth2Client.credentials.access_token\n  );\n  console.log(tokenInfo);\n}\n\n/**\n* Create a new OAuth2Client, and go through the OAuth2 content\n* workflow.  Return the full client to the callback.\n*/\nfunction getAuthenticatedClient() {\n  return new Promise((resolve, reject) => {\n    // create an oAuth client to authorize the API call.  Secrets are kept in a `keys.json` file,\n    // which should be downloaded from the Google Developers Console.\n    const oAuth2Client = new OAuth2Client(\n      keys.web.client_id,\n      keys.web.client_secret,\n      keys.web.redirect_uris[0]\n    );\n\n    // Generate the url that will be used for the consent dialog.\n    const authorizeUrl = oAuth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: 'https://www.googleapis.com/auth/userinfo.profile',\n    });\n\n    // Open an http server to accept the oauth callback. In this simple example, the\n    // only request to our webserver is to /oauth2callback?code=<code>\n    const server = http\n      .createServer(async (req, res) => {\n        try {\n          if (req.url.indexOf('/oauth2callback') > -1) {\n            // acquire the code from the querystring, and close the web server.\n            const qs = new url.URL(req.url, 'http://localhost:3000')\n              .searchParams;\n            const code = qs.get('code');\n            console.log(`Code is ${code}`);\n            res.end('Authentication successful! Please return to the console.');\n            server.destroy();\n\n            // Now that we have the code, use that to acquire tokens.\n            const r = await oAuth2Client.getToken(code);\n            // Make sure to set the credentials on the OAuth2 client.\n            oAuth2Client.setCredentials(r.tokens);\n            console.info('Tokens acquired.');\n            resolve(oAuth2Client);\n          }\n        } catch (e) {\n          reject(e);\n        }\n      })\n      .listen(3000, () => {\n        // open the browser to the authorize url to start the workflow\n        open(authorizeUrl, {wait: false}).then(cp => cp.unref());\n      });\n    destroyer(server);\n  });\n}\n\nmain().catch(console.error);\n```\n\n#### Handling token events\n\nThis library will automatically obtain an `access_token`, and automatically refresh the `access_token` if a `refresh_token` is present.  The `refresh_token` is only returned on the [first authorization](https://github.com/googleapis/google-api-nodejs-client/issues/750#issuecomment-304521450), so if you want to make sure you store it safely. An easy way to make sure you always store the most recent tokens is to use the `tokens` event:\n\n```js\nconst client = await auth.getClient();\n\nclient.on('tokens', (tokens) => {\n  if (tokens.refresh_token) {\n    // store the refresh_token in my database!\n    console.log(tokens.refresh_token);\n  }\n  console.log(tokens.access_token);\n});\n\nconst url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\nconst res = await client.request({ url });\n// The `tokens` event would now be raised if this was the first request\n```\n\n#### Retrieve access token\nWith the code returned, you can ask for an access token as shown below:\n\n``` js\nconst tokens = await oauth2Client.getToken(code);\n// Now tokens contains an access_token and an optional refresh_token. Save them.\noauth2Client.setCredentials(tokens);\n```\n\n#### Obtaining a new Refresh Token\nIf you need to obtain a new `refresh_token`, ensure the call to `generateAuthUrl` sets the `access_type` to `offline`.  The refresh token will only be returned for the first authorization by the user.  To force consent, set the `prompt` property to `consent`:\n\n```js\n// Generate the url that will be used for the consent dialog.\nconst authorizeUrl = oAuth2Client.generateAuthUrl({\n  // To get a refresh token, you MUST set access_type to `offline`.\n  access_type: 'offline',\n  // set the appropriate scopes\n  scope: 'https://www.googleapis.com/auth/userinfo.profile',\n  // A refresh token is only returned the first time the user\n  // consents to providing access.  For illustration purposes,\n  // setting the prompt to 'consent' will force this consent\n  // every time, forcing a refresh_token to be returned.\n  prompt: 'consent'\n});\n```\n\n#### Checking `access_token` information\nAfter obtaining and storing an `access_token`, at a later time you may want to go check the expiration date,\noriginal scopes, or audience for the token.  To get the token info, you can use the `getTokenInfo` method:\n\n```js\n// after acquiring an oAuth2Client...\nconst tokenInfo = await oAuth2Client.getTokenInfo('my-access-token');\n\n// take a look at the scopes originally provisioned for the access token\nconsole.log(tokenInfo.scopes);\n```\n\nThis method will throw if the token is invalid.\n\n#### OAuth2 with Installed Apps (Electron)\nIf you're authenticating with OAuth2 from an installed application (like Electron), you may not want to embed your `client_secret` inside of the application sources. To work around this restriction, you can choose the `iOS` application type when creating your OAuth2 credentials in the [Google Developers console](https://console.cloud.google.com/):\n\n![application type](https://user-images.githubusercontent.com/534619/36553844-3f9a863c-17b2-11e8-904a-29f6cd5f807a.png)\n\nIf using the `iOS` type, when creating the OAuth2 client you won't need to pass a `client_secret` into the constructor:\n```js\nconst oAuth2Client = new OAuth2Client({\n  clientId: <your_client_id>,\n  redirectUri: <your_redirect_uri>\n});\n```\n\n## JSON Web Tokens\nThe Google Developers Console provides a `.json` file that you can use to configure a JWT auth client and authenticate your requests, for example when using a service account.\n\n``` js\nconst {JWT} = require('google-auth-library');\nconst keys = require('./jwt.keys.json');\n\nasync function main() {\n  const client = new JWT({\n    email: keys.client_email,\n    key: keys.private_key,\n    scopes: ['https://www.googleapis.com/auth/cloud-platform'],\n  });\n  const url = `https://dns.googleapis.com/dns/v1/projects/${keys.project_id}`;\n  const res = await client.request({url});\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\nThe parameters for the JWT auth client including how to use it with a `.pem` file are explained in [samples/jwt.js](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/jwt.js).\n\n#### Loading credentials from environment variables\nInstead of loading credentials from a key file, you can also provide them using an environment variable and the `GoogleAuth.fromJSON()` method.  This is particularly convenient for systems that deploy directly from source control (Heroku, App Engine, etc).\n\nStart by exporting your credentials:\n\n```\n$ export CREDS='{\n  \"type\": \"service_account\",\n  \"project_id\": \"your-project-id\",\n  \"private_key_id\": \"your-private-key-id\",\n  \"private_key\": \"your-private-key\",\n  \"client_email\": \"your-client-email\",\n  \"client_id\": \"your-client-id\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"your-cert-url\"\n}'\n```\nNow you can create a new client from the credentials:\n\n```js\nconst {auth} = require('google-auth-library');\n\n// load the environment variable with our keys\nconst keysEnvVar = process.env['CREDS'];\nif (!keysEnvVar) {\n  throw new Error('The $CREDS environment variable was not found!');\n}\nconst keys = JSON.parse(keysEnvVar);\n\nasync function main() {\n  // load the JWT or UserRefreshClient from the keys\n  const client = auth.fromJSON(keys);\n  client.scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n  const url = `https://dns.googleapis.com/dns/v1/projects/${keys.project_id}`;\n  const res = await client.request({url});\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\n#### Using a Proxy\nYou can set the `HTTPS_PROXY` or `https_proxy` environment variables to proxy HTTPS requests. When `HTTPS_PROXY` or `https_proxy` are set, they will be used to proxy SSL requests that do not have an explicit proxy configuration option present.\n\n## Compute\nIf your application is running on Google Cloud Platform, you can authenticate using the default service account or by specifying a specific service account.\n\n**Note**: In most cases, you will want to use [Application Default Credentials](#choosing-the-correct-credential-type-automatically).  Direct use of the `Compute` class is for very specific scenarios.\n\n``` js\nconst {auth, Compute} = require('google-auth-library');\n\nasync function main() {\n  const client = new Compute({\n    // Specifying the service account email is optional.\n    serviceAccountEmail: 'my-service-account@example.com'\n  });\n  const projectId = await auth.getProjectId();\n  const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n  const res = await client.request({url});\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\n## Workload Identity Federation\n\nUsing workload identity federation, your application can access Google Cloud resources from Amazon Web Services (AWS), Microsoft Azure or any identity provider that supports OpenID Connect (OIDC).\n\nTraditionally, applications running outside Google Cloud have used service account keys to access Google Cloud resources. Using identity federation, you can allow your workload to impersonate a service account.\nThis lets you access Google Cloud resources directly, eliminating the maintenance and security burden associated with service account keys.\n\n### Accessing resources from AWS\n\nIn order to access Google Cloud resources from Amazon Web Services (AWS), the following requirements are needed:\n- A workload identity pool needs to be created.\n- AWS needs to be added as an identity provider in the workload identity pool (The Google [organization policy](https://cloud.google.com/iam/docs/manage-workload-identity-pools-providers#restrict) needs to allow federation from AWS).\n- Permission to impersonate a service account needs to be granted to the external identity.\n\nFollow the detailed [instructions](https://cloud.google.com/iam/docs/access-resources-aws) on how to configure workload identity federation from AWS.\n\nAfter configuring the AWS provider to impersonate a service account, a credential configuration file needs to be generated.\nUnlike service account credential files, the generated credential configuration file will only contain non-sensitive metadata to instruct the library on how to retrieve external subject tokens and exchange them for service account access tokens.\nThe configuration file can be generated by using the [gcloud CLI](https://cloud.google.com/sdk/).\n\nTo generate the AWS workload identity configuration, run the following command:\n\n```bash\n# Generate an AWS configuration file.\ngcloud iam workload-identity-pools create-cred-config \\\n    projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$AWS_PROVIDER_ID \\\n    --service-account $SERVICE_ACCOUNT_EMAIL \\\n    --aws \\\n    --output-file /path/to/generated/config.json\n```\n\nWhere the following variables need to be substituted:\n- `$PROJECT_NUMBER`: The Google Cloud project number.\n- `$POOL_ID`: The workload identity pool ID.\n- `$AWS_PROVIDER_ID`: The AWS provider ID.\n- `$SERVICE_ACCOUNT_EMAIL`: The email of the service account to impersonate.\n\nThis will generate the configuration file in the specified output file.\n\nYou can now [start using the Auth library](#using-external-identities) to call Google Cloud resources from AWS.\n\n### Access resources from Microsoft Azure\n\nIn order to access Google Cloud resources from Microsoft Azure, the following requirements are needed:\n- A workload identity pool needs to be created.\n- Azure needs to be added as an identity provider in the workload identity pool (The Google [organization policy](https://cloud.google.com/iam/docs/manage-workload-identity-pools-providers#restrict) needs to allow federation from Azure).\n- The Azure tenant needs to be configured for identity federation.\n- Permission to impersonate a service account needs to be granted to the external identity.\n\nFollow the detailed [instructions](https://cloud.google.com/iam/docs/access-resources-azure) on how to configure workload identity federation from Microsoft Azure.\n\nAfter configuring the Azure provider to impersonate a service account, a credential configuration file needs to be generated.\nUnlike service account credential files, the generated credential configuration file will only contain non-sensitive metadata to instruct the library on how to retrieve external subject tokens and exchange them for service account access tokens.\nThe configuration file can be generated by using the [gcloud CLI](https://cloud.google.com/sdk/).\n\nTo generate the Azure workload identity configuration, run the following command:\n\n```bash\n# Generate an Azure configuration file.\ngcloud iam workload-identity-pools create-cred-config \\\n    projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$AZURE_PROVIDER_ID \\\n    --service-account $SERVICE_ACCOUNT_EMAIL \\\n    --azure \\\n    --output-file /path/to/generated/config.json\n```\n\nWhere the following variables need to be substituted:\n- `$PROJECT_NUMBER`: The Google Cloud project number.\n- `$POOL_ID`: The workload identity pool ID.\n- `$AZURE_PROVIDER_ID`: The Azure provider ID.\n- `$SERVICE_ACCOUNT_EMAIL`: The email of the service account to impersonate.\n\nThis will generate the configuration file in the specified output file.\n\nYou can now [start using the Auth library](#using-external-identities) to call Google Cloud resources from Azure.\n\n### Accessing resources from an OIDC identity provider\n\nIn order to access Google Cloud resources from an identity provider that supports [OpenID Connect (OIDC)](https://openid.net/connect/), the following requirements are needed:\n- A workload identity pool needs to be created.\n- An OIDC identity provider needs to be added in the workload identity pool (The Google [organization policy](https://cloud.google.com/iam/docs/manage-workload-identity-pools-providers#restrict) needs to allow federation from the identity provider).\n- Permission to impersonate a service account needs to be granted to the external identity.\n\nFollow the detailed [instructions](https://cloud.google.com/iam/docs/access-resources-oidc) on how to configure workload identity federation from an OIDC identity provider.\n\nAfter configuring the OIDC provider to impersonate a service account, a credential configuration file needs to be generated.\nUnlike service account credential files, the generated credential configuration file will only contain non-sensitive metadata to instruct the library on how to retrieve external subject tokens and exchange them for service account access tokens.\nThe configuration file can be generated by using the [gcloud CLI](https://cloud.google.com/sdk/).\n\nFor OIDC providers, the Auth library can retrieve OIDC tokens either from a local file location (file-sourced credentials) or from a local server (URL-sourced credentials).\n\n**File-sourced credentials**\nFor file-sourced credentials, a background process needs to be continuously refreshing the file location with a new OIDC token prior to expiration.\nFor tokens with one hour lifetimes, the token needs to be updated in the file every hour. The token can be stored directly as plain text or in JSON format.\n\nTo generate a file-sourced OIDC configuration, run the following command:\n\n```bash\n# Generate an OIDC configuration file for file-sourced credentials.\ngcloud iam workload-identity-pools create-cred-config \\\n    projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$OIDC_PROVIDER_ID \\\n    --service-account $SERVICE_ACCOUNT_EMAIL \\\n    --credential-source-file $PATH_TO_OIDC_ID_TOKEN \\\n    # Optional arguments for file types. Default is \"text\":\n    # --credential-source-type \"json\" \\\n    # Optional argument for the field that contains the OIDC credential.\n    # This is required for json.\n    # --credential-source-field-name \"id_token\" \\\n    --output-file /path/to/generated/config.json\n```\n\nWhere the following variables need to be substituted:\n- `$PROJECT_NUMBER`: The Google Cloud project number.\n- `$POOL_ID`: The workload identity pool ID.\n- `$OIDC_PROVIDER_ID`: The OIDC provider ID.\n- `$SERVICE_ACCOUNT_EMAIL`: The email of the service account to impersonate.\n- `$PATH_TO_OIDC_ID_TOKEN`: The file path where the OIDC token will be retrieved from. \n\nThis will generate the configuration file in the specified output file.\n\n**URL-sourced credentials**\nFor URL-sourced credentials, a local server needs to host a GET endpoint to return the OIDC token. The response can be in plain text or JSON.\nAdditional required request headers can also be specified.\n\nTo generate a URL-sourced OIDC workload identity configuration, run the following command:\n\n```bash\n# Generate an OIDC configuration file for URL-sourced credentials.\ngcloud iam workload-identity-pools create-cred-config \\\n    projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$OIDC_PROVIDER_ID \\\n    --service-account $SERVICE_ACCOUNT_EMAIL \\\n    --credential-source-url $URL_TO_GET_OIDC_TOKEN \\\n    --credential-source-headers $HEADER_KEY=$HEADER_VALUE \\\n    # Optional arguments for file types. Default is \"text\":\n    # --credential-source-type \"json\" \\\n    # Optional argument for the field that contains the OIDC credential.\n    # This is required for json.\n    # --credential-source-field-name \"id_token\" \\\n    --output-file /path/to/generated/config.json\n```\n\nWhere the following variables need to be substituted:\n- `$PROJECT_NUMBER`: The Google Cloud project number.\n- `$POOL_ID`: The workload identity pool ID.\n- `$OIDC_PROVIDER_ID`: The OIDC provider ID.\n- `$SERVICE_ACCOUNT_EMAIL`: The email of the service account to impersonate.\n- `$URL_TO_GET_OIDC_TOKEN`: The URL of the local server endpoint to call to retrieve the OIDC token.\n- `$HEADER_KEY` and `$HEADER_VALUE`: The additional header key/value pairs to pass along the GET request to `$URL_TO_GET_OIDC_TOKEN`, e.g. `Metadata-Flavor=Google`.\n\nYou can now [start using the Auth library](#using-external-identities) to call Google Cloud resources from an OIDC provider.\n\n### Using External Identities\n\nExternal identities (AWS, Azure and OIDC-based providers) can be used with `Application Default Credentials`.\nIn order to use external identities with Application Default Credentials, you need to generate the JSON credentials configuration file for your external identity as described above.\nOnce generated, store the path to this file in the `GOOGLE_APPLICATION_CREDENTIALS` environment variable.\n\n```bash\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/config.json\n```\n\nThe library can now automatically choose the right type of client and initialize credentials from the context provided in the configuration file.\n\n```js\nasync function main() {\n  const auth = new GoogleAuth({\n    scopes: 'https://www.googleapis.com/auth/cloud-platform'\n  });\n  const client = await auth.getClient();\n  const projectId = await auth.getProjectId();\n  // List all buckets in a project.\n  const url = `https://storage.googleapis.com/storage/v1/b?project=${projectId}`;\n  const res = await client.request({ url });\n  console.log(res.data);\n}\n```\n\nWhen using external identities with Application Default Credentials in Node.js, the `roles/browser` role needs to be granted to the service account.\nThe `Cloud Resource Manager API` should also be enabled on the project.\nThis is needed since the library will try to auto-discover the project ID from the current environment using the impersonated credential.\nTo avoid this requirement, the project ID can be explicitly specified on initialization.\n\n```js\nconst auth = new GoogleAuth({\n  scopes: 'https://www.googleapis.com/auth/cloud-platform',\n  // Pass the project ID explicitly to avoid the need to grant `roles/browser` to the service account\n  // or enable Cloud Resource Manager API on the project.\n  projectId: 'CLOUD_RESOURCE_PROJECT_ID',\n});\n```\n\nYou can also explicitly initialize external account clients using the generated configuration file.\n\n```js\nconst {ExternalAccountClient} = require('google-auth-library');\nconst jsonConfig = require('/path/to/config.json');\n\nasync function main() {\n  const client = ExternalAccountClient.fromJSON(jsonConfig);\n  client.scopes = ['https://www.googleapis.com/auth/cloud-platform'];\n  // List all buckets in a project.\n  const url = `https://storage.googleapis.com/storage/v1/b?project=${projectId}`;\n  const res = await client.request({url});\n  console.log(res.data);\n}\n```\n\n## Working with ID Tokens\n### Fetching ID Tokens\nIf your application is running on Cloud Run or Cloud Functions, or using Cloud Identity-Aware\nProxy (IAP), you will need to fetch an ID token to access your application. For\nthis, use the method `getIdTokenClient` on the `GoogleAuth` client.\n\nFor invoking Cloud Run services, your service account will need the\n[`Cloud Run Invoker`](https://cloud.google.com/run/docs/authenticating/service-to-service)\nIAM permission.\n\nFor invoking Cloud Functions, your service account will need the\n[`Function Invoker`](https://cloud.google.com/functions/docs/securing/authenticating#function-to-function)\nIAM permission.\n\n``` js\n// Make a request to a protected Cloud Run service.\nconst {GoogleAuth} = require('google-auth-library');\n\nasync function main() {\n  const url = 'https://cloud-run-1234-uc.a.run.app';\n  const auth = new GoogleAuth();\n  const client = await auth.getIdTokenClient(url);\n  const res = await client.request({url});\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\nA complete example can be found in [`samples/idtokens-serverless.js`](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/idtokens-serverless.js).\n\nFor invoking Cloud Identity-Aware Proxy, you will need to pass the Client ID\nused when you set up your protected resource as the target audience.\n\n``` js\n// Make a request to a protected Cloud Identity-Aware Proxy (IAP) resource\nconst {GoogleAuth} = require('google-auth-library');\n\nasync function main()\n  const targetAudience = 'iap-client-id';\n  const url = 'https://iap-url.com';\n  const auth = new GoogleAuth();\n  const client = await auth.getIdTokenClient(targetAudience);\n  const res = await client.request({url});\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\nA complete example can be found in [`samples/idtokens-iap.js`](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/idtokens-iap.js).\n\n### Verifying ID Tokens\n\nIf you've [secured your IAP app with signed headers](https://cloud.google.com/iap/docs/signed-headers-howto),\nyou can use this library to verify the IAP header:\n\n```js\nconst {OAuth2Client} = require('google-auth-library');\n// Expected audience for App Engine.\nconst expectedAudience = `/projects/your-project-number/apps/your-project-id`;\n// IAP issuer\nconst issuers = ['https://cloud.google.com/iap'];\n// Verify the token. OAuth2Client throws an Error if verification fails\nconst oAuth2Client = new OAuth2Client();\nconst response = await oAuth2Client.getIapCerts();\nconst ticket = await oAuth2Client.verifySignedJwtWithCertsAsync(\n  idToken,\n  response.pubkeys,\n  expectedAudience,\n  issuers\n);\n\n// Print out the info contained in the IAP ID token\nconsole.log(ticket)\n```\n\nA complete example can be found in [`samples/verifyIdToken-iap.js`](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/verifyIdToken-iap.js).\n\n## Impersonated Credentials Client\n\nGoogle Cloud Impersonated credentials used for [Creating short-lived service account credentials](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials).\n\nProvides authentication for applications where local credentials impersonates a remote service account using [IAM Credentials API](https://cloud.google.com/iam/docs/reference/credentials/rest).\n\nAn Impersonated Credentials Client is instantiated with a `sourceClient`. This\nclient should use credentials that have the \"Service Account Token Creator\" role (`roles/iam.serviceAccountTokenCreator`),\nand should authenticate with the `https://www.googleapis.com/auth/cloud-platform`, or `https://www.googleapis.com/auth/iam` scopes.\n\n`sourceClient` is used by the Impersonated\nCredentials Client to impersonate a target service account with a specified\nset of scopes.\n\n### Sample Usage\n\n```javascript\nconst { GoogleAuth, Impersonated } = require('google-auth-library');\nconst { SecretManagerServiceClient } = require('@google-cloud/secret-manager');\n\nasync function main() {\n\n  // Acquire source credentials:\n  const auth = new GoogleAuth();\n  const client = await auth.getClient();\n\n  // Impersonate new credentials:\n  let targetClient = new Impersonated({\n    sourceClient: client,\n    targetPrincipal: 'impersonated-account@projectID.iam.gserviceaccount.com',\n    lifetime: 30,\n    delegates: [],\n    targetScopes: ['https://www.googleapis.com/auth/cloud-platform']\n  });\n\n  // Get impersonated credentials:\n  const authHeaders = await targetClient.getRequestHeaders();\n  // Do something with `authHeaders.Authorization`.\n\n  // Use impersonated credentials:\n  const url = 'https://www.googleapis.com/storage/v1/b?project=anotherProjectID'\n  const resp = await targetClient.request({ url });\n  for (const bucket of resp.data.items) {\n    console.log(bucket.name);\n  }\n\n  // Use impersonated credentials with google-cloud client library\n  // Note: this works only with certain cloud client libraries utilizing gRPC \n  //    e.g., SecretManager, KMS, AIPlatform\n  // will not currently work with libraries using REST, e.g., Storage, Compute\n  const smClient = new SecretManagerServiceClient({\n    projectId: anotherProjectID,\n    auth: {\n      getClient: () => targetClient,\n    },\n  });\n  const secretName = 'projects/anotherProjectNumber/secrets/someProjectName/versions/1';\n  const [accessResponse] = await smClient.accessSecretVersion({\n    name: secretName,\n  });\n\n  const responsePayload = accessResponse.payload.data.toString('utf8');\n  // Do something with the secret contained in `responsePayload`.\n};\n\nmain();\n```\n\n\n## Samples\n\nSamples are in the [`samples/`](https://github.com/googleapis/google-auth-library-nodejs/tree/main/samples) directory. Each sample's `README.md` has instructions for running its sample.\n\n| Sample                      | Source Code                       | Try it |\n| --------------------------- | --------------------------------- | ------ |\n| Adc | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/adc.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/adc.js,samples/README.md) |\n| Compute | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/compute.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/compute.js,samples/README.md) |\n| Credentials | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/credentials.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/credentials.js,samples/README.md) |\n| Headers | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/headers.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/headers.js,samples/README.md) |\n| ID Tokens for Identity-Aware Proxy (IAP) | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/idtokens-iap.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/idtokens-iap.js,samples/README.md) |\n| ID Tokens for Serverless | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/idtokens-serverless.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/idtokens-serverless.js,samples/README.md) |\n| Jwt | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/jwt.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/jwt.js,samples/README.md) |\n| Keepalive | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/keepalive.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/keepalive.js,samples/README.md) |\n| Keyfile | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/keyfile.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/keyfile.js,samples/README.md) |\n| Oauth2-code Verifier | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/oauth2-codeVerifier.js,samples/README.md) |\n| Oauth2 | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/oauth2.js,samples/README.md) |\n| Sign Blob | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/signBlob.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/signBlob.js,samples/README.md) |\n| Verifying ID Tokens from Identity-Aware Proxy (IAP) | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/verifyIdToken-iap.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/verifyIdToken-iap.js,samples/README.md) |\n| Verify Id Token | [source code](https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/verifyIdToken.js) | [![Open in Cloud Shell][shell_img]](https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/googleapis/google-auth-library-nodejs&page=editor&open_in_editor=samples/verifyIdToken.js,samples/README.md) |\n\n\n\nThe [Google Auth Library Node.js Client API Reference][client-docs] documentation\nalso contains samples.\n\n## Supported Node.js Versions\n\nOur client libraries follow the [Node.js release schedule](https://nodejs.org/en/about/releases/).\nLibraries are compatible with all current _active_ and _maintenance_ versions of\nNode.js.\n\nClient libraries targeting some end-of-life versions of Node.js are available, and\ncan be installed via npm [dist-tags](https://docs.npmjs.com/cli/dist-tag).\nThe dist-tags follow the naming convention `legacy-(version)`.\n\n_Legacy Node.js versions are supported as a best effort:_\n\n* Legacy versions will not be tested in continuous integration.\n* Some security patches may not be able to be backported.\n* Dependencies will not be kept up-to-date, and features will not be backported.\n\n#### Legacy tags available\n\n* `legacy-8`: install client libraries from this dist-tag for versions\n  compatible with Node.js 8.\n\n## Versioning\n\nThis library follows [Semantic Versioning](http://semver.org/).\n\n\nThis library is considered to be **General Availability (GA)**. This means it\nis stable; the code surface will not change in backwards-incompatible ways\nunless absolutely necessary (e.g. because of critical security issues) or with\nan extensive deprecation period. Issues and requests against **GA** libraries\nare addressed with the highest priority.\n\n\n\n\n\nMore Information: [Google Cloud Platform Launch Stages][launch_stages]\n\n[launch_stages]: https://cloud.google.com/terms/launch-stages\n\n## Contributing\n\nContributions welcome! See the [Contributing Guide](https://github.com/googleapis/google-auth-library-nodejs/blob/main/CONTRIBUTING.md).\n\nPlease note that this `README.md`, the `samples/README.md`,\nand a variety of configuration files in this repository (including `.nycrc` and `tsconfig.json`)\nare generated from a central template. To edit one of these files, make an edit\nto its templates in\n[directory](https://github.com/googleapis/synthtool).\n\n## License\n\nApache Version 2.0\n\nSee [LICENSE](https://github.com/googleapis/google-auth-library-nodejs/blob/main/LICENSE)\n\n[client-docs]: https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest\n[product-docs]: https://cloud.google.com/docs/authentication/\n[shell_img]: https://gstatic.com/cloudssh/images/open-btn.png\n[projects]: https://console.cloud.google.com/project\n[billing]: https://support.google.com/cloud/answer/6293499#enable-billing\n\n[auth]: https://cloud.google.com/docs/authentication/getting-started\n",
    "licenseText": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/google-auth-library/-/google-auth-library-7.10.2.tgz#7e48176f50e725e1d65b6a838ec9e9464e6ba689",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/google-auth-library/-/google-auth-library-7.10.2.tgz",
    "hash": "7e48176f50e725e1d65b6a838ec9e9464e6ba689",
    "integrity": "sha512-M37o9Kxa/TLvOLgF71SXvLeVEP5sbSTmKl1zlIgl72SFy5PtsU3pOdu8G8MIHHpQ3/NZabDI8rQkA9DvQVKkPA==",
    "registry": "npm",
    "packageName": "google-auth-library",
    "cacheIntegrity": "sha512-M37o9Kxa/TLvOLgF71SXvLeVEP5sbSTmKl1zlIgl72SFy5PtsU3pOdu8G8MIHHpQ3/NZabDI8rQkA9DvQVKkPA== sha1-fkgXb1DnJeHWW2qDjsnpRk5rpok="
  },
  "registry": "npm",
  "hash": "7e48176f50e725e1d65b6a838ec9e9464e6ba689"
}