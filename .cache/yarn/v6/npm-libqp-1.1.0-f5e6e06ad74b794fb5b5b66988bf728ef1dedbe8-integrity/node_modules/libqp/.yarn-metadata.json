{
  "manifest": {
    "name": "libqp",
    "version": "1.1.0",
    "description": "Encode and decode quoted-printable strings according to rfc2045",
    "main": "lib/libqp.js",
    "scripts": {
      "test": "grunt"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/andris9/libqp.git"
    },
    "keywords": [
      "quoted-printable",
      "mime"
    ],
    "author": {
      "name": "Andris Reinman"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/andris9/libqp/issues"
    },
    "homepage": "https://github.com/andris9/libqp",
    "devDependencies": {
      "chai": "~3.3.0",
      "grunt": "~0.4.5",
      "grunt-contrib-jshint": "~0.11.3",
      "grunt-mocha-test": "~0.12.7",
      "mocha": "^2.3.3"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-libqp-1.1.0-f5e6e06ad74b794fb5b5b66988bf728ef1dedbe8-integrity/node_modules/libqp/package.json",
    "readmeFilename": "README.md",
    "readme": "# libqp\n\nEncode and decode quoted-printable strings according to [RFC2045](http://tools.ietf.org/html/rfc2045#section-6.7).\n\n## Usage\n\nInstall with npm\n\n    npm install libqp\n\nRequire in your script\n\n```javascript\nvar libqp = require('libqp');\n```\n\n### Encode values\n\nEncode Buffer objects or unicode strings with\n\n    libqp.encode(val) → String\n\nWhere\n\n  * **val** is a Buffer or an unicode string\n\n**Example**\n\n```javascript\nlibqp.encode('jõgeva');\n// j=C3=B5geva\n```\n\n### Wrap encoded values\n\nQuoted-Printable encoded lines are limited to 76 characters but `encode` method might return lines longer than the limit.\n\nTo enforce soft line breaks on lines longer than 76 (or any other length) characters, use `wrap`\n\n    libqp.wrap(str[, lineLength]) → String\n\nWhere\n\n  * **str** is a Quoted-Printable encoded string\n  * **lineLength** (defaults to 76) is the maximum allowed line length. Any longer line will be soft wrapped\n\n**Example**\n\n```javascript\nlibqp.wrap('abc j=C3=B5geva', 10)\n// abc j=\\r\\n\n// =C3=B5geva\n```\n\n### Transform Streams\n\n`libqp` makes it possible to encode and decode streams with `libqp.Encoder` and `libqp.Decoder` constructors.\n\n### Encoder Stream\n\nCreate new Encoder Stream with\n\n    var encoder = new libqp.Encoder([options])\n\nWhere\n\n  * **options** is the optional stream options object with an additional option `lineLength` if you want to use any other line length than the default 76 characters (or set to `false` to turn the soft wrapping off completely)\n\n**Example**\n\nThe following example script reads in a file, encodes it to Quoted-Printable and saves the output to a file.\n\n```javascript\nvar libqp = require('libqp');\nvar fs = require('fs');\nvar source = fs.createReadStream('source.txt');\nvar encoded = fs.createReadStream('encoded.txt');\nvar encoder = new libqp.Encoder();\n\nsource.pipe(encoder).pipe(encoded);\n```\n\n### Decoder Stream\n\nCreate new Decoder Stream with\n\n    var decoder = new libqp.Decoder([options])\n\nWhere\n\n  * **options** is the optional stream options object\n\n**Example**\n\nThe following example script reads in a file in Quoted-Printable encoding, decodes it and saves the output to a file.\n\n```javascript\nvar libqp = require('libqp');\nvar fs = require('fs');\nvar encoded = fs.createReadStream('encoded.txt');\nvar dest = fs.createReadStream('dest.txt');\nvar decoder = new libqp.Decoder();\n\nencoded.pipe(decoder).pipe(dest);\n```\n\n## License\n\n**MIT**",
    "licenseText": "Copyright (c) 2014 Andris Reinman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/libqp/-/libqp-1.1.0.tgz#f5e6e06ad74b794fb5b5b66988bf728ef1dedbe8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/libqp/-/libqp-1.1.0.tgz",
    "hash": "f5e6e06ad74b794fb5b5b66988bf728ef1dedbe8",
    "integrity": "sha1-9ebgatdLeU+1tbZpiL9yjvHe2+g=",
    "registry": "npm",
    "packageName": "libqp",
    "cacheIntegrity": "sha512-4Rgfa0hZpG++t1Vi2IiqXG9Ad1ig4QTmtuZF946QJP4bPqOYC78ixUXgz5TW/wE7lNaNKlplSYTxQ+fR2KZ0EA== sha1-9ebgatdLeU+1tbZpiL9yjvHe2+g="
  },
  "registry": "npm",
  "hash": "f5e6e06ad74b794fb5b5b66988bf728ef1dedbe8"
}