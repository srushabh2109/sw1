{
  "manifest": {
    "name": "react-with-styles",
    "version": "4.2.0",
    "description": "[![Build Status][travis-svg]][travis-url] [![dependency status][deps-svg]][deps-url] [![dev dependency status][dev-deps-svg]][dev-deps-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url]",
    "main": "lib/withStyles.js",
    "scripts": {
      "build": "npm run clean && babel src/ -d lib/",
      "check-changelog": "expr $(git status --porcelain 2>/dev/null| grep \"^\\s*M.*CHANGELOG.md\" | wc -l) >/dev/null || (echo 'Please edit CHANGELOG.md' && exit 1)",
      "check-only-changelog-changed": "(expr $(git status --porcelain 2>/dev/null| grep -v \"CHANGELOG.md\" | wc -l) >/dev/null && echo 'Only CHANGELOG.md may have uncommitted changes' && exit 1) || exit 0",
      "clean": "rimraf lib",
      "lint": "eslint --ext .js,.jsx .",
      "mocha": "mocha test",
      "mocha:debugger": "mocha --inspect-brk",
      "postversion": "git commit package.json CHANGELOG.md -m \"Version $npm_package_version\" && npm run tag && git push && git push --tags && npm publish",
      "prepublish": "in-publish && safe-publish-latest && npm run build || not-in-publish",
      "pretest": "npm run --silent lint",
      "preversion": "npm run test && npm run check-changelog && npm run check-only-changelog-changed",
      "tag": "git tag v$npm_package_version",
      "test": "npm run tests-only",
      "tests-only": "npm run mocha --silent test",
      "version:major": "npm --no-git-tag-version version major",
      "version:minor": "npm --no-git-tag-version version minor",
      "version:patch": "npm --no-git-tag-version version patch"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/airbnb/react-with-styles.git"
    },
    "keywords": [
      "react",
      "css",
      "styles",
      "aphrodite",
      "radium",
      "inline",
      "styles",
      "react",
      "native"
    ],
    "author": {
      "name": "Joe Lencioni",
      "email": "joe.lencioni@airbnb.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/airbnb/react-with-styles/issues"
    },
    "homepage": "https://github.com/airbnb/react-with-styles#readme",
    "devDependencies": {
      "@babel/cli": "^7.5.5",
      "@babel/core": "^7.5.5",
      "@babel/register": "^7.5.5",
      "@babel/runtime": "^7.0.0",
      "airbnb-js-shims": "^2.2.0",
      "babel-plugin-transform-replace-object-assign": "^2.0.0",
      "babel-preset-airbnb": "^4.0.1",
      "chai": "^4.2.0",
      "enzyme": "^3.10.0",
      "enzyme-adapter-react-16": "^1.14.0",
      "enzyme-adapter-react-helper": "^1.3.6",
      "eslint": "^5.16.0",
      "eslint-config-airbnb": "^18.0.1",
      "eslint-plugin-import": "^2.18.2",
      "eslint-plugin-jsx-a11y": "^6.2.3",
      "eslint-plugin-react": "^7.14.3",
      "eslint-plugin-react-hooks": "^1.7.0",
      "in-publish": "^2.0.0",
      "jsdom": "^14.1.0",
      "jsdom-global": "3.0.2",
      "mocha": "^5.2.0",
      "react": "^16.8.6",
      "react-dom": "^16.8.6",
      "react-test-renderer": "^16.8.6",
      "rimraf": "^3.0.0",
      "safe-publish-latest": "^1.1.2",
      "sinon": "^6.3.5",
      "sinon-sandbox": "^2.0.5"
    },
    "peerDependencies": {
      "@babel/runtime": "^7.0.0",
      "react": ">=0.14",
      "react-with-direction": "^1.3.1"
    },
    "dependencies": {
      "airbnb-prop-types": "^2.14.0",
      "hoist-non-react-statics": "^3.2.1",
      "object.assign": "^4.1.0",
      "prop-types": "^15.7.2",
      "react-with-direction": "^1.3.1"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-react-with-styles-4.2.0-0b8a8e5d94d082518b9f564f6fcf6103e28096c5-integrity/node_modules/react-with-styles/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-with-styles <sup>[![Version Badge][npm-version-svg]][package-url]</sup>\n\n[![Build Status][travis-svg]][travis-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\nUse CSS-in-JavaScript for your React components without being tightly coupled to one implementation (e.g. [Aphrodite][aphrodite], [Radium][radium], or [React Native][react-native]). Easily access shared theme information (e.g. colors, fonts) when defining your styles.\n\n## Interfaces\n\n- [Aphrodite][interface-aphrodite]\n- [JSS][interface-jss]\n- [React Native][interface-react-native]\n- [CSS][interface-css]\n\n[interface-aphrodite]: https://github.com/airbnb/react-with-styles-interface-aphrodite\n[interface-jss]: https://github.com/oliviertassinari/react-with-styles-interface-jss\n[interface-react-native]: https://github.com/airbnb/react-with-styles-interface-react-native\n[interface-css]: https://github.com/airbnb/react-with-styles-interface-css\n\n## Other resources\n\n- [eslint-plugin-react-with-styles][eslint-plugin-react-with-styles]: ESLint plugin for react-with-styles.\n\n[eslint-plugin-react-with-styles]: https://github.com/airbnb/eslint-plugin-react-with-styles\n\n## How to use\n\n### Step 1. Define your theme\n\nCreate a module that exports an object with shared theme information like colors.\n\n```js\nexport default {\n  color: {\n    primary: '#FF5A5F',\n    secondary: '#00A699',\n  },\n};\n```\n\n### Step 2. Choose an interface\n\nYou will need to choose the `react-with-styles` interface that corresponds to the underlying CSS-in-JS framework that you use in your app. Take a look through the list of [existing interfaces](#interfaces), or write your own!\n\nIf you choose to write your own, the interface must implement the following functions:\n\nFunction | Description\n--- | ---\n`create` | Function that outputs the `styles` object injected through props.<br />(Optional, but required if `createLTR` is not provided).\n`createLTR` | LTR version of `create`.<br />(Required, unless a `create` function is provided)\n`createRTL` | RTL version of `create`.<br />(Required, unless a `create` function is provided)\n`resolve` | This is the `css` function that is injected through props. It outputs the attributes used to style an HTML element.<br />(Optional, but required if no `resolveLTR` is provided)\n`resolveLTR` | LTR version of `resolve`.<br />(Required, unless the `resolve` function is provided)\n`resolveRTL` | RTL version of `resolve`.<br />(Required, unless the `resolve` function is provided)\n`flush?` | Flush buffered styles before rendering. This can mean anything you need to happen before rendering.<br />(Optional)\n\n### Step 3. Register the chosen theme and interface\n\n#### Option 1: Using React Context (recommended)\n\n☝️ _Requires React 16.6+_\n\nAs of version `4.0.0`, registering the theme and interface can be accomplished through [React context](https://reactjs.org/docs/context.html), and is the recommended way of registering the theme, interface, and direction.\n\nFor example, if your theme is exported by `MyTheme.js`, and you want to use Aphrodite through the `react-with-styles-interface-aphrodite` insterface, wrap your application with the `WithStylesContext.Provider` to provide `withStyles` with that interface and theme:\n\n```jsx\nimport React from 'react';\nimport WithStylesContext from 'react-with-styles/lib/WithStylesContext';\nimport AphroditeInterface from 'react-with-styles-interface-aphrodite';\nimport MyTheme from './MyTheme';\n\nexport default function Bootstrap({ direction }) {\n  return (\n    <WithStylesContext.Provider\n      value={{\n        stylesInterface: AphroditeInterface,\n        stylesTheme: MyTheme,\n        direction,\n      }}\n    >\n      <App />\n    </WithStylesContext.Provider>\n  );\n}\n```\n\nTo support your users in an RTL context, we recommend using `react-with-styles` along with [`react-with-direction`](https://github.com/airbnb/react-with-direction). You can provide the direction directly if you have a utility that determines it like in the example above, or you can use the provided utility, `WithStylesDirectionAdapter`, to grab the direction that's already been set on the `react-with-direction` context and amend `WithStylesContext` with it.\n\n```jsx\nimport React from 'react';\nimport WithStylesContext from 'react-with-styles/lib/WithStylesContext';\nimport WithStylesDirectionAdapter from 'react-with-styles/lib/providers/WithStylesDirectionAdapter';\nimport AphroditeInterface from 'react-with-styles-interface-aphrodite';\nimport MyTheme from './MyTheme';\n\nexport default function Bootstrap() {\n  return (\n    <WithStylesContext.Provider\n      value={{\n        stylesInterface: AphroditeInterface,\n        stylesTheme: MyTheme,\n      }}\n    >\n      <WithStylesDirectionAdapter>\n        <App />\n      </WithStylesDirectionAdapter>\n    </WithStylesContext.Provider>\n  );\n}\n```\n\nOr simply wrap the `Bootstrap` function above in `withDirection` yourself.\n\n☝️ **Note on performance**: Changing the theme many times will cause components to recalculate their styles. Avoid recalculating styles by providing one theme at the highest possible level of your app.\n\n#### Option 2: Using the ThemedStyleSheet (legacy)\n\nThe legacy singleton-based API (using `ThemedStyleSheet`) is still supported, so you can still use it to register the theme and interface. You do not have to do this if you use the `WithStylesContext.Provider`. Keep in mind that this API will be deprecated in the next major version of `react-with-styles`. You can set this up in your own `withStyles.js` file, like so:\n\n```js\nimport ThemedStyleSheet from 'react-with-styles/lib/ThemedStyleSheet';\nimport AphroditeInterface from 'react-with-styles-interface-aphrodite';\nimport { withStyles } from 'react-with-styles';\n\nimport MyTheme from './MyTheme';\n\nThemedStyleSheet.registerTheme(MyTheme);\nThemedStyleSheet.registerInterface(AphroditeInterface);\n\nexport { withStyles, ThemedStyleSheet };\n```\n\nIt is convenient to pass through `withStyles` from `react-with-styles` here so that everywhere you use them you can be assured that the theme and interface have been registered. You could likely also set this up as an initializer that is added to the top of your bundles and then use `react-with-styles` directly in your components.\n\n✋ Because the `ThemedStyleSheet` implementation stores the theme and interface in variables outside of the React tree, we do not recommended it. This approach does not parallelize, especially if your build systems or apps require rendering with multiple themes.\n\n### Step 4. Styling your components\n\nIn your components, use `withStyles()` to define styles. This HOC will inject the right props to consume them through the CSS-in-JS implementation you chose.\n\n```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, withStylesPropTypes } from './withStyles';\n\nconst propTypes = {\n  ...withStylesPropTypes,\n};\n\nfunction MyComponent({ styles, css }) {\n  return (\n    <div>\n      <a\n        href=\"/somewhere\"\n        {...css(styles.firstLink)}\n      >\n        A link to somewhere\n      </a>\n\n      {' '}\n      and\n      {' '}\n\n      <a\n        href=\"/somewhere-else\"\n        {...css(styles.secondLink)}\n      >\n        a link to somewhere else\n      </a>\n    </div>\n  );\n}\n\nMyComponent.propTypes = propTypes;\n\nexport default withStyles(({ color }) => ({\n  firstLink: {\n    color: color.primary,\n  },\n\n  secondLink: {\n    color: color.secondary,\n  },\n}))(MyComponent);\n```\n\nYou can also use [the `useStyles` hook or a decorator](#withstyles-stylesthunk--options--).\n\n---\n\n## Documentation\n\n### `withStyles([ stylesThunk [, options ] ])`\n\nThis is a higher-order function that returns a higher-order component used to wrap React components to add styles using the theme. We use this to make themed styles easier to work with.\n\n`stylesThunk` will receive the theme as an argument, and it should return an object containing the styles for the component.\n\nThe wrapped component will receive the following props:\n\n1. `styles` - Object containing the processed styles for this component. It corresponds to evaluating `stylesInterface.create(stylesThunk(theme))` (or their directional counterparts).\n2. `css` - Function to produce props to set the styles with on an element. It corresponds to `stylesInterface.resolve` (or their directional counterparts).\n3. `theme` - This is the theme object that was registered. You can use it during render as needed, say for inline styles.\n\n#### Example usage\n\nYou can use `withStyles()` as an HOC:\n\n```jsx\nimport React from 'react';\nimport { withStyles } from './withStyles';\n\nfunction MyComponent({ css, styles }) {\n  return (\n    <div {...css(styles.container)}>\n      Try to be a rainbow in someone's cloud.\n    </div>\n  );\n}\n\nexport default withStyles(({ color, unit }) => ({\n  container: {\n    color: color.primary,\n    marginBottom: 2 * unit,\n  },\n}))(MyComponent);\n```\n\nAs a decorator:\n\n```jsx\nimport React from 'react';\nimport { withStyles } from './withStyles';\n\n@withStyles(({ color, unit }) => ({\n  container: {\n    color: color.primary,\n    marginBottom: 2 * unit,\n  },\n}))\nexport default function MyComponent({ styles, css }) {\n  return (\n    <div {...css(styles.container)}>\n      Try to be a rainbow in someone's cloud.\n    </div>\n  );\n}\n```\n\nYou can also use the experimental hook:\n\n```jsx\nimport React from 'react';\nimport useStyles from 'react-with-styles/lib/hooks/useStyles';\n\nfunction stylesFn({ color, unit }) {\n  return ({\n    container: {\n      color: color.primary,\n      marginBottom: 2 * unit,\n    },\n  });\n}\n\nexport default function MyComponent() {\n  const { css, styles } = useStyles({ stylesFn });\n  return (\n    <div {...css(styles.container)}>\n      Try to be a rainbow in someone's cloud.\n    </div>\n  );\n}\n```\n\n#### Options\n\n##### `pureComponent` (default: `false`)\n\nBy default `withStyles()` will create a functional component. If you want to apply the rendering optimizations offered by `React.memo`, you can set the `pureComponent` option to `true` to create a pure functional component instead.\n\nIf using the `withStyles` utility that is found in `lib/deprecated/withStyles`, it will instead use a `React.PureComponent` rather than a `React.Component`. Note that this has a React version requirement of 15.3.0+.\n\n#### `stylesPropName` (default: `'styles'`)\n\nBy default, `withStyles()` will pass down the styles to the wrapped component in the `styles` prop, but the name of this prop can be customized by setting the `stylesPropName` option. This is useful if you already have a prop called `styles` and aren't able to change it.\n\n```jsx\nimport React from 'react';\nimport { withStyles, withStylesPropTypes } from './withStyles';\n\nfunction MyComponent({ withStylesStyles, css }) {\n  return (\n    <div {...css(withStylesStyles.container)}>\n      Try to be a rainbow in someone's cloud.\n    </div>\n  );\n}\n\nMyComponent.propTypes = {\n  ...withStylesPropTypes,\n};\n\nexport default withStyles(({ color, unit }) => ({\n  container: {\n    color: color.primary,\n    marginBottom: 2 * unit,\n  },\n}), { stylesPropName: 'withStylesStyles' })(MyComponent);\n```\n\n##### `cssPropName` (default `'css'`)\n\nThe css prop name can also be customized by setting the `cssPropName` option.\n\n```jsx\nimport React from 'react';\nimport { withStyles, withStylesPropTypes } from './withStyles';\n\nfunction MyComponent({ withStylesCss, styles }) {\n  return (\n    <div {...withStylesCss(styles.container)}>\n      Try to be a rainbow in someone's cloud.\n    </div>\n  );\n}\n\nMyComponent.propTypes = {\n  ...withStylesPropTypes,\n};\n\nexport default withStyles(({ color, unit }) => ({\n  container: {\n    color: color.primary,\n    marginBottom: 2 * unit,\n  },\n}), { cssPropName: 'withStylesCss' })(MyComponent);\n```\n\n##### `themePropName` (default `'theme'`)\n\nThe theme prop name can also be customized by setting the `themePropName` option.\n\n```jsx\nimport React from 'react';\nimport { withStyles, withStylesPropTypes } from './withStyles';\n\nfunction MyComponent({ css, styles, withStylesTheme }) {\n  return (\n    <div {...css(styles.container)}>\n      <Background color={withStylesTheme.color.primary}>\n        Try to be a rainbow in someone's cloud.\n      </Background>\n    </div>\n  );\n}\n\nMyComponent.propTypes = {\n  ...withStylesPropTypes,\n};\n\nexport default withStyles(({ color, unit }) => ({\n  container: {\n    color: color.primary,\n    marginBottom: 2 * unit,\n  },\n}), { themePropName: 'withStylesTheme' })(MyComponent);\n```\n\n##### `flushBefore` (default: `false`)\n\nSome components depend on previous styles to be ready in the component tree when mounting (e.g. dimension calculations). Some interfaces add styles to the page asynchronously, which is an obstacle for this. So, we provide the option of flushing the buffered styles before the rendering cycle begins. It is up to the interface to define what this means.\n\n### `css(...styles)`\n\nThis function takes styles that were processed by `withStyles()`, plain objects, or arrays of these things. It returns an object with attributes that must be spread into a JSX element. We recommend not inspecting the results and spreading them directly onto the element. In other words `className` and `style` props must not be used on the same elements as `css()`.\n\n```jsx\nimport React from 'react';\nimport { withStyles, withStylesPropTypes } from './withStyles';\n\nconst propTypes = {\n  ...withStylesPropTypes,\n};\n\nfunction MyComponent({ css, styles, bold, padding, }) {\n  return (\n    <div {...css(styles.container, { padding })}>\n      Try to be a rainbow in{' '}\n      <a\n        href=\"/somewhere\"\n        {...css(styles.link, bold && styles.link_bold)}\n      >\n        someone's cloud\n      </a>\n    </div>\n  );\n}\n\nMyComponent.propTypes = propTypes;\n\nexport default withStyles(({ color, unit }) => ({\n  container: {\n    color: color.primary,\n    marginBottom: 2 * unit,\n  },\n\n  link: {\n    color: color.secondary,\n  },\n\n  link_bold: {\n    fontWeight: 700,\n  },\n}))(MyComponent);\n```\n\n### Accessing your wrapped component with a ref\n\nReact 16.3 introduced the ability to pass along refs with the [`React.forwardRef`][react-forward-ref]\nhelper, allowing you to write code like this.\n\n```jsx\nconst MyComponent = React.forwardRef(\n  function MyComponent({ css, styles }, forwardedRef) {\n    return (\n      <div {...css(styles.container)} ref={forwardedRef}>\n        Hello, World\n      </div>\n    );\n  }\n);\n```\n\nRefs will not get passed through HOCs by default because `ref` is not a prop. If\nyou add a ref to an HOC, the ref will refer to the outermost container component,\nwhich is usually not desired. `withStyles` is set up to pass along your ref to\nthe wrapped component.\n\n```jsx\nconst MyComponentWithStyles = withStyles(({ color, unit }) => ({\n  container: {\n    color: color.primary,\n    marginBottom: 2 * unit,\n  },\n}))(MyComponent);\n\n// the ref will be passed down to MyComponent, which is then attached to the div\nconst ref = React.createRef()\n<MyComponentWithStyles ref={ref} />\n```\n\n### `ThemedStyleSheet` (legacy)\n\nRegisters themes and interfaces.\n\n**⚠️ Deprecation Warning**: `ThemedStyleSheet` is going to be deprecated in the next major version. Please migrate your applications to use `WithStylesContext` to provide the theme and interface to use along with `withStyles` or `useStyles`. In the meantime, you should be able to use both inside your app for a smooth migration. If this is not the case, please file an issue so we can help.\n\n#### `ThemedStyleSheet.registerTheme(theme)` (legacy)\n\nRegisters the theme. `theme` is an object with properties that you want to be made available when styling your components.\n\n```js\nimport ThemedStyleSheet from 'react-with-styles/lib/ThemedStyleSheet';\n\nThemedStyleSheet.registerTheme({\n  color: {\n    primary: '#FF5A5F',\n    secondary: '#00A699',\n  },\n});\n```\n\n#### `ThemedStyleSheet.registerInterface(interface)` (legacy)\n\nInstructs react-with-styles how to process your styles.\n\n```js\nimport ThemedStyleSheet from 'react-with-styles/lib/ThemedStyleSheet';\nimport AphroditeInterface from 'react-with-styles-interface-aphrodite';\n\nThemedStyleSheet.registerInterface(AphroditeInterface);\n```\n\n---\n\n## Other Examples\n\n### With React Router's `Link`\n\n[React Router][react-router]'s [`<Link/>`][react-router-link] and [`<IndexLink/>`][react-router-index-link] components accept `activeClassName='...'` and `activeStyle={{...}}` as props. As previously stated, `css(...styles)` must spread to JSX, so simply passing `styles.thing` or even `css(styles.thing)` directly will not work. In order to mimic `activeClassName`/`activeStyles` you can use React Router's [`withRouter()`][react-router-with-router] Higher Order Component to pass `router` as prop to your component and toggle styles based on [`router.isActive(pathOrLoc, indexOnly)`](react-router-is-active). This works because `<Link />` passes down the generated `className` from `css(..styles)` down through to the final leaf.\n\n```jsx\nimport React from 'react';\nimport { withRouter, Link } from 'react-router';\nimport { css, withStyles } from '../withStyles';\n\nfunction Nav({ router, styles }) {\n  return (\n    <div {...css(styles.container)}>\n      <Link\n        to=\"/\"\n        {...css(styles.link, router.isActive('/', true) && styles.link_bold)}\n      >\n        home\n      </Link>\n      <Link\n        to=\"/somewhere\"\n        {...css(styles.link, router.isActive('/somewhere', true) && styles.link_bold)}\n      >\n        somewhere\n      </Link>\n    </div>\n  );\n}\n\nexport default withRouter(withStyles(({ color, unit }) => ({\n  container: {\n    color: color.primary,\n    marginBottom: 2 * unit,\n  },\n\n  link: {\n    color: color.primary,\n  },\n\n  link_bold: {\n    fontWeight: 700,\n  }\n}))(Nav));\n```\n\n---\n\n## In the wild\n\n[Organizations and projects using `react-with-styles`](INTHEWILD.md).\n\n[package-url]: https://npmjs.org/package/react-with-styles\n[npm-version-svg]: http://versionbadg.es/airbnb/react-with-styles.svg\n[travis-svg]: https://travis-ci.org/airbnb/react-with-styles.svg\n[travis-url]: https://travis-ci.org/airbnb/react-with-styles\n[deps-svg]: https://david-dm.org/airbnb/react-with-styles.svg\n[deps-url]: https://david-dm.org/airbnb/react-with-styles\n[dev-deps-svg]: https://david-dm.org/airbnb/react-with-styles/dev-status.svg\n[dev-deps-url]: https://david-dm.org/airbnb/react-with-styles#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/react-with-styles.png?downloads=true&stars=true\n[license-image]: http://img.shields.io/npm/l/react-with-styles.svg\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/react-with-styles.svg\n[downloads-url]: http://npm-stat.com/charts.html?package=react-with-styles\n\n[aphrodite]: https://github.com/khan/aphrodite\n[radium]: https://formidable.com/open-source/radium/\n[react-forward-ref]: https://reactjs.org/docs/forwarding-refs.html\n[react-native]: https://facebook.github.io/react-native/\n[react-router]: https://github.com/reactjs/react-router\n[react-router-link]: https://github.com/reactjs/react-router/blob/master/docs/API.md#link\n[react-router-index-link]: https://github.com/reactjs/react-router/blob/master/docs/API.md#indexlink\n[react-router-with-router]: https://github.com/reactjs/react-router/blob/master/docs/API.md#withroutercomponent-options\n[react-router-is-active]: https://github.com/reactjs/react-router/blob/master/docs/API.md#isactivepathorloc-indexonly\n",
    "licenseText": "MIT License\n\nCopyright (c) 2016 Airbnb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-with-styles/-/react-with-styles-4.2.0.tgz#0b8a8e5d94d082518b9f564f6fcf6103e28096c5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-with-styles/-/react-with-styles-4.2.0.tgz",
    "hash": "0b8a8e5d94d082518b9f564f6fcf6103e28096c5",
    "integrity": "sha512-tZCTY27KriRNhwHIbg1NkSdTTOSfXDg6Z7s+Q37mtz0Ym7Sc7IOr3PzVt4qJhJMW6Nkvfi3g34FuhtiGAJCBQA==",
    "registry": "npm",
    "packageName": "react-with-styles",
    "cacheIntegrity": "sha512-tZCTY27KriRNhwHIbg1NkSdTTOSfXDg6Z7s+Q37mtz0Ym7Sc7IOr3PzVt4qJhJMW6Nkvfi3g34FuhtiGAJCBQA== sha1-C4qOXZTQglGLn1ZPb89hA+KAlsU="
  },
  "registry": "npm",
  "hash": "0b8a8e5d94d082518b9f564f6fcf6103e28096c5"
}