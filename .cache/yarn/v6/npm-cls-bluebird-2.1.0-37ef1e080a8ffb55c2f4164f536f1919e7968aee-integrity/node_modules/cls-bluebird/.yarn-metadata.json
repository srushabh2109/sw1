{
  "manifest": {
    "name": "cls-bluebird",
    "version": "2.1.0",
    "description": "Make bluebird work with the continuation-local-storage module.",
    "main": "lib/index.js",
    "scripts": {
      "test": "npm run jshint && npm run test-all",
      "test-all": "npm run test-bluebird2 && npm run test-bluebird3",
      "test-bluebird2": "BLUEBIRD_VERSION=2 npm run test-main",
      "test-bluebird3": "BLUEBIRD_VERSION=3 npm run test-main",
      "test-main": "mocha 'test/**/*.test.js'",
      "jshint": "jshint lib test",
      "cover": "npm run cover-main && rm -rf coverage",
      "coveralls": "npm run cover-main && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
      "cover-main": "COVERAGE=true BLUEBIRD_VERSION=3 istanbul cover _mocha --report lcovonly -- -R spec 'test/**/*.test.js'",
      "travis": "bin/travis.sh"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/TimBeyer/cls-bluebird.git"
    },
    "keywords": [
      "continuation-local-storage",
      "cls",
      "bluebird",
      "continuation",
      "local",
      "storage",
      "promise",
      "promises",
      "async",
      "thread",
      "glue",
      "baling-wire",
      "patch"
    ],
    "author": {
      "name": "Tim Beyer",
      "email": "tim.beyer@gmail.com"
    },
    "license": "BSD-2-Clause",
    "bugs": {
      "url": "https://github.com/TimBeyer/cls-bluebird/issues"
    },
    "dependencies": {
      "shimmer": "^1.1.0",
      "is-bluebird": "^1.0.2"
    },
    "devDependencies": {
      "mocha": "^4.0.1",
      "chai": "^4.1.2",
      "jshint": "^2.9.5",
      "istanbul": "^0.4.5",
      "coveralls": "^3.0.0",
      "continuation-local-storage": "^3.2.1",
      "bluebird": "^2.10.2",
      "bluebird2": "^3.0.0",
      "bluebird3": "^3.1.1",
      "lodash": "^4.17.4"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-cls-bluebird-2.1.0-37ef1e080a8ffb55c2f4164f536f1919e7968aee-integrity/node_modules/cls-bluebird/package.json",
    "readmeFilename": "README.md",
    "readme": "# continuation-local-storage support for bluebird promises\n\n[![NPM version](https://img.shields.io/npm/v/cls-bluebird.svg)](https://www.npmjs.com/package/cls-bluebird)\n[![Build Status](https://img.shields.io/travis/TimBeyer/cls-bluebird/master.svg)](http://travis-ci.org/TimBeyer/cls-bluebird)\n[![Dependency Status](https://img.shields.io/david/TimBeyer/cls-bluebird.svg)](https://david-dm.org/TimBeyer/cls-bluebird)\n[![Dev dependency Status](https://img.shields.io/david/dev/TimBeyer/cls-bluebird.svg)](https://david-dm.org/TimBeyer/cls-bluebird)\n[![Coverage Status](https://img.shields.io/coveralls/TimBeyer/cls-bluebird/master.svg)](https://coveralls.io/r/TimBeyer/cls-bluebird)\n\nPatch [bluebird](https://www.npmjs.com/package/bluebird) for [continuation-local-storage](https://www.npmjs.com/package/continuation-local-storage) support.\n\n## Current Status\n\nVersion 2.x of cls-bluebird is a complete re-write aiming to make it 100% reliable and robust. Features comprehensive test coverage (over 100,000 tests) which cover pretty much all conceivable cases.\n\nCompatible with [bluebird](https://www.npmjs.com/package/bluebird) v2.x and v3.x. Tests cover both versions.\n\nPlease use with latest version of [bluebird](https://www.npmjs.com/package/bluebird) in either v2.x or v3.x branches. Older versions are not guaranteed to work.\n\n## Usage\n\n### `clsBluebird( ns [, Promise] )`\n\n```js\nvar cls = require('continuation-local-storage');\nvar ns = cls.createNamespace('myNamespace');\n\nvar Promise = require('bluebird');\nvar clsBluebird = require('cls-bluebird');\n\nclsBluebird( ns );\n// Promise is now patched to maintain CLS context\n```\n\nThe above patches the \"global\" instance of bluebird. So anywhere else in the same app that calls `require('bluebird')` will get the patched version (assuming npm resolves to the same file).\n\n### Patching a particular instance of Bluebird\n\nSo as not to alter the \"global\" instance of bluebird, it's recommended to first create a independent instance of the Bluebird constructor before patching, and pass it to cls-bluebird.\n\nThis is a more robust approach.\n\n```js\nvar Promise = require('bluebird').getNewLibraryCopy();\nvar clsBluebird = require('cls-bluebird');\n\nclsBluebird( ns, Promise );\n```\n\n(see [Promise.getNewLibraryCopy()](http://bluebirdjs.com/docs/api/promise.getnewlibrarycopy.html) docs on Bluebird website)\n\n### Nature of patching\n\nCombining CLS and promises is a slightly tricky business. There are 3 different conventions one could use (see [this issue](https://github.com/othiym23/node-continuation-local-storage/issues/64) for more detail).\n\n`cls-bluebird` follows the convention of binding `.then()` callbacks **to the context in which `.then()` is called**.\n\n```js\nvar promise;\nns.run(function() {\n    ns.set('foo', 123);\n    promise = Promise.resolve();\n});\n\nns.run(function() {\n    ns.set('foo', 456);\n    promise.then(print);\n});\n\nfunction print() {\n    console.log(ns.get('foo'));\n}\n\n// this outputs '456' (the value of `foo` at the time `.then()` was called)\n```\n\n### Notes\n\n#### Coroutines\n\nThe patch ensures that when execution in a coroutine continues after a `yield` statement, it always does so in the CLS context *in which the coroutine started running*.\n\n```js\nvar fn = Promise.coroutine(function* () {\n    console.log('Context 1:', ns.get('foo'));\n    yield Promise.resolve();\n    console.log('Context 2:', ns.get('foo'));\n});\n\nns.run(function(ctx) {\n    ns.set('foo', 123);\n    fn();\n});\n```\n\noutputs:\n\n```\nContext 1: 123\nContext 2: 123\n```\n\nThis means:\n\n1. If the `yield`-ed expression loses CLS context, the original CLS context will be restored after the `yield`.\n2. Any code before the `yield` which changes CLS context will only be effective until the next `yield`.\n\n#### Global error handlers\n\n`Promise.onPossiblyUnhandledRejection()` and `Promise.onUnhandledRejectionHandled()` allow you to attach global handlers to intercept unhandled rejections.\n\nThe CLS context in which callbacks are called is unknown. It's probably unwise to rely on the CLS context in the callback being that when the rejection occurred - use `.catch()` on the end of the promise chain that's created within `namespace.run()` instead.\n\n#### Progression\n\nBluebird v2.x contains a deprecated API for handling progression (`.progressed()`) etc. These methods are patched and *should* work fine but they're not covered by the tests.\n\n## Tests\n\nThe tests cover every possible combination of input promises and callbacks that the Bluebird API allows. There's around 100,000 tests in total and the aim is to ensure cls-bluebird is as robust and reliable as possible.\n\nUse `npm test` to run the tests. Use `npm run cover` to check coverage.\n\nFor more info on test tests, see [tests/README.md](https://github.com/TimBeyer/cls-bluebird/blob/master/test/README.md)\n\n## Changelog\n\nSee [changelog.md](https://github.com/TimBeyer/cls-bluebird/blob/master/changelog.md)\n\n## Issues/bugs\n\nIf you discover a bug, please raise an issue on Github. https://github.com/TimBeyer/cls-bluebird/issues\n\nWe are very keen to ensure cls-bluebird is completely bug-free and any bugs discovered will be fixed as soon as possible.\n\n## Contribution\n\nPull requests are very welcome. Please:\n\n* ensure all tests pass before submitting PR\n* add an entry to changelog\n* add tests for new features\n* document new functionality/API additions in README\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/cls-bluebird/-/cls-bluebird-2.1.0.tgz#37ef1e080a8ffb55c2f4164f536f1919e7968aee",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/cls-bluebird/-/cls-bluebird-2.1.0.tgz",
    "hash": "37ef1e080a8ffb55c2f4164f536f1919e7968aee",
    "integrity": "sha1-N+8eCAqP+1XC9BZPU28ZGeeWiu4=",
    "registry": "npm",
    "packageName": "cls-bluebird",
    "cacheIntegrity": "sha512-XVb0RPmHQyy35Tz9z34gvtUcBKUK8A/1xkGCyeFc9B0C7Zr5SysgFaswRVdwI5NEMcO+3JKlIDGIOgERSn9NdA== sha1-N+8eCAqP+1XC9BZPU28ZGeeWiu4="
  },
  "registry": "npm",
  "hash": "37ef1e080a8ffb55c2f4164f536f1919e7968aee"
}