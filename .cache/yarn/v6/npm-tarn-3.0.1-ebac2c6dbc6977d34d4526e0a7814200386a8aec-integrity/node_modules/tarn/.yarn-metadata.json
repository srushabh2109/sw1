{
  "manifest": {
    "name": "tarn",
    "version": "3.0.1",
    "description": "Simple and robust resource pool for node.js",
    "main": "dist/tarn.js",
    "types": "dist/tarn.d.ts",
    "license": "MIT",
    "scripts": {
      "test": "mocha --slow 10 --timeout 5000 --reporter spec tests.js",
      "test-bail": "mocha --slow 10 --timeout 5000 --reporter spec --bail tests.js",
      "build": "tsc",
      "clean": "rm -rf dist",
      "prepublishOnly": "tsc",
      "lint": "eslint --format codeframe \"src/**/*.ts\"",
      "format": "prettier **/*.{js,ts} --write"
    },
    "author": {
      "name": "Sami KoskimÃ¤ki",
      "email": "sami.koskimaki@vincit.com",
      "url": "https://github.com/koskimas"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/vincit/tarn.js.git"
    },
    "engines": {
      "node": ">=8.0.0"
    },
    "keywords": [
      "pool",
      "pooling",
      "throttle"
    ],
    "files": [
      "README.md",
      "LICENSE",
      "dist/*"
    ],
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.{js,ts}": [
        "prettier --write",
        "git add"
      ]
    },
    "devDependencies": {
      "@types/node": "^10.17.17",
      "@typescript-eslint/eslint-plugin": "^2.21.0",
      "@typescript-eslint/parser": "^2.21.0",
      "bluebird": "^3.7.2",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.10.0",
      "eslint-plugin-prettier": "^3.1.2",
      "expect.js": "^0.3.1",
      "husky": "^1.3.1",
      "lint-staged": "^9.5.0",
      "mocha": "^7.1.0",
      "prettier": "^1.19.1",
      "typescript": "3.8.3"
    },
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-tarn-3.0.1-ebac2c6dbc6977d34d4526e0a7814200386a8aec-integrity/node_modules/tarn/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Build Status](https://travis-ci.org/Vincit/tarn.js.svg?branch=master)](https://travis-ci.org/Vincit/tarn.js)\n\n## Why yet another resource pool?\n\nTarn is focused on robustness and ability to recover from errors. Tarn has timeouts for all operations\nthat can fail or timeout so that you should never end up with pool full of crap. Tarn has a comprehensive\ntest suite and we are committed to adding tests and fixing all bugs that are found.\n\nTarn will always remain simple.\n\n## Install\n\n```\nnpm install tarn\n```\n\n## Usage\n\n```js\nconst { Pool, TimeoutError } = require('tarn');\n\nconst pool = new Pool({\n  // Function that creates a resource. You can either pass the resource\n  // to the callback(error, resource) or return a promise that resolves the resource\n  // (but not both) Callback syntax will be deprecated at some point.\n  create: cb => {\n    cb(null, new SomeResource());\n  },\n\n  // Validates a connection before it is used. Return true or false\n  // from it. If false is returned, the resource is destroyed and a\n  // another one is acquired. Should return a Promise if validate is\n  // async function.\n  validate: resource => {\n    return true;\n  },\n\n  // Function that destroys a resource, should return promise if\n  // destroying is asynchronous operation.\n  destroy: someResource => {\n    someResource.cleanup();\n  },\n\n  // logger function, noop by default\n  log: (message, logLevel) => console.log(`${logLevel}: ${message}`)\n\n  // minimum size\n  min: 2,\n\n  // maximum size\n  max: 10,\n\n  // acquire promises are rejected after this many milliseconds\n  // if a resource cannot be acquired\n  acquireTimeoutMillis: 30000,\n\n  // create operations are cancelled after this many milliseconds\n  // if a resource cannot be acquired\n  createTimeoutMillis: 30000,\n\n  // destroy operations are awaited for at most this many milliseconds\n  // new resources will be created after this timeout\n  destroyTimeoutMillis: 5000,\n\n  // free resouces are destroyed after this many milliseconds\n  idleTimeoutMillis: 30000,\n\n  // how often to check for idle resources to destroy\n  reapIntervalMillis: 1000,\n\n  // how long to idle after failed create before trying again\n  createRetryIntervalMillis: 200,\n\n  // If true, when a create fails, the first pending acquire is\n  // rejected with the error. If this is false (the default) then\n  // create is retried until acquireTimeoutMillis milliseconds has\n  // passed.\n  propagateCreateError: false\n});\n\n// acquires a resource. The promise is rejected with `tarn.TimeoutError`\n// after `acquireTimeoutMillis` if a resource could not be acquired.\nconst acquire = pool.acquire();\n\n// acquire can be aborted using the abort method.\n// If acquire had triggered creating new resource to the pool\n// creation will continue and it is not aborted.\nacquire.abort();\n\n// the acquire object has a promise property that gets reolved with\n// the acquired resource\ntry {\n  const resource = await acquire.promise;\n} catch (err) {\n  // if the acquire times out an error of class TimeoutError is thrown\n  if (err instanceof TimeoutError) {\n    console.log('timeout');\n  }\n}\n\n// releases the resource.\npool.release(resource);\n\n// returns the number of non-free resources\npool.numUsed();\n\n// returns the number of free resources\npool.numFree();\n\n// how many acquires are waiting for a resource to be released\npool.numPendingAcquires();\n\n// how many asynchronous create calls are running\npool.numPendingCreates();\n\n// waits for all resources to be returned to the pool and destroys them.\n// pool cannot be used after this.\nawait pool.destroy();\n\n// The following examples add synchronous event handlers for example to\n// allow externally collect diagnostic data of pool behaviour.\n// If any of these hooks fail, all errors are catched and warnings are logged.\n\n// resource is acquired from pool\npool.on('acquireRequest', eventId => {});\npool.on('acquireSuccess', (eventId, resource) => {});\npool.on('acquireFail', (eventId, err) => {});\n\n// resource returned to pool\npool.on('release', resource => {});\n\n// resource was created and added to the pool\npool.on('createRequest', eventId => {});\npool.on('createSuccess', (eventId, resource) => {});\npool.on('createFail', (eventId, err) => {});\n\n// resource is destroyed and evicted from pool\n// resource may or may not be invalid when destroySuccess / destroyFail is called\npool.on('destroyRequest', (eventId, resource) => {});\npool.on('destroySuccess', (eventId, resource) => {});\npool.on('destroyFail', (eventId, resource, err) => {});\n\n// when internal reaping event clock is activated / deactivated\npool.on('startReaping', () => {});\npool.on('stopReaping', () => {});\n\n// pool is destroyed (after poolDestroySuccess all event handlers are also cleared)\npool.on('poolDestroyRequest', eventId => {});\npool.on('poolDestroySuccess', eventId => {});\n\n// remove single event listener\npool.removeListener(eventName, listener);\n\n// remove all listeners from an event\npool.removeAllListeners(eventName);\n```\n\n## Changelog\n\n### Master\n\n### 3.0.1 2020-10-25\n\n- Added triggering missing createFail event on timeout error - fixes #57\n\n### 3.0.0 2020-04-18\n\n- Async validation support, now validation resource function can return a promise #45\n- Fixed releasing abandoned resource after creation when create timeout #48\n\nReleased as major version, because async validation support did require lots of internal changes, which may cause sutil difference in behavior.\n\n### 2.0.0 2019-06-02\n\n- Accidentally published breaking changes in 1.2.0. Unpublished it and published again with correct version number 2.0.0 #33\n\n### 1.2.0 2019-06-02 (UNPUBLISHED)\n\n- Passing unknown options throws an error #19 #32\n- Diagnostic event handlers to allow monitoring pool behaviour #14 #23\n- Dropped node 6 support #25 #28\n- pool.destroy() now always waits for all pending destroys to finish before resolving #29\n\n### 1.1.5 2019-04-06\n\n- Added changelog #22\n- Handle opt.destroy() being a promise with destroyTimeout #16\n- Explicitly silence bluebird warnings #17\n- Add strict typings via TypeScript #10\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Vincit Oy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tarn/-/tarn-3.0.1.tgz#ebac2c6dbc6977d34d4526e0a7814200386a8aec",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tarn/-/tarn-3.0.1.tgz",
    "hash": "ebac2c6dbc6977d34d4526e0a7814200386a8aec",
    "integrity": "sha512-6usSlV9KyHsspvwu2duKH+FMUhqJnAh6J5J/4MITl8s94iSUQTLkJggdiewKv4RyARQccnigV48Z+khiuVZDJw==",
    "registry": "npm",
    "packageName": "tarn",
    "cacheIntegrity": "sha512-6usSlV9KyHsspvwu2duKH+FMUhqJnAh6J5J/4MITl8s94iSUQTLkJggdiewKv4RyARQccnigV48Z+khiuVZDJw== sha1-66wsbbxpd9NNRSbgp4FCADhqiuw="
  },
  "registry": "npm",
  "hash": "ebac2c6dbc6977d34d4526e0a7814200386a8aec"
}