{
  "manifest": {
    "name": "react-side-effect",
    "version": "2.1.1",
    "description": "Create components whose prop changes map to a global side effect",
    "main": "lib/index.js",
    "scripts": {
      "build": "node scripts/build.js",
      "clean": "rimraf lib",
      "prepare": "npm test && npm run clean && npm run build",
      "test": "mocha",
      "test:watch": "mocha --watch",
      "test:cov": "babel-node ./node_modules/.bin/isparta cover ./node_modules/.bin/_mocha"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/gaearon/react-side-effect.git"
    },
    "keywords": [
      "react",
      "component",
      "side",
      "effect"
    ],
    "author": {
      "name": "Dan Abramov",
      "email": "dan.abramov@me.com",
      "url": "http://github.com/gaearon"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/gaearon/react-side-effect/issues"
    },
    "homepage": "https://github.com/gaearon/react-side-effect",
    "contributors": [
      {
        "name": "Louis DeScioli",
        "url": "https://descioli.design"
      }
    ],
    "peerDependencies": {
      "react": "^16.3.0 || ^17.0.0"
    },
    "dependencies": {},
    "devDependencies": {
      "@babel/cli": "^7.5.5",
      "@babel/core": "^7.5.5",
      "@babel/node": "^7.5.5",
      "@babel/plugin-proposal-class-properties": "^7.5.5",
      "@babel/preset-env": "^7.5.5",
      "@babel/preset-react": "^7.0.0",
      "@babel/register": "^7.5.5",
      "babel-plugin-add-module-exports": "^1.0.2",
      "chai": "^3.2.0",
      "create-react-class": "^15.6.3",
      "enzyme": "^3.10.0",
      "enzyme-adapter-react-16": "^1.14.0",
      "gzip-size": "^4.1.0",
      "isparta": "^4.0.0",
      "jsdom": "^9.9.1",
      "mocha": "^3.2.0",
      "pretty-bytes": "^4.0.2",
      "react": "^16.9.0",
      "react-dom": "^16.9.0",
      "rimraf": "^2.4.3",
      "rollup": "^1.20.3",
      "rollup-plugin-babel": "^4.0.0",
      "rollup-plugin-uglify": "^3.0.0"
    },
    "files": [
      "LICENSE",
      "README.md",
      "lib/"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-react-side-effect-2.1.1-66c5701c3e7560ab4822a4ee2742dee215d72eb3-integrity/node_modules/react-side-effect/package.json",
    "readmeFilename": "README.md",
    "readme": "# React Side Effect [![Downloads](https://img.shields.io/npm/dm/react-side-effect.svg)](https://npmjs.com/react-side-effect) [![npm version](https://img.shields.io/npm/v/react-side-effect.svg?style=flat)](https://www.npmjs.com/package/react-side-effect)\n\nCreate components whose prop changes map to a global side effect.\n\n## Installation\n\n```\nnpm install --save react-side-effect\n```\n\n### As a script tag\n\n#### Development\n\n```html\n<script src=\"https://unpkg.com/react/umd/react.development.js\" type=\"text/javascript\"></script>\n<script src=\"https://unpkg.com/react-side-effect/lib/index.umd.js\" type=\"text/javascript\"></script>\n```\n\n#### Production\n\n```html\n<script src=\"https://unpkg.com/react/umd/react.production.min.js\" type=\"text/javascript\"></script>\n<script src=\"https://unpkg.com/react-side-effect/lib/index.umd.min.js\" type=\"text/javascript\"></script>\n```\n\n## Use Cases\n\n* Setting `document.body.style.margin` or background color depending on current screen;\n* Firing Flux actions using declarative API depending on current screen;\n* Some crazy stuff I haven't thought about.\n\n## How's That Different from `componentDidUpdate`?\n\nIt gathers current props across *the whole tree* before passing them to side effect. For example, this allows you to create `<BodyStyle style>` component like this:\n\n```jsx\n// RootComponent.js\nreturn (\n  <BodyStyle style={{ backgroundColor: 'red' }}>\n    {this.state.something ? <SomeComponent /> : <OtherComponent />}\n  </BodyStyle>\n);\n\n// SomeComponent.js\nreturn (\n  <BodyStyle style={{ backgroundColor: this.state.color }}>\n    <div>Choose color: <input valueLink={this.linkState('color')} /></div>\n  </BodyStyle>\n);\n```\n\nand let the effect handler merge `style` from different level of nesting with innermost winning:\n\n```js\nimport { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport withSideEffect from 'react-side-effect';\n\nclass BodyStyle extends Component {\n  render() {\n    return Children.only(this.props.children);\n  }\n}\n\nBodyStyle.propTypes = {\n  style: PropTypes.object.isRequired\n};\n\nfunction reducePropsToState(propsList) {\n  var style = {};\n  propsList.forEach(function (props) {\n    Object.assign(style, props.style);\n  });\n  return style;\n}\n\nfunction handleStateChangeOnClient(style) {\n  Object.assign(document.body.style, style);\n}\n\nexport default withSideEffect(\n  reducePropsToState,\n  handleStateChangeOnClient\n)(BodyStyle);\n```\n\nOn the server, you’ll be able to call `BodyStyle.peek()` to get the current state, and `BodyStyle.rewind()` to reset for each next request. The `handleStateChangeOnClient` will only be called on the client.\n\n## API\n\n#### `withSideEffect: (reducePropsToState, handleStateChangeOnClient, [mapStateOnServer]) -> ReactComponent -> ReactComponent`\n\nA [higher-order component](https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750) that, when mounting, unmounting or receiving new props, calls `reducePropsToState` with `props` of **each mounted instance**. It is up to you to return some state aggregated from these props.\n\nOn the client, every time the returned component is (un)mounted or its props change, `reducePropsToState` will be called, and the recalculated state will be passed to `handleStateChangeOnClient` where you may use it to trigger a side effect.\n\nOn the server, `handleStateChangeOnClient` will not be called. You will still be able to call the static `rewind()` method on the returned component class to retrieve the current state after a `renderToString()` call. If you forget to call `rewind()` right after `renderToString()`, the internal instance stack will keep growing, resulting in a memory leak and incorrect information. You must call `rewind()` after every `renderToString()` call on the server.\n\nFor testing, you may use a static `peek()` method available on the returned component. It lets you get the current state without resetting the mounted instance stack. Don’t use it for anything other than testing.\n\n## Usage\n\nHere's how to implement [React Document Title](https://github.com/gaearon/react-document-title) (both client and server side) using React Side Effect:\n\n```js\nimport React, { Children, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport withSideEffect from 'react-side-effect';\n\nclass DocumentTitle extends Component {\n  render() {\n    if (this.props.children) {\n      return Children.only(this.props.children);\n    } else {\n      return null;\n    }\n  }\n}\n\nDocumentTitle.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nfunction reducePropsToState(propsList) {\n  var innermostProps = propsList[propsList.length - 1];\n  if (innermostProps) {\n    return innermostProps.title;\n  }\n}\n\nfunction handleStateChangeOnClient(title) {\n  document.title = title || '';\n}\n\nexport default withSideEffect(\n  reducePropsToState,\n  handleStateChangeOnClient\n)(DocumentTitle);\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Dan Abramov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-side-effect/-/react-side-effect-2.1.1.tgz#66c5701c3e7560ab4822a4ee2742dee215d72eb3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-side-effect/-/react-side-effect-2.1.1.tgz",
    "hash": "66c5701c3e7560ab4822a4ee2742dee215d72eb3",
    "integrity": "sha512-2FoTQzRNTncBVtnzxFOk2mCpcfxQpenBMbk5kSVBg5UcPqV9fRbgY2zhb7GTWWOlpFmAxhClBDlIq8Rsubz1yQ==",
    "registry": "npm",
    "packageName": "react-side-effect",
    "cacheIntegrity": "sha512-2FoTQzRNTncBVtnzxFOk2mCpcfxQpenBMbk5kSVBg5UcPqV9fRbgY2zhb7GTWWOlpFmAxhClBDlIq8Rsubz1yQ== sha1-ZsVwHD51YKtIIqTuJ0Le4hXXLrM="
  },
  "registry": "npm",
  "hash": "66c5701c3e7560ab4822a4ee2742dee215d72eb3"
}