{
  "manifest": {
    "name": "bcryptjs",
    "description": "Optimized bcrypt in plain JavaScript with zero dependencies. Compatible to 'bcrypt'.",
    "version": "2.4.3",
    "author": {
      "name": "Daniel Wirtz",
      "email": "dcode@dcode.io"
    },
    "contributors": [
      {
        "name": "Shane Girish",
        "email": "shaneGirish@gmail.com",
        "url": "https://github.com/shaneGirish"
      },
      {
        "name": "Alex Murray",
        "url": "https://github.com/alexmurray"
      },
      {
        "name": "Nicolas Pelletier",
        "url": "https://github.com/NicolasPelletier"
      },
      {
        "name": "Josh Rogers",
        "url": "https://github.com/geekymole"
      },
      {
        "name": "Noah Isaacson",
        "email": "noah@nisaacson.com",
        "url": "https://github.com/nisaacson"
      }
    ],
    "repository": {
      "type": "url",
      "url": "https://github.com/dcodeIO/bcrypt.js.git"
    },
    "bugs": {
      "url": "https://github.com/dcodeIO/bcrypt.js/issues"
    },
    "keywords": [
      "bcrypt",
      "password",
      "auth",
      "authentication",
      "encryption",
      "crypt",
      "crypto"
    ],
    "main": "index.js",
    "browser": "dist/bcrypt.js",
    "dependencies": {},
    "devDependencies": {
      "testjs": "~1",
      "closurecompiler": "~1",
      "metascript": "~0.18",
      "bcrypt": "latest",
      "utfx": "~1"
    },
    "license": "MIT",
    "scripts": {
      "test": "node node_modules/testjs/bin/testjs",
      "build": "node scripts/build.js",
      "compile": "node node_modules/closurecompiler/bin/ccjs dist/bcrypt.js --compilation_level=SIMPLE_OPTIMIZATIONS --create_source_map=dist/bcrypt.min.map > dist/bcrypt.min.js",
      "compress": "gzip -c -9 dist/bcrypt.min.js > dist/bcrypt.min.js.gz",
      "make": "npm run build && npm run compile && npm run compress && npm test"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-bcryptjs-2.4.3-9ab5627b93e60621ff7cdac5da9733027df1d0cb-integrity/node_modules/bcryptjs/package.json",
    "readmeFilename": "README.md",
    "readme": "bcrypt.js\n=========\nOptimized bcrypt in JavaScript with zero dependencies. Compatible to the C++ [bcrypt](https://npmjs.org/package/bcrypt)\nbinding on node.js and also working in the browser.\n\n<a href=\"https://travis-ci.org/dcodeIO/bcrypt.js\"><img alt=\"build static\" src=\"https://travis-ci.org/dcodeIO/bcrypt.js.svg?branch=master\" /></a> <a href=\"https://npmjs.org/package/bcryptjs\"><img src=\"https://img.shields.io/npm/v/bcryptjs.svg\" alt=\"\"></a> <a href=\"https://npmjs.org/package/bcryptjs\"><img src=\"https://img.shields.io/npm/dm/bcryptjs.svg\" alt=\"\"></a> <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=dcode%40dcode.io&item_name=Open%20Source%20Software%20Donation&item_number=dcodeIO%2Fbcrypt.js\"><img alt=\"donate ❤\" src=\"https://img.shields.io/badge/donate-❤-ff2244.svg\"></a>\n\n\nSecurity considerations\n-----------------------\nBesides incorporating a salt to protect against rainbow table attacks, bcrypt is an adaptive function: over time, the\niteration count can be increased to make it slower, so it remains resistant to brute-force search attacks even with\nincreasing computation power. ([see](http://en.wikipedia.org/wiki/Bcrypt))\n\nWhile bcrypt.js is compatible to the C++ bcrypt binding, it is written in pure JavaScript and thus slower ([about 30%](https://github.com/dcodeIO/bcrypt.js/wiki/Benchmark)), effectively reducing the number of iterations that can be\nprocessed in an equal time span.\n\nThe maximum input length is 72 bytes (note that UTF8 encoded characters use up to 4 bytes) and the length of generated\nhashes is 60 characters.\n\nUsage\n-----\nThe library is compatible with CommonJS and AMD loaders and is exposed globally as `dcodeIO.bcrypt` if neither is\navailable.\n\n### node.js\n\nOn node.js, the inbuilt [crypto module](http://nodejs.org/api/crypto.html)'s randomBytes interface is used to obtain\nsecure random numbers.\n\n`npm install bcryptjs`\n\n```js\nvar bcrypt = require('bcryptjs');\n...\n```\n\n### Browser\n\nIn the browser, bcrypt.js relies on [Web Crypto API](http://www.w3.org/TR/WebCryptoAPI)'s getRandomValues\ninterface to obtain secure random numbers. If no cryptographically secure source of randomness is available, you may\nspecify one through [bcrypt.setRandomFallback](https://github.com/dcodeIO/bcrypt.js#setrandomfallbackrandom).\n\n```js\nvar bcrypt = dcodeIO.bcrypt;\n...\n```\n\nor\n\n```js\nrequire.config({\n    paths: { \"bcrypt\": \"/path/to/bcrypt.js\" }\n});\nrequire([\"bcrypt\"], function(bcrypt) {\n    ...\n});\n```\n\nUsage - Sync\n------------\nTo hash a password: \n\n```javascript\nvar bcrypt = require('bcryptjs');\nvar salt = bcrypt.genSaltSync(10);\nvar hash = bcrypt.hashSync(\"B4c0/\\/\", salt);\n// Store hash in your password DB.\n```\n\nTo check a password: \n\n```javascript\n// Load hash from your password DB.\nbcrypt.compareSync(\"B4c0/\\/\", hash); // true\nbcrypt.compareSync(\"not_bacon\", hash); // false\n```\n\nAuto-gen a salt and hash:\n\n```javascript\nvar hash = bcrypt.hashSync('bacon', 8);\n```\n\nUsage - Async\n-------------\nTo hash a password: \n\n```javascript\nvar bcrypt = require('bcryptjs');\nbcrypt.genSalt(10, function(err, salt) {\n    bcrypt.hash(\"B4c0/\\/\", salt, function(err, hash) {\n        // Store hash in your password DB.\n    });\n});\n```\n\nTo check a password: \n\n```javascript\n// Load hash from your password DB.\nbcrypt.compare(\"B4c0/\\/\", hash, function(err, res) {\n    // res === true\n});\nbcrypt.compare(\"not_bacon\", hash, function(err, res) {\n    // res === false\n});\n\n// As of bcryptjs 2.4.0, compare returns a promise if callback is omitted:\nbcrypt.compare(\"B4c0/\\/\", hash).then((res) => {\n    // res === true\n});\n```\n\nAuto-gen a salt and hash:\n\n```javascript\nbcrypt.hash('bacon', 8, function(err, hash) {\n});\n```\n\n**Note:** Under the hood, asynchronisation splits a crypto operation into small chunks. After the completion of a chunk, the execution of the next chunk is placed on the back of [JS event loop queue](https://developer.mozilla.org/en/docs/Web/JavaScript/EventLoop), thus efficiently sharing the computational resources with the other operations in the queue.\n\nAPI\n---\n### setRandomFallback(random)\n\nSets the pseudo random number generator to use as a fallback if neither node's `crypto` module nor the Web Crypto\nAPI is available. Please note: It is highly important that the PRNG used is cryptographically secure and that it is\nseeded properly!\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| random          | *function(number):!Array.&lt;number&gt;* | Function taking the number of bytes to generate as its sole argument, returning the corresponding array of cryptographically secure random byte values. \n| **@see**        |                 | http://nodejs.org/api/crypto.html \n| **@see**        |                 | http://www.w3.org/TR/WebCryptoAPI/\n\n**Hint:** You might use [isaac.js](https://github.com/rubycon/isaac.js) as a CSPRNG but you still have to make sure to\nseed it properly.\n\n### genSaltSync(rounds=, seed_length=)\n\nSynchronously generates a salt.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| rounds          | *number*        | Number of rounds to use, defaults to 10 if omitted \n| seed_length     | *number*        | Not supported. \n| **@returns**    | *string*        | Resulting salt \n| **@throws**     | *Error*         | If a random fallback is required but not set \n\n### genSalt(rounds=, seed_length=, callback)\n\nAsynchronously generates a salt.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| rounds          | *number &#124; function(Error, string=)* | Number of rounds to use, defaults to 10 if omitted \n| seed_length     | *number &#124; function(Error, string=)* | Not supported. \n| callback        | *function(Error, string=)* | Callback receiving the error, if any, and the resulting salt \n| **@returns**    | *Promise*       | If `callback` has been omitted\n| **@throws**     | *Error*         | If `callback` is present but not a function\n\n### hashSync(s, salt=)\n\nSynchronously generates a hash for the given string.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| s               | *string*        | String to hash \n| salt            | *number &#124; string* | Salt length to generate or salt to use, default to 10 \n| **@returns**    | *string*        | Resulting hash \n\n### hash(s, salt, callback, progressCallback=)\n\nAsynchronously generates a hash for the given string.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| s               | *string*        | String to hash \n| salt            | *number &#124; string* | Salt length to generate or salt to use \n| callback        | *function(Error, string=)* | Callback receiving the error, if any, and the resulting hash \n| progressCallback | *function(number)* | Callback successively called with the percentage of rounds completed (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n| **@returns**    | *Promise*       | If `callback` has been omitted\n| **@throws**     | *Error*         | If `callback` is present but not a function\n\n### compareSync(s, hash)\n\nSynchronously tests a string against a hash.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| s               | *string*        | String to compare \n| hash            | *string*        | Hash to test against \n| **@returns**    | *boolean*       | true if matching, otherwise false \n| **@throws**     | *Error*         | If an argument is illegal \n\n### compare(s, hash, callback, progressCallback=)\n\nAsynchronously compares the given data against the given hash.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| s               | *string*        | Data to compare \n| hash            | *string*        | Data to be compared to \n| callback        | *function(Error, boolean)* | Callback receiving the error, if any, otherwise the result \n| progressCallback | *function(number)* | Callback successively called with the percentage of rounds completed (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n| **@returns**    | *Promise*       | If `callback` has been omitted \n| **@throws**     | *Error*         | If `callback` is present but not a function\n\n### getRounds(hash)\n\nGets the number of rounds used to encrypt the specified hash.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| hash            | *string*        | Hash to extract the used number of rounds from \n| **@returns**    | *number*        | Number of rounds used \n| **@throws**     | *Error*         | If `hash` is not a string \n\n### getSalt(hash)\n\nGets the salt portion from a hash. Does not validate the hash.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| hash            | *string*        | Hash to extract the salt from \n| **@returns**    | *string*        | Extracted salt part \n| **@throws**     | *Error*         | If `hash` is not a string or otherwise invalid \n\n\nCommand line\n------------\n`Usage: bcrypt <input> [salt]`\n\nIf the input has spaces inside, simply surround it with quotes.\n\nDownloads\n---------\n* [Distributions](https://github.com/dcodeIO/bcrypt.js/tree/master/dist)\n* [ZIP-Archive](https://github.com/dcodeIO/bcrypt.js/archive/master.zip)\n* [Tarball](https://github.com/dcodeIO/bcrypt.js/tarball/master)\n\nCredits\n-------\nBased on work started by Shane Girish at [bcrypt-nodejs](https://github.com/shaneGirish/bcrypt-nodejs) (MIT-licensed),\nwhich is itself based on [javascript-bcrypt](http://code.google.com/p/javascript-bcrypt/) (New BSD-licensed).\n\nLicense\n-------\nNew-BSD / MIT ([see](https://github.com/dcodeIO/bcrypt.js/blob/master/LICENSE))\n",
    "licenseText": "bcrypt.js\n---------\nCopyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\nCopyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\nCopyright (c) 2014 Daniel Wirtz <dcode@dcode.io>\n \nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of the author may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nisaac.js\n--------\nCopyright (c) 2012 Yves-Marie K. Rinquin\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/bcryptjs/-/bcryptjs-2.4.3.tgz#9ab5627b93e60621ff7cdac5da9733027df1d0cb",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/bcryptjs/-/bcryptjs-2.4.3.tgz",
    "hash": "9ab5627b93e60621ff7cdac5da9733027df1d0cb",
    "integrity": "sha1-mrVie5PmBiH/fNrF2pczAn3x0Ms=",
    "registry": "npm",
    "packageName": "bcryptjs",
    "cacheIntegrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ== sha1-mrVie5PmBiH/fNrF2pczAn3x0Ms="
  },
  "registry": "npm",
  "hash": "9ab5627b93e60621ff7cdac5da9733027df1d0cb"
}