{
  "manifest": {
    "name": "intl-format-cache",
    "version": "4.3.1",
    "description": "A memoizer factory for Intl format constructors.",
    "main": "index.js",
    "module": "lib/index.js",
    "types": "intl-format-cache.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/formatjs/formatjs.git"
    },
    "keywords": [
      "intl",
      "i18n"
    ],
    "sideEffects": false,
    "author": {
      "name": "Eric Ferraiuolo",
      "email": "eferraiuolo@gmail.com"
    },
    "license": "BSD-3-Clause",
    "bugs": {
      "url": "https://github.com/formatjs/formatjs/issues"
    },
    "homepage": "https://github.com/formatjs/formatjs",
    "gitHead": "a7842673d8ad205171ad7c8cb8bb2f318b427c0c",
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-intl-format-cache-4.3.1-484d31a9872161e6c02139349b259a6229ade377-integrity/node_modules/intl-format-cache/package.json",
    "readmeFilename": "README.md",
    "readme": "# Intl Format Cache\n\nA memoizer factory for Intl format constructors.\n\n[![npm Version][npm-badge]][npm]\n![size](https://badgen.net/bundlephobia/minzip/intl-format-cache)\n\n## Overview\n\nThis is a helper package used within [FormatJS suite][formatjs]. It provides a factory for creating memoizers of [`Intl`][intl] format constructors: [`Intl.NumberFormat`][intl-nf], [`Intl.DateTimeFormat`][intl-dtf], [`IntlMessageFormat`][intl-mf], and [`IntlRelativeFormat`][intl-rf].\n\nCreating instances of these `Intl` formats is an expensive operation, and the APIs are designed such that developers should re-use format instances instead of always creating new ones. This package is simply to make it easier to create a cache of format instances of a particular type to aid in their reuse.\n\nUnder the hood, this package creates a cache key based on the arguments passed to the memoized constructor (it will even order the keys of the `options` argument) it uses `JSON.stringify()` to create the string key.\n\n## Usage\n\nThis package works as an ES6 or Node.js module, in either case it has a single default export function; e.g.:\n\n```js\n// In an ES6 module.\nimport memoizeFormatConstructor from 'intl-format-cache';\n```\n\n```js\n// In Node.\nvar memoizeFormatConstructor = require('intl-format-cache');\n```\n\nThis default export is a factory function which can be passed an `Intl` format constructor and it will return a memoizer that will create or reuse an `Intl` format instance and return it.\n\n```js\nvar getNumberFormat = memoizeFormatConstructor(Intl.NumberFormat);\n\nvar nf1 = getNumberFormat('en');\nvar nf2 = getNumberFormat('en');\nvar nf3 = getNumberFormat('fr');\n\nconsole.log(nf1 === nf2); // => true\nconsole.log(nf1 === nf3); // => false\n\nconsole.log(nf1.format(1000)); // => \"1,000\"\nconsole.log(nf3.format(1000)); // => \"1 000\"\n```\n\n# Benchmark\n\n```\nfast-memoize x 19,610 ops/sec ±1.86% (73 runs sampled)\nintl-format-cache x 18,854 ops/sec ±4.95% (81 runs sampled)\n--- NumberFormat cache set: Fastest is fast-memoize,intl-format-cache ---\n\nfast-memoize x 1,051,977 ops/sec ±1.53% (89 runs sampled)\nintl-format-cache x 1,134,171 ops/sec ±1.19% (91 runs sampled)\nnot cached x 23,002 ops/sec ±2.23% (83 runs sampled)\n--- NumberFormat cache get: Fastest is intl-format-cache ---\n\nfast-memoize x 6,466 ops/sec ±6.56% (72 runs sampled)\nintl-format-cache x 7,384 ops/sec ±50.43% (64 runs sampled)\n--- DateTimeFormat cache set: Fastest is fast-memoize ---\n\nfast-memoize x 965,874 ops/sec ±17.87% (90 runs sampled)\nintl-format-cache x 1,048,234 ops/sec ±0.79% (89 runs sampled)\nnot cached x 13,543 ops/sec ±2.61% (85 runs sampled)\n--- DateTimeFormat cache get: Fastest is intl-format-cache ---\n\nfast-memoize x 72,531 ops/sec ±26.27% (79 runs sampled)\nintl-format-cache x 88,729 ops/sec ±0.51% (91 runs sampled)\n--- IntlMessageFormat cache set: Fastest is intl-format-cache ---\n\nfast-memoize x 665,420 ops/sec ±2.61% (90 runs sampled)\nintl-format-cache x 649,186 ops/sec ±2.19% (90 runs sampled)\nnot cached x 127,110 ops/sec ±0.35% (91 runs sampled)\n--- IntlMessageFormat cache get: Fastest is fast-memoize ---\n\nfast-memoize x 1,294,591 ops/sec ±1.10% (94 runs sampled)\nintl-format-cache x 1,905,746 ops/sec ±0.71% (91 runs sampled)\nnot cached x 152,118 ops/sec ±0.47% (94 runs sampled)\n--- IntlMessageFormat cache get simple arg: Fastest is intl-format-cache ---\n\nnumber x 536,024 ops/sec ±0.99% (86 runs sampled)\ndatetime x 397,275 ops/sec ±0.92% (90 runs sampled)\nmessageformat x 1,278,072 ops/sec ±1.31% (89 runs sampled)\n--- all formats: Fastest is messageformat ---\n\nnumber x 532,863 ops/sec ±0.79% (93 runs sampled)\ndatetime x 377,391 ops/sec ±1.11% (89 runs sampled)\nmessageformat x 709,020 ops/sec ±3.19% (81 runs sampled)\n--- all formats random input: Fastest is messageformat ---\n```\n\n[npm]: https://www.npmjs.org/package/intl-format-cache\n[npm-badge]: https://img.shields.io/npm/v/intl-format-cache.svg?style=flat-square\n[intl]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n[intl-nf]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n[intl-dtf]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n[intl-mf]: https://github.com/formatjs/formatjs\n[intl-rf]: https://github.com/formatjs/formatjs\n[formatjs]: http://formatjs.io/\n",
    "licenseText": "Copyright (c) 2019, Oath Inc.\n\nLicensed under the terms of the New BSD license. See below for terms.\n\nRedistribution and use of this software in source and binary forms,\nwith or without modification, are permitted provided that the following\nconditions are met:\n\n- Redistributions of source code must retain the above\n  copyright notice, this list of conditions and the\n  following disclaimer.\n\n- Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the\n  following disclaimer in the documentation and/or other\n  materials provided with the distribution.\n\n- Neither the name of Oath Inc. nor the names of its\n  contributors may be used to endorse or promote products\n  derived from this software without specific prior\n  written permission of Oath Inc.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/intl-format-cache/-/intl-format-cache-4.3.1.tgz#484d31a9872161e6c02139349b259a6229ade377",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/intl-format-cache/-/intl-format-cache-4.3.1.tgz",
    "hash": "484d31a9872161e6c02139349b259a6229ade377",
    "integrity": "sha512-OEUYNA7D06agqPOYhbTkl0T8HA3QKSuwWh1HiClEnpd9vw7N+3XsQt5iZ0GUEchp5CW1fQk/tary+NsbF3yQ1Q==",
    "registry": "npm",
    "packageName": "intl-format-cache",
    "cacheIntegrity": "sha512-OEUYNA7D06agqPOYhbTkl0T8HA3QKSuwWh1HiClEnpd9vw7N+3XsQt5iZ0GUEchp5CW1fQk/tary+NsbF3yQ1Q== sha1-SE0xqYchYebAITk0myWaYimt43c="
  },
  "registry": "npm",
  "hash": "484d31a9872161e6c02139349b259a6229ade377"
}