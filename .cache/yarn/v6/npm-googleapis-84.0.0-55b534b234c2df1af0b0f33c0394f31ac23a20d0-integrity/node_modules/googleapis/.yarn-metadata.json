{
  "manifest": {
    "name": "googleapis",
    "version": "84.0.0",
    "repository": {
      "type": "git",
      "url": "https://github.com/googleapis/google-api-nodejs-client.git"
    },
    "license": "Apache-2.0",
    "description": "Google APIs Client Library for Node.js",
    "main": "./build/src/index.js",
    "types": "./build/src/index.d.ts",
    "engines": {
      "node": ">=10"
    },
    "files": [
      "build/src",
      "!build/src/**/*.map"
    ],
    "scripts": {
      "pretest": "npm run build-test",
      "prepare": "npm run compile",
      "test": "c8 mocha build/test",
      "predocs": "npm run build-tools",
      "docs": "node build/src/generator/docs",
      "predocs2": "npm run compile",
      "docs-extract": "node --max-old-space-size=8192 ./node_modules/@microsoft/api-extractor/bin/api-extractor run --local --verbose",
      "docs-md": "node --max-old-space-size=8192 ./node_modules/@microsoft/api-documenter/bin/api-documenter markdown --input-folder build/docs --output-folder docs",
      "docs2": "npm run docs-extract && npm run docs-md",
      "presystem-test": "npm run build-test",
      "system-test": "mocha build/system-test",
      "samples-test": "cd samples && npm install && npm link ../ && pwd && npm test",
      "lint": "gts check",
      "precompile": "rimraf build",
      "compile": "cross-env NODE_OPTIONS=--max-old-space-size=8192 tsc -p tsconfig.json",
      "prebuild-test": "rimraf build",
      "build-test": "cross-env NODE_OPTIONS=--max-old-space-size=8192 tsc -p tsconfig.test.json",
      "build-tools": "tsc -p tsconfig.tools.json",
      "clean": "gts clean",
      "fix": "gts fix",
      "pregenerate": "npm run build-tools",
      "generate": "node build/src/generator/generator.js",
      "docs-test": "echo ðŸ™ˆ this was taking too long and timing out CI",
      "presubmit-prs": "npm run compile",
      "submit-prs": "node --max-old-space-size=8192 build/src/generator/synth.js",
      "prelint": "cd samples; npm link ../; npm i",
      "predownload": "npm run build-tools",
      "download": "node build/src/generator/download.js",
      "preupdate-disclaimers": "npm run build-tools",
      "update-disclaimers": "node build/src/generator/disclaimer.js"
    },
    "author": {
      "name": "Google Inc."
    },
    "keywords": [
      "google",
      "api",
      "google apis",
      "client",
      "client library"
    ],
    "dependencies": {
      "google-auth-library": "^7.0.2",
      "googleapis-common": "^5.0.2"
    },
    "devDependencies": {
      "@compodoc/compodoc": "^1.1.10",
      "@types/execa": "^0.9.0",
      "@types/mkdirp": "^1.0.0",
      "@types/mocha": "^8.0.0",
      "@types/mv": "^2.1.0",
      "@types/ncp": "^2.0.1",
      "@types/node": "^14.17.1",
      "@types/nunjucks": "^3.1.1",
      "@types/prettier": "^2.0.0",
      "@types/proxyquire": "^1.3.28",
      "@types/qs": "^6.5.3",
      "@types/sinon": "^10.0.0",
      "@types/tmp": "^0.2.0",
      "@types/url-template": "^2.0.28",
      "@types/yargs-parser": "^20.0.0",
      "c8": "^7.0.0",
      "codecov": "^3.4.0",
      "cross-env": "^7.0.3",
      "execa": "^5.0.0",
      "gaxios": "^4.0.0",
      "gts": "^2.0.0",
      "js-green-licenses": "^3.0.0",
      "linkinator": "^2.0.0",
      "mkdirp": "^1.0.0",
      "mocha": "^8.1.3",
      "mv": "^2.1.1",
      "ncp": "^2.0.0",
      "nock": "^13.0.0",
      "nunjucks": "^3.2.1",
      "open": "^8.0.0",
      "p-queue": "^6.0.0",
      "prettier": "^2.0.5",
      "proxyquire": "^2.1.3",
      "rimraf": "^3.0.2",
      "server-destroy": "^1.0.1",
      "sinon": "^11.0.0",
      "tmp": "^0.2.0",
      "typescript": "^3.8.3",
      "yargs-parser": "^20.2.0"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-googleapis-84.0.0-55b534b234c2df1af0b0f33c0394f31ac23a20d0-integrity/node_modules/googleapis/package.json",
    "readmeFilename": "README.md",
    "readme": "<img src=\"https://avatars0.githubusercontent.com/u/1342004?v=3&s=96\" alt=\"Google Inc. logo\" title=\"Google\" align=\"right\" height=\"96\" width=\"96\"/>\n\n# Google APIs Node.js Client\n\n[![npm version][npmimg]][npm]\n[![Code Coverage][codecovimg]][codecov]\n[![Downloads][downloadsimg]][downloads]\n[![Dependency Status][david-image]][david-url]\n[![Known Vulnerabilities][snyk-image]][snyk-url]\n\n[Node.js][node] client library for using Google APIs. Support for authorization and authentication with OAuth 2.0, API Keys and JWT tokens is included.\n\n* [Google APIs](#google-apis)\n* [Getting started](#getting-started)\n  * [Installation](#installation)\n  * [Using the client library](#using-the-client-library)\n  * [Samples](#samples)\n  * [API Reference](#api-reference)\n* [Authentication and authorization](#authentication-and-authorization)\n  * [OAuth2 client](#oauth2-client)\n  * [Using API keys](#using-api-keys)\n  * [Application default credentials](#application-default-credentials)\n  * [Service account credentials](#service-account-credentials)\n  * [Setting global or service-level auth](#setting-global-or-service-level-auth)\n* [Usage](#usage)\n  * [Specifying request body](#specifying-request-body)\n  * [Media uploads](#media-uploads)\n  * [Request Options](#request-options)\n  * [Using a Proxy](#using-a-proxy)\n  * [Supported APIs](#getting-supported-apis)\n  * [TypeScript](#typescript)\n  * [HTTP/2](#http2)\n* [License](#license)\n* [Contributing](#contributing)\n* [Questions/problems?](#questionsproblems)\n\n## Google APIs\nThe full list of supported APIs can be found on the [Google APIs Explorer][apiexplorer]. The API endpoints are automatically generated, so if the API is not in the list, it is currently not supported by this API client library.\n\n### Working with Google Cloud Platform APIs?\nIf you're working with [Google Cloud Platform][cloudplatform] APIs such as Datastore, Cloud Storage or Pub/Sub, consider using the [`@google-cloud`][googlecloud] client libraries: single purpose idiomatic Node.js clients for Google Cloud Platform services.\n\n### Support and maintenance\nThese client libraries are officially supported by Google. However, these libraries are considered complete and are in maintenance mode. This means that we will address critical bugs and security issues but will not add any new features. For Google Cloud Platform APIs, we recommend using [google-cloud-node](https://github.com/GoogleCloudPlatform/google-cloud-node) which is under active development.\n\nThis library supports the maintenance LTS, active LTS, and current release of node.js.  See the [node.js release schedule](https://github.com/nodejs/Release) for more information.\n\n## Getting started\n\n### Installation\nThis library is distributed on `npm`. In order to add it as a dependency, run the following command:\n\n``` sh\n$ npm install googleapis\n```\n\nIf you need to reduce startup times, you can also install a submodule as its own dependency. We make an effort to publish submodules that are __not__ in this [list](https://github.com/googleapis/google-cloud-node#google-cloud-nodejs-client-libraries). In order to add it as a dependency, run the following sample command, replacing with your preferred API:\n\n``` sh\n$ npm install @googleapis/docs\n```\n\nYou can run [this search](https://www.npmjs.com/search?q=scope%3Agoogleapis) on npm, to find a list of the submodules available.\n### Using the client library\n\nThis is a very simple example. This creates a Blogger client and retrieves the details of a blog given the blog Id:\n\n``` js\nconst {google} = require('googleapis');\n\n// Each API may support multiple versions. With this sample, we're getting\n// v3 of the blogger API, and using an API key to authenticate.\nconst blogger = google.blogger({\n  version: 'v3',\n  auth: 'YOUR API KEY'\n});\n\nconst params = {\n  blogId: '3213900'\n};\n\n// get the blog details\nblogger.blogs.get(params, (err, res) => {\n  if (err) {\n    console.error(err);\n    throw err;\n  }\n  console.log(`The blog url is ${res.data.url}`);\n});\n```\n\nInstead of using callbacks you can also use promises!\n\n``` js\nblogger.blogs.get(params)\n  .then(res => {\n    console.log(`The blog url is ${res.data.url}`);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\nOr async/await:\n\n``` js\nasync function runSample() {\n  const res = await blogger.blogs.get(params);\n  console.log(`The blog url is ${res.data.url}`);\n}\nrunSample().catch(console.error);\n```\n\nYou can also make calls directly to the APIs by installing a submodule:\n\n``` js\nconst docs = require('@googleapis/docs')\n\nconst auth = new docs.auth.GoogleAuth({\n  keyFilename: 'PATH_TO_SERVICE_ACCOUNT_KEY.json',\n    // Scopes can be specified either as an array or as a single, space-delimited string.\n  scopes: ['https://www.googleapis.com/auth/documents']\n});\nconst authClient = await auth.getClient();\n\nconst client = await docs.docs({\n    version: 'v1',\n    auth: authClient\n});\n\nconst createResponse = await client.documents.create({\n    requestBody: {\n      title: 'Your new document!',\n    },\n});\n\nconsole.log(createResponse.data);\n```\n\n### Samples\nThere are a lot of [samples](https://github.com/googleapis/google-api-nodejs-client/tree/master/samples) ðŸ¤—  If you're trying to figure out how to use an API ... look there first! If there's a sample you need missing, feel free to file an [issue][bugs].\n\n### API Reference\nThis library has a full set of [API Reference Documentation](https://googleapis.dev/nodejs/googleapis/latest). This documentation is auto-generated, and the location may change.\n\n## Authentication and authorization\nThere are multiple ways to authenticate to Google APIs. Some service support all authentication methods, other may only support one or two.\n\n- **OAuth2** - This allows you to make API calls on behalf of a given user.  In this model, the user visits your application, signs in with their Google account, and provides your application with authorization against a set of scopes.  [Learn more](#oauth2-client).\n\n- **API Key** - With an API key, you can access your service from a client or the server.  Typically less secure, this is only available on a small subset of services with limited scopes.  [Learn more](#using-api-keys).\n\n- **Application default credentials** - Provides automatic access to Google APIs using the [Google Cloud SDK](https://cloud.google.com/sdk/) for local development, or the [GCE Metadata Server](https://cloud.google.com/compute/docs/storing-retrieving-metadata) for applications deployed to Google Cloud Platform. [Learn more](#application-default-credentials).\n\n- **Service account credentials** - In this model, your application talks directly to Google APIs using a Service Account. It's useful when you have a backend application that will talk directly to Google APIs from the backend. [Learn more](#service-account-credentials).\n\nTo learn more about the authentication client, see the [Google Auth Library](https://github.com/googleapis/google-auth-library-nodejs).\n\n### OAuth2 client\nThis module comes with an [OAuth2][oauth] client that allows you to retrieve an access token, refresh it, and retry the request seamlessly. The basics of Google's OAuth2 implementation is explained on [Google Authorization and Authentication documentation][authdocs].\n\nIn the following examples, you may need a `CLIENT_ID`, `CLIENT_SECRET` and `REDIRECT_URL`. You can find these pieces of information by going to the [Developer Console][devconsole], clicking your project --> APIs & auth --> credentials.\n- Navigate to the Cloud Console and [Create a new OAuth2 Client Id](https://console.cloud.google.com/apis/credentials/oauthclient)\n- Select `Web Application` for the application type\n- Add an authorized redirect URI with the value `http://localhost:3000/oauth2callback` (or applicable value for your scenario)\n- Click `Create`, and `Ok` on the following screen\n- Click the `Download` icon next to your newly created OAuth2 Client Id\n\nMake sure to store this file in safe place, and *do not check this file into source control!*\n\nFor more information about OAuth2 and how it works, [see here][oauth].\n\nA complete sample application that authorizes and authenticates with the OAuth2 client is available at [`samples/oauth2.js`][oauthexample].\n\n#### Generating an authentication URL\n\nTo ask for permissions from a user to retrieve an access token, you redirect them to a consent page. To create a consent page URL:\n\n``` js\nconst {google} = require('googleapis');\n\nconst oauth2Client = new google.auth.OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\n// generate a url that asks permissions for Blogger and Google Calendar scopes\nconst scopes = [\n  'https://www.googleapis.com/auth/blogger',\n  'https://www.googleapis.com/auth/calendar'\n];\n\nconst url = oauth2Client.generateAuthUrl({\n  // 'online' (default) or 'offline' (gets refresh_token)\n  access_type: 'offline',\n\n  // If you only need one scope you can pass it as a string\n  scope: scopes\n});\n```\n\n**IMPORTANT NOTE** - The `refresh_token` is only returned on the first authorization. More details [here](https://github.com/googleapis/google-api-nodejs-client/issues/750#issuecomment-304521450).\n\n#### Retrieve authorization code\n\nOnce a user has given permissions on the consent page, Google will redirect the page to the redirect URL you have provided with a code query parameter.\n\n    GET /oauthcallback?code={authorizationCode}\n\n#### Retrieve access token\n\nWith the code returned, you can ask for an access token as shown below:\n\n``` js\n// This will provide an object with the access_token and refresh_token.\n// Save these somewhere safe so they can be used at a later time.\nconst {tokens} = await oauth2Client.getToken(code)\noauth2Client.setCredentials(tokens);\n```\n\nWith the credentials set on your OAuth2 client - you're ready to go!\n\n#### Handling refresh tokens\nAccess tokens expire. This library will automatically use a refresh token to obtain a new access token if it is about to expire. An easy way to make sure you always store the most recent tokens is to use the `tokens` event:\n\n```js\noauth2Client.on('tokens', (tokens) => {\n  if (tokens.refresh_token) {\n    // store the refresh_token in my database!\n    console.log(tokens.refresh_token);\n  }\n  console.log(tokens.access_token);\n});\n```\nThis tokens event only occurs in the first authorization, and you need to have set your `access_type` to `offline` when calling the  `generateAuthUrl` method to receive the refresh token. If you have already given your app the requisiste permissions without setting the appropriate constraints for receiving a refresh token, you will need to re-authorize the application to receive a fresh refresh token. You can revoke your app's access to your account [here](https://myaccount.google.com/permissions).\n\nTo set the `refresh_token` at a later time, you can use the `setCredentials` method:\n\n```js\noauth2Client.setCredentials({\n  refresh_token: `STORED_REFRESH_TOKEN`\n});\n```\n\nOnce the client has a refresh token, access tokens will be acquired and refreshed automatically in the next call to the API.\n\nRefresh tokens may stop working after they are granted, either because:\n- The user has revoked your app's access\n- The refresh token has not been used for 6 months\n- The user changed passwords and the refresh token contains Gmail scopes\n- The user account has exceeded a max number of live refresh tokens\n- The application has a status of 'Testing' and the consent screen is configured for an external user type, causing the token to expire in 7 days\n\nAs a developer, you should write your code to handle the case where a refresh token is no longer working.\n\n\n### Using API keys\nYou may need to send an API key with the request you are going to make. The following uses an API key to make a request to the Blogger API service to retrieve a blog's name, url, and its total amount of posts:\n\n``` js\nconst {google} = require('googleapis');\nconst blogger = google.blogger_v3({\n  version: 'v3',\n  auth: 'YOUR_API_KEY' // specify your API key here\n});\n\nconst params = {\n  blogId: '3213900'\n};\n\nasync function main(params) {\n  const res = await blogger.blogs.get({blogId: params.blogId});\n  console.log(`${res.data.name} has ${res.data.posts.totalItems} posts! The blog url is ${res.data.url}`)\n};\n\nmain().catch(console.error);\n```\n\nTo learn more about API keys, please see the [documentation][usingkeys].\n\n#### Application default credentials\n\nRather than manually creating an OAuth2 client, JWT client, or Compute client, the auth library can create the correct credential type for you, depending upon the environment your code is running under.\n\nFor example, a JWT auth client will be created when your code is running on your local developer machine, and a Compute client will be created when the same code is running on a configured instance of Google Compute Engine. The code below shows how to retrieve a default credential type, depending upon the runtime environment.\n\nTo use Application default credentials locally with the [Google Cloud SDK](https://cloud.google.com/sdk/), run:\n\n```sh\n$ gcloud auth application-default login\n```\n\nWhen running in GCP, service authorize is automatically provided via the GCE Metadata server.\n\n```js\nconst {google} = require('googleapis');\nconst compute = google.compute('v1');\n\nasync function main () {\n  const auth = new google.auth.GoogleAuth({\n    // Scopes can be specified either as an array or as a single, space-delimited string.\n    scopes: ['https://www.googleapis.com/auth/compute']\n  });\n  const authClient = await auth.getClient();\n\n  // obtain the current project Id\n  const project = await auth.getProjectId();\n\n  // Fetch the list of GCE zones within a project.\n  const res = await compute.zones.list({ project, auth: authClient });\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\n### Service account credentials\n\nService accounts allow you to perform server to server, app-level authentication using a robot account.  You will create a service account, download a keyfile, and use that to authenticate to Google APIs.  To create a service account:\n- Go to the [Create Service Account Key page](https://console.cloud.google.com/apis/credentials/serviceaccountkey)\n- Select `New Service Account` in the drop down\n- Click the `Create` button\n\nSave the service account credential file somewhere safe, and *do not check this file into source control*!  To reference the service account credential file, you have a few options.\n\n#### Using the `GOOGLE_APPLICATION_CREDENTIALS` env var\nYou can start process with an environment variable named `GOOGLE_APPLICATION_CREDENTIALS`. The value of this env var should be the full path to the service account credential file:\n\n```\n$ GOOGLE_APPLICATION_CREDENTIALS=./your-secret-key.json node server.js\n```\n\n#### Using the `keyFile` property\nAlternatively, you can specify the path to the service account credential file via the `keyFile` property in the `GoogleAuth` constructor:\n\n```js\nconst {google} = require('googleapis');\n\nconst auth = new google.auth.GoogleAuth({\n  keyFile: '/path/to/your-secret-key.json',\n  scopes: ['https://www.googleapis.com/auth/cloud-platform'],\n});\n```\n\n\n### Setting global or service-level auth\n\nYou can set the `auth` as a global or service-level option so you don't need to specify it every request. For example, you can set `auth` as a global option:\n\n``` js\nconst {google} = require('googleapis');\n\nconst oauth2Client = new google.auth.OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\n// set auth as a global default\ngoogle.options({\n  auth: oauth2Client\n});\n```\n\nInstead of setting the option globally, you can also set the authentication client at the service-level:\n\n``` js\nconst {google} = require('googleapis');\nconst oauth2Client = new google.auth.OAuth2(\n  YOUR_CLIENT_ID,\n  YOUR_CLIENT_SECRET,\n  YOUR_REDIRECT_URL\n);\n\nconst drive = google.drive({\n  version: 'v2',\n  auth: oauth2Client\n});\n```\n\nSee the [Options section](#request-options) for more information.\n\n## Usage\n\n### Specifying request body\n\nThe body of the request is specified in the `requestBody` parameter object of the request. The body is specified as a JavaScript object with key/value pairs. For example, this sample creates a watcher that posts notifications to a Google Cloud Pub/Sub topic when emails are sent to a gmail account:\n\n```js\nconst res = await gmail.users.watch({\n  userId: 'me',\n  requestBody: {\n    // Replace with `projects/${PROJECT_ID}/topics/${TOPIC_NAME}`\n    topicName: `projects/el-gato/topics/gmail`\n  }\n});\nconsole.log(res.data);\n```\n\n### Media uploads\nThis client supports multipart media uploads. The resource parameters are specified in the `requestBody` parameter object, and the media itself is specified in the `media.body` parameter with mime-type specified in `media.mimeType`.\n\nThis example uploads a plain text file to Google Drive with the title \"Test\" and contents \"Hello World\".\n\n``` js\nconst drive = google.drive({\n  version: 'v3',\n  auth: oauth2Client\n});\n\nconst res = await drive.files.create({\n  requestBody: {\n    name: 'Test',\n    mimeType: 'text/plain'\n  },\n  media: {\n    mimeType: 'text/plain',\n    body: 'Hello World'\n  }\n});\n```\n\nYou can also upload media by specifying `media.body` as a [Readable stream][stream]. This can allow you to upload very large files that cannot fit into memory.\n\n```js\nconst fs = require('fs');\n\nconst drive = google.drive({\n  version: 'v3',\n  auth: oauth2Client\n});\n\nasync function main() {\n  const res = await drive.files.create({\n    requestBody: {\n      name: 'testimage.png',\n      mimeType: 'image/png'\n    },\n    media: {\n      mimeType: 'image/png',\n      body: fs.createReadStream('awesome.png')\n    }\n  });\n  console.log(res.data);\n}\n\nmain().catch(console.error);\n```\n\nFor more examples of creation and modification requests with media attachments, take a look at the `samples/drive/upload.js` sample.\n\n### Request Options\nFor more fine-tuned control over how your API calls are made, we provide you with the ability to specify additional options that can be applied directly to the ['gaxios'][gaxios] object used in this library to make network calls to the API.\n\nYou may specify additional options either in the global `google` object or on a service client basis. The options you specify are attached to the `gaxios` object so whatever `gaxios` supports, this library supports. You may also specify global or per-service request parameters that will be attached to all API calls you make.\n\nA full list of supported options can be [found here](https://github.com/googleapis/gaxios/#request-options).\n\n#### Global options\nYou can choose default options that will be sent with each request. These options will be used for every service instantiated by the google client. In this example, the `timeout` property of `GaxiosOptions` will be set for every request:\n\n```js\nconst {google} = require('googleapis');\ngoogle.options({\n  // All requests made with this object will use these settings unless overridden.\n  timeout: 1000,\n  auth: auth\n});\n```\n\nYou can also modify the parameters sent with each request:\n\n```js\nconst {google} = require('googleapis');\ngoogle.options({\n  // All requests from all services will contain the above query parameter\n  // unless overridden either in a service client or in individual API calls.\n  params: {\n    quotaUser: 'user123@example.com'\n  }\n});\n```\n\n#### Service-client options\n\nYou can also specify options when creating a service client.\n\n```js\nconst blogger = google.blogger({\n  version: 'v3',\n  // All requests made with this object will use the specified auth.\n  auth: 'API KEY';\n});\n```\n\nBy doing this, every API call made with this service client will use `'API KEY'` to authenticate.\n\n**Note:** Created clients are **immutable** so you must create a new one if you want to specify different options.\n\nSimilar to the examples above, you can also modify the parameters used for every call of a given service:\n\n```js\nconst blogger = google.blogger({\n  version: 'v3',\n  // All requests made with this service client will contain the\n  // blogId query parameter unless overridden in individual API calls.\n  params: {\n    blogId: '3213900'\n  }\n});\n\n// Calls with this drive client will NOT contain the blogId query parameter.\nconst drive = google.drive('v3');\n...\n\n```\n\n#### Request-level options\nYou can specify an `auth` object to be used per request. Each request also inherits the options specified at the service level and global level.\n\nFor example:\n\n```js\nconst {google} = require('googleapis');\nconst bigquery = google.bigquery('v2');\n\nasync function main() {\n\n  // This method looks for the GCLOUD_PROJECT and GOOGLE_APPLICATION_CREDENTIALS\n  // environment variables.\n  const auth = new google.auth.GoogleAuth({\n    scopes: ['https://www.googleapis.com/auth/cloud-platform']\n  });\n  const authClient = await auth.getClient();\n\n  const projectId = await auth.getProjectId();\n\n  const request = {\n    projectId,\n    datasetId: '<YOUR_DATASET_ID>',\n\n    // This is a \"request-level\" option\n    auth: authClient\n  };\n\n  const res = await bigquery.datasets.delete(request);\n  console.log(res.data);\n\n}\n\nmain().catch(console.error);\n```\n\nYou can also override *gaxios* options per request, such as `url`, `method`, and `responseType`.\n\nFor example:\n\n```js\nconst res = await drive.files.export({\n  fileId: 'asxKJod9s79', // A Google Doc\n  mimeType: 'application/pdf'\n}, {\n  // Make sure we get the binary data\n  responseType: 'stream'\n});\n```\n\n### Using a Proxy\nYou can use the following environment variables to proxy HTTP and HTTPS requests:\n\n- `HTTP_PROXY` / `http_proxy`\n- `HTTPS_PROXY` / `https_proxy`\n\nWhen HTTP_PROXY / http_proxy are set, they will be used to proxy non-SSL requests that do not have an explicit proxy configuration option present. Similarly, HTTPS_PROXY / https_proxy will be respected for SSL requests that do not have an explicit proxy configuration option. It is valid to define a proxy in one of the environment variables, but then override it for a specific request, using the proxy configuration option.\n\n### Getting Supported APIs\nYou can programmatically obtain the list of supported APIs, and all available versions:\n\n```js\nconst {google} = require('googleapis');\nconst apis = google.getSupportedAPIs();\n```\n\nThis will return an object with the API name as object property names, and an array of version strings as the object values;\n\n### TypeScript\nThis library is written in TypeScript, and provides types out of the box. All classes and interfaces generated for each API are exported under the `${apiName}_${version}` namespace. For example, the Drive v3 API types are all available from the `drive_v3` namespace:\n\n```ts\nimport {\n  google,   // The top level object used to access services\n  drive_v3, // For every service client, there is an exported namespace\n  Auth,     // Namespace for auth related types\n  Common,   // General types used throughout the library\n} from 'googleapis';\n\n// Note: using explicit types like `Auth.GoogleAuth` are only here for\n// demonstration purposes.  Generally with TypeScript, these types would\n// be inferred.\nconst auth: Auth.GoogleAuth = new google.auth.GoogleAuth();\nconst drive: drive_v3.Drive = google.drive({\n  version: 'v3',\n  auth,\n});\n\n// There are generated types for every set of request parameters\nconst listParams: drive_v3.Params$Resource$Files$List = {};\nconst res = await drive.files.list(listParams);\n\n// There are generated types for the response fields as well\nconst listResults: drive_v3.Schema$FileList = res.data;\n```\n\n### HTTP/2\nThis library has **experimental** support for [HTTP/2](https://developers.google.com/web/fundamentals/performance/http2). This support is experimental, and should not be used in production.  To enable it for testing purposes, use the `http2` option anywhere request parameters are accepted:\n\n```js\nconst {google} = require('googleapis');\ngoogle.options({\n  http2: true,\n});\n```\n\nHTTP/2 is often more performant, as it allows multiplexing of multiple concurrent requests over a single socket. In a traditional HTTP/2 API, the client is directly responsible for opening and closing the sessions made to make requests.  To maintain compatibility with the existing API, this module will automatically re-use existing sessions, which are collected after idling for 500ms.  Much of the performance gains will be visible in batch style workloads, and tight loops. To provide feedback on the experimental API surface, please comment on [this issue](https://github.com/googleapis/google-api-nodejs-client/issues/1130).\n\n## Release Notes & Breaking Changes\nYou can find a detailed list of breaking changes and new features in our [Release Notes][releasenotes]. If you've used this library before `25.x`, see our [Release Notes][releasenotes] to learn about migrating your code from `24.x.x` to `25.x.x`. It's pretty easy :)\n\n## License\nThis library is licensed under Apache 2.0. Full license text is available in [LICENSE][license].\n\n## Contributing\nWe love contributions! Before submitting a Pull Request, it's always good to start with a new issue first. To learn more, see [CONTRIBUTING][contributing].\n\n## Questions/problems?\n* Ask your development related questions on [Stackoverflow][stackoverflow].\n* If you've found an bug/issue, please [file it on GitHub][bugs].\n\n\n[snyk-image]: https://snyk.io/test/github/googleapis/google-api-nodejs-client/badge.svg\n[snyk-url]: https://snyk.io/test/github/googleapis/google-api-nodejs-client\n[david-image]: https://david-dm.org/googleapis/google-api-nodejs-client.svg\n[david-url]: https://david-dm.org/googleapis/google-api-nodejs-client\n[npmimg]: https://img.shields.io/npm/v/googleapis.svg\n[npm]: https://www.npmjs.org/package/googleapis\n[bugs]: https://github.com/googleapis/google-api-nodejs-client/issues\n[node]: http://nodejs.org/\n[stackoverflow]: http://stackoverflow.com/questions/tagged/google-api-nodejs-client\n[apiexplorer]: https://developers.google.com/apis-explorer\n[usingkeys]: https://support.google.com/cloud/answer/6158862?hl=en\n[contributing]: https://github.com/googleapis/google-api-nodejs-client/blob/master/CONTRIBUTING.md\n[license]: https://github.com/googleapis/google-api-nodejs-client/tree/master/LICENSE\n[authdocs]: https://developers.google.com/identity/protocols/OpenIDConnect\n[gaxios]: https://github.com/JustinBeckwith/gaxios\n[stream]: http://nodejs.org/api/stream.html#stream_class_stream_readable\n[releasenotes]: https://github.com/googleapis/google-api-nodejs-client/releases\n[devconsole]: https://console.cloud.google.com/apis/credentials\n[oauth]: https://developers.google.com/identity/protocols/OAuth2\n[oauthexample]: https://github.com/googleapis/google-api-nodejs-client/tree/master/samples/oauth2.js\n[options]: https://github.com/googleapis/google-api-nodejs-client/tree/master#options\n[googlecloud]: https://cloud.google.com/nodejs/docs/reference/libraries\n[googlecloudapis]: https://cloud.google.com/nodejs/docs/reference/apis\n[cloudplatform]: https://cloud.google.com/docs/\n[codecovimg]: https://codecov.io/github/googleapis/google-api-nodejs-client/coverage.svg?branch=master\n[codecov]: https://codecov.io/github/googleapis/google-api-nodejs-client?branch=master\n[downloadsimg]: https://img.shields.io/npm/dm/googleapis.svg\n[downloads]: https://www.npmjs.com/package/googleapis\n",
    "licenseText": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/googleapis/-/googleapis-84.0.0.tgz#55b534b234c2df1af0b0f33c0394f31ac23a20d0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/googleapis/-/googleapis-84.0.0.tgz",
    "hash": "55b534b234c2df1af0b0f33c0394f31ac23a20d0",
    "integrity": "sha512-5WWLwmraulw3p55lu0gNpLz2FME1gcuR7QxgmUdAVHMiVN4LEasYjJV9p36gxcf2TMe6bn6+PgQ/63+CvBEgoQ==",
    "registry": "npm",
    "packageName": "googleapis",
    "cacheIntegrity": "sha512-5WWLwmraulw3p55lu0gNpLz2FME1gcuR7QxgmUdAVHMiVN4LEasYjJV9p36gxcf2TMe6bn6+PgQ/63+CvBEgoQ== sha1-VbU0sjTC3xrwsPM8A5TzGsI6INA="
  },
  "registry": "npm",
  "hash": "55b534b234c2df1af0b0f33c0394f31ac23a20d0"
}